/* polylog_T.cpp */
/* adapted from: */
/*  David A. Kosower, November 19, 2007  */

/*  Implementation of real and complex polylogarithms.  The approach is
    based on the one described in 't Hooft and Veltman [NPB153:365 (1979)], 
    and also documented in hep-ph/0502165v2 [Hameren, Vollinga and Weinzierl].

*/

//#include "c++standard.h"
#include <cassert>


namespace BH {
//template<class T> static inline T sq(const T& x) {return(x*x);}

//#define Li2TermLimit_VHP 28  // 7 for double
#define Li2TermLimit_VHP 29  // 7 for double
#define Li2LesserTermLimit_VHP 19
#define Li2LesserTermThreshold 0.2
#define CLi2TermLimit_VHP 37 // 8 for double
#define CLi2LesserTermThreshold 0.05
#define CLi2LesserTermLimit_VHP 20
#define Cl2TermLimit_VHP 58 // 14 for double
#define Cl2LesserTermLimit_VHP 36 // for x < Pi/3

//const RVHP PI_VHP = RVHP("3.14159265358979323846264338327950288419716939937510582097494459");
//const RVHP PiSquaredOver3_VHP = RVHP("3.28986813369645287294483033329205037843789980241359687547111646");
//const RVHP PiSquaredOver6_VHP = RVHP("1.64493406684822643647241516664602518921894990120679843773555823");

//
//const RVHP B0_VHP = RVHP("1.0");
//const RVHP B1over2_VHP = RVHP("-0.25");
//
//// B_{2 index}
//const RVHP Bernoulli2_VHP[]= {
//	RVHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 
//	RVHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
//	RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"), 
//	RVHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"), 
//	RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
//	RVHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"), 
//	RVHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
//	RVHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
//	RVHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
//	RVHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
//	RVHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"), 
//	RVHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"), 
//	RVHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"), 
//	RVHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"), 
//	RVHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"), 
//	RVHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"), 
//	RVHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"), 
//	RVHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"), 
//	RVHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"), 
//	RVHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"), 
//	RVHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"), 
//	RVHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"), 
//	RVHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"), 
//	RVHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"), 
//	RVHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"), 
//	RVHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"), 
//	RVHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"), 
//	RVHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"), 
//	RVHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"), 
//	RVHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"), 
//	RVHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"), 
//	RVHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
//	RVHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"), 
//	RVHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"), 
//	RVHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"), 
//	RVHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44")
//	};
			



RVHP ReLi2(RVHP x)
{
   unsigned int old_cw;
   fpu_fix_start(&old_cw);
   RVHP result;		
   
   const RVHP B0_VHP = RVHP("1.0");
   const RVHP B1over2_VHP = RVHP("-0.25");
   
   RVHP added = RVHP("0.0"), factor = RVHP("1.0");
   const RVHP PiSquaredOver3_VHP = RVHP("3.28986813369645287294483033329205037843789980241359687547111646");
   const RVHP PiSquaredOver6_VHP = RVHP("1.64493406684822643647241516664602518921894990120679843773555823");
   // Improper rounding at 10^-20 or so seems to occur if the array is
   // outside the function
   // B_{2 index}
   const RVHP Bernoulli2_VHP[]= {
      RVHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 
      RVHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
      RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"), 
      RVHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"), 
      RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
      RVHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"), 
      RVHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
      RVHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
      RVHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
      RVHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
      RVHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"), 
      RVHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"), 
      RVHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"), 
      RVHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"), 
      RVHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"), 
      RVHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"), 
      RVHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"), 
      RVHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"), 
      RVHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"), 
      RVHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"), 
	RVHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"), 
	RVHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"), 
	RVHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"), 
	RVHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"), 
	RVHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"), 
	RVHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"), 
	RVHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"), 
	RVHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"), 
	RVHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"), 
	RVHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"), 
	RVHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"), 
	RVHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
	RVHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"), 
	RVHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"), 
	RVHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"), 
	RVHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44")
	};

   assert (sizeof(Bernoulli2_VHP)/sizeof(Bernoulli2_VHP[0]) >= Li2TermLimit_VHP);
 // Map the argument into the range [0,1/2]
 if (x >= 2.)
   // Re[PolyLog[2, x]] ->  Pi^2/3 - Log[x]^2/2 - PolyLog[2, x^(-1)]}
    {added = PiSquaredOver3_VHP - RVHP("0.5")*sq(log(x));
     factor = RVHP("-1.0");
     x = RVHP("1.0")/x;}
 else if (x > 1.)
   // Re[PolyLog[2, x]] -> 
   //           Pi^2/6 - Log[x-1]*Log[x] + Log[x]^2/2 + PolyLog[2, (x-1)/x]
    {RVHP lnx = log(x);
     added = PiSquaredOver6_VHP +(RVHP("0.5")*lnx - log(x-RVHP("1.0")))*lnx;
     factor = RVHP("1.0");
     x = (x-RVHP("1.0"))/x;}
 else if (x > 0.5)
   // PolyLog[2,x] -> -PolyLog[2,1-x] + Pi^2/6 - Log[x] Log[1-x]
    {added = PiSquaredOver6_VHP - log(x)*log(1-x);
     factor = RVHP("-1.0");
     x = RVHP("1.0")-x;}
 else if (x > 0) {}
 else if (x >= -1)
   // PolyLog[2, y] ->  -Log[1 - y]^2/2 - PolyLog[2, y/(-1 + y)]
    {added = RVHP("-0.5")*sq(log(RVHP("1.0")-x));
     factor = RVHP("-1.0");
     x = x/(x-RVHP("1.0"));}
 else 
   // PolyLog[2, y] ->  -Pi^2/6 + Log[1-y]^2/2 - Log[1-y]*Log[-y] 
   //                   + PolyLog[2, 1/(1-y)]
    {RVHP ln1x = log(RVHP("1.0")-x);
     added = -PiSquaredOver6_VHP + (RVHP("0.5")*ln1x-log(-x))*ln1x;
     factor = RVHP("1.0");
     x = RVHP("1.0")/(RVHP("1.0")-x);}
 // Compute PolyLog[2,x], x now in [0,1/2], by Bernoulli series
 RVHP z = -log(RVHP("1.0")-x);
 RVHP li2 = (B0_VHP+B1over2_VHP*z)*z;
 RVHP term = z, zsq = z*z;
 int limit = Li2TermLimit_VHP;
 if (x < Li2LesserTermThreshold) limit = Li2LesserTermLimit_VHP ; //4 in double
 for (int j = 1;  j <= limit;  j += 1)
    {term *= zsq/RVHP((2*j+1)*2*j);
    li2 += Bernoulli2_VHP[j]*term;
}

result = factor*li2+added;
fpu_fix_end(&old_cw);

// return(factor*li2+added);
 return(result);
}

 	

// Complex version of the above
CVHP Li2(CVHP z)
  /* Transformations may not be for optimal regions yet; following
     't Hooft & Veltman, put the argument inside the circle |z|=1,
     and make the real part < 0.5 */
{unsigned int old_cw;
 fpu_fix_start(&old_cw);
 CVHP added(0,0);
 RVHP factor(1);
 const RVHP PiSquaredOver6_VHP = RVHP("1.64493406684822643647241516664602518921894990120679843773555823");
 const RVHP B0_VHP = RVHP("1.0");
 const RVHP B1over2_VHP = RVHP("-0.25");

const RVHP Bernoulli2_VHP[]= {
	RVHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 
	RVHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
	RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"), 
	RVHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"), 
	RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
	RVHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"), 
	RVHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
	RVHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
	RVHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
	RVHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
	RVHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"), 
	RVHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"), 
	RVHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"), 
	RVHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"), 
	RVHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"), 
	RVHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"), 
	RVHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"), 
	RVHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"), 
	RVHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"), 
	RVHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"), 
	RVHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"), 
	RVHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"), 
	RVHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"), 
	RVHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"), 
	RVHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"), 
	RVHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"), 
	RVHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"), 
	RVHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"), 
	RVHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"), 
	RVHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"), 
	RVHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"), 
	RVHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
	RVHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"), 
	RVHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"), 
	RVHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"), 
	RVHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44"),
RVHP("-4.1598278166794710913917074495262358936689603011346470789224934863e46"),
RVHP("5.6920695482035280023883456219121058644480512971811666666666666667e48"),
RVHP("-8.2183629419784575692290653468617333014550892762886003333333333333e50"),
RVHP("1.2502904327166993016732339829702895524177196364448477501115129596e53"),
RVHP("-2.0015583233248370274925329198813298768724220132825915915207456198e55"),
RVHP("3.3674982915364374233396676903338753016219598947193843672321546185e57"),
RVHP("-5.9470970503135447718660496844051540840579071565106904990470431085e59"),
RVHP("1.1011910323627977559564130790437691604630511444223148862699949717e62"),
RVHP("-2.1355259545253501188658385019041065678973298739163469211804590304e64"),
RVHP("4.332889698664119241961661305937920621845136851180910914498655788e66"),
RVHP("-9.1885528241669328226200555215501897138960388916271995959100448711e68"),
RVHP("2.0346896776329074493455027990220020065975140253378277023936918421e71"),
RVHP("-4.7003833958035731078575255535006060654596737369759057915139763564e73"),
RVHP("1.1318043445484249270675186257733934267890365954750747918178993542e76"),
RVHP("-2.8382249570693706959264156336481764738284680928012882128228531714e78")
	};

   assert (sizeof(Bernoulli2_VHP)/sizeof(Bernoulli2_VHP[0]) >= CLi2TermLimit_VHP);

 if (Re(z*conj(z)) > 1)
    {added = -PiSquaredOver6_VHP-sq(log(-z))/RVHP(2);
     factor = RVHP("-1");
     z = RVHP("1.")/z;}
 if (Re(z) > 0.5)
    {added += factor*(PiSquaredOver6_VHP-log(z)*log(RVHP("1.")-z));
     factor *= RVHP("-1");
     z = RVHP("1.")-z;}

 // Compute PolyLog[2,z], z now in unit disc with Re z < 1/2, by Bernoulli series
 CVHP w = -log(RVHP("1.")-z);

 CVHP li2 = (B0_VHP+B1over2_VHP*w)*w;
 CVHP term = w, wsq = w*w;
 int limit = CLi2TermLimit_VHP;
 if (Re(w*conj(w)) < CLi2LesserTermThreshold) 
    limit = CLi2LesserTermLimit_VHP;// 4 for double 
 for (int j = 1;  j <= limit;  j += 1)
    {term *= wsq/RVHP((2*j+1)*2*j);
    li2 += Bernoulli2_VHP[j]*term;}

 CVHP result = (factor*li2+added);
 fpu_fix_end(&old_cw);
 return(result);
}

// Clausen function, from hep-ph/0502165v2 [Hameren, Vollinga and Weinzierl]

RVHP Cl2(RVHP x)
{unsigned int old_cw;
 fpu_fix_start(&old_cw);
 // Having these definitions (even the first!) outside the routine (therefore
 // outside the fpu_fix_start/fpu_fix_end pair) seems to cause errors at the
 // 10^-19 level...
 const RVHP PI_VHP = RVHP("3.14159265358979323846264338327950288419716939937510582097494459");
 const RVHP TwoPi = RVHP(2)*PI_VHP;
 const RVHP TwoPiOver3 = RVHP(2)*PI_VHP/RVHP(3);
 const RVHP PiOver3 = PI_VHP/RVHP(3);

 const RVHP B0_VHP = RVHP(1.);
 const RVHP B1over2_VHP = RVHP(-1.)/RVHP(4.);
 const RVHP Bernoulli2_VHP[]= {
		RVHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 
		RVHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
		RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"), 
		RVHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"), 
		RVHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
		RVHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"), 
		RVHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
		RVHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"), 
		RVHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
		RVHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
		RVHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"), 
		RVHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"), 
		RVHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"), 
		RVHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"), 
		RVHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"), 
		RVHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"), 
		RVHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"), 
		RVHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"), 
		RVHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"), 
		RVHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"), 
		RVHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"), 
		RVHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"), 
		RVHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"), 
		RVHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"), 
		RVHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"), 
		RVHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"), 
		RVHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"), 
		RVHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"), 
		RVHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"), 
		RVHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"), 
		RVHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"), 
		RVHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
		RVHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"), 
		RVHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"), 
		RVHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"), 
		RVHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44"),
RVHP("-4.1598278166794710913917074495262358936689603011346470789224934863e46"),
RVHP("5.6920695482035280023883456219121058644480512971811666666666666667e48"),
RVHP("-8.2183629419784575692290653468617333014550892762886003333333333333e50"),
RVHP("1.2502904327166993016732339829702895524177196364448477501115129596e53"),
RVHP("-2.0015583233248370274925329198813298768724220132825915915207456198e55"),
RVHP("3.3674982915364374233396676903338753016219598947193843672321546185e57"),
RVHP("-5.9470970503135447718660496844051540840579071565106904990470431085e59"),
RVHP("1.1011910323627977559564130790437691604630511444223148862699949717e62"),
RVHP("-2.1355259545253501188658385019041065678973298739163469211804590304e64"),
RVHP("4.332889698664119241961661305937920621845136851180910914498655788e66"),
RVHP("-9.1885528241669328226200555215501897138960388916271995959100448711e68"),
RVHP("2.0346896776329074493455027990220020065975140253378277023936918421e71"),
RVHP("-4.7003833958035731078575255535006060654596737369759057915139763564e73"),
RVHP("1.1318043445484249270675186257733934267890365954750747918178993542e76"),
RVHP("-2.8382249570693706959264156336481764738284680928012882128228531714e78"),
RVHP("7.4064248979678850629750827140920984176879731788088706673116100349e80"),
RVHP("-2.0096454802756604483465619672715363186867270822532876624346130199e83"),
RVHP("5.6657170050805941445719346030519356961419468287510420621387564452e85"),
RVHP("-1.6584511154136216915823713374319912301494962614725464727402466816e88"),
RVHP("5.0368859950492377419289421915180154812442374264903214141525651323e90"),
RVHP("-1.5861468237658186369363401572966438782740978412778963880472864514e93"),
RVHP("5.175674361754562698407324068250712256124084923593055085906216694e95"),
RVHP("-1.7488921840217117339690025877618159145141476161826544872627347216e98"),
RVHP("6.1160519994952185255824525264264167780767726846783200716843240113e100"),
RVHP("-2.2122776912707834942288323456712932445573185054987780150566552693e103"),
RVHP("8.2722776798770969854221062459984595731204650518433566283848852989e105"),
RVHP("-3.1958925111415709583591634369180814873526276671099112273184504243e108"),
RVHP("1.2750082223387792982310024302926679866957191796389773295160585735e111"),
RVHP("-5.2500923086774133899402824624565175446919894037755243260780134522e113"),
RVHP("2.2301817894241625209869298198838728143738272150875878542490550781e116"),
RVHP("-9.7684521930955204438633513398980239301166902674985678971000170662e118"),
RVHP("4.409836197845295427227262287481316919187575426552811473531975914e121"),
RVHP("-2.0508570886464088839729337727583015486456596690400835953087398275e124"),
RVHP("9.8214433279791277107572969602097521041491857990724107055831962748e126"),
RVHP("-4.8412600798208880508789196709963412761130549942324620385115856258e129")
		}
					;

   assert (sizeof(Bernoulli2_VHP)/sizeof(Bernoulli2_VHP[0]) >= Cl2TermLimit_VHP);
	
 RVHP factor = RVHP("1.0");
 RVHP result;
 if (x < 0) {x = -x;  factor = RVHP("-1.0");}

 while (x > TwoPi) x -= TwoPi;
 // shift to range [0,2 Pi/3] (larger upper limit prevents too many recursions)
 if (x > TwoPiOver3) 
   {result = (RVHP(2)*factor*(Cl2(RVHP("0.5")*x)-Cl2(PI_VHP-RVHP("0.5")*x)));
    fpu_fix_end(&old_cw);
    return result;}
 // Compute by Bernoulli series
 RVHP cl2 = x*(RVHP("1.0")-log(x));
 RVHP term = -x, mxsq = -x*x;
 int limit = Cl2TermLimit_VHP;
 if (x < PiOver3) limit = Cl2LesserTermLimit_VHP; //8 for double
 for (int j = 1;  j <= limit;  j += 1)
    {term *= mxsq/RVHP((2*j+1)*2*j);
     cl2 += Bernoulli2_VHP[j]*term/RVHP(2*j);}
 
 result = (factor*cl2);
 fpu_fix_end(&old_cw);
 return result;
}
}
