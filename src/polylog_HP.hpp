/* polylog_T.cpp */
/* adapted from: */
/*  David A. Kosower, November 19, 2007  */

/*  Implementation of real and complex polylogarithms.  The approach is
    based on the one described in 't Hooft and Veltman [NPB153:365 (1979)],
    and also documented in hep-ph/0502165v2 [Hameren, Vollinga and Weinzierl].

*/

//#include "c++standard.h"
#include <cassert>
#include "qd/dd_real.h"
#include "qd_suppl.h"

using namespace qd;
namespace BH {
//template<class T> static inline T sq(const T& x) {return(x*x);}

//#define Li2TermLimit_HP 28  // 7 for double
#define Li2TermLimit_HP 15  // 7 for double
#define Li2LesserTermLimit_HP 9
#define Li2LesserTermThreshold 0.2
#define CLi2TermLimit_HP 19 // 8 for double
#define CLi2LesserTermThreshold 0.05
#define CLi2LesserTermLimit_HP 20
#define Cl2TermLimit_HP 29 // 14 for double
#define Cl2LesserTermLimit_HP 18 // for x < Pi/3



RHP ReLi2(RHP x)
{
   unsigned int old_cw;
   fpu_fix_start(&old_cw);
   RHP result;

   RHP added = RHP("0.0"), factor = RHP("1.0");
   // Improper rounding at 10^-20 or so seems to occur if the array is
   // outside the function
   // B_{2 index}
   const RHP B0_HP = RHP("1.0");
   const RHP B1over2_HP = RHP("-0.25");
   const RHP PI_HP = RHP("3.14159265358979323846264338327950288419716939937510582097494459");
   const RHP PiSquaredOver3_HP = RHP("3.28986813369645287294483033329205037843789980241359687547111646");
   const RHP PiSquaredOver6_HP = RHP("1.64493406684822643647241516664602518921894990120679843773555823");
const RHP Bernoulli2_HP[]= {
      RHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
      RHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
      RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
      RHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"),
      RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
      RHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"),
      RHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
      RHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
      RHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
      RHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
      RHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"),
      RHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"),
      RHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"),
      RHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"),
      RHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"),
      RHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"),
      RHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"),
      RHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"),
      RHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"),
      RHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"),
	RHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"),
	RHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"),
	RHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"),
	RHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"),
	RHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"),
	RHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"),
	RHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"),
	RHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"),
	RHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"),
	RHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"),
	RHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"),
	RHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
	RHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"),
	RHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"),
	RHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"),
	RHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44")
	};

   assert (sizeof(Bernoulli2_HP)/sizeof(Bernoulli2_HP[0]) >= Li2TermLimit_HP);
 // Map the argument into the range [0,1/2]
 if (x >= 2.)
   // Re[PolyLog[2, x]] ->  Pi^2/3 - Log[x]^2/2 - PolyLog[2, x^(-1)]}
    {added = PiSquaredOver3_HP - RHP("0.5")*sq(log(x));
     factor = RHP("-1.0");
     x = RHP("1.0")/x;}
 else if (x > 1.)
   // Re[PolyLog[2, x]] ->
   //           Pi^2/6 - Log[x-1]*Log[x] + Log[x]^2/2 + PolyLog[2, (x-1)/x]
    {RHP lnx = log(x);
     added = PiSquaredOver6_HP +(RHP("0.5")*lnx - log(x-RHP("1.0")))*lnx;
     factor = RHP("1.0");
     x = (x-RHP("1.0"))/x;}
 else if (x > 0.5)
   // PolyLog[2,x] -> -PolyLog[2,1-x] + Pi^2/6 - Log[x] Log[1-x]
    {added = PiSquaredOver6_HP - log(x)*log(1-x);
     factor = RHP("-1.0");
     x = RHP("1.0")-x;}
 else if (x > 0) {}
 else if (x >= -1)
   // PolyLog[2, y] ->  -Log[1 - y]^2/2 - PolyLog[2, y/(-1 + y)]
    {added = RHP("-0.5")*sq(log(RHP("1.0")-x));
     factor = RHP("-1.0");
     x = x/(x-RHP("1.0"));}
 else
   // PolyLog[2, y] ->  -Pi^2/6 + Log[1-y]^2/2 - Log[1-y]*Log[-y]
   //                   + PolyLog[2, 1/(1-y)]
    {RHP ln1x = log(RHP("1.0")-x);
     added = -PiSquaredOver6_HP + (RHP("0.5")*ln1x-log(-x))*ln1x;
     factor = RHP("1.0");
     x = RHP("1.0")/(RHP("1.0")-x);}
 // Compute PolyLog[2,x], x now in [0,1/2], by Bernoulli series
 RHP z = -log(RHP("1.0")-x);
 RHP li2 = (B0_HP+B1over2_HP*z)*z;
 RHP term = z, zsq = z*z;
 int limit = Li2TermLimit_HP;
 if (x < Li2LesserTermThreshold) limit = Li2LesserTermLimit_HP ; //4 in double
 for (int j = 1;  j <= limit;  j += 1)
    {term *= zsq/RHP((2*j+1)*2*j);
    li2 += Bernoulli2_HP[j]*term;
}

result = factor*li2+added;
fpu_fix_end(&old_cw);

// return(factor*li2+added);
 return(result);
}



// Complex version of the above
CHP Li2(CHP z)
  /* Transformations may not be for optimal regions yet; following
     't Hooft & Veltman, put the argument inside the circle |z|=1,
     and make the real part < 0.5 */
{unsigned int old_cw;
 fpu_fix_start(&old_cw);
 CHP added(0,0);
 RHP factor(1);
 const RHP B0_HP = RHP("1.0");
 const RHP B1over2_HP = RHP("-0.25");
 const RHP PI_HP = RHP("3.14159265358979323846264338327950288419716939937510582097494459");
 const RHP PiSquaredOver3_HP = RHP("3.28986813369645287294483033329205037843789980241359687547111646");
 const RHP PiSquaredOver6_HP = RHP("1.64493406684822643647241516664602518921894990120679843773555823");

const RHP Bernoulli2_HP[]= {
	RHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	RHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
	RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
	RHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"),
	RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
	RHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"),
	RHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
	RHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
	RHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
	RHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
	RHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"),
	RHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"),
	RHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"),
	RHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"),
	RHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"),
	RHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"),
	RHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"),
	RHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"),
	RHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"),
	RHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"),
	RHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"),
	RHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"),
	RHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"),
	RHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"),
	RHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"),
	RHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"),
	RHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"),
	RHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"),
	RHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"),
	RHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"),
	RHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"),
	RHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
	RHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"),
	RHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"),
	RHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"),
	RHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44"),
RHP("-4.1598278166794710913917074495262358936689603011346470789224934863e46"),
RHP("5.6920695482035280023883456219121058644480512971811666666666666667e48"),
RHP("-8.2183629419784575692290653468617333014550892762886003333333333333e50"),
RHP("1.2502904327166993016732339829702895524177196364448477501115129596e53"),
RHP("-2.0015583233248370274925329198813298768724220132825915915207456198e55"),
RHP("3.3674982915364374233396676903338753016219598947193843672321546185e57"),
RHP("-5.9470970503135447718660496844051540840579071565106904990470431085e59"),
RHP("1.1011910323627977559564130790437691604630511444223148862699949717e62"),
RHP("-2.1355259545253501188658385019041065678973298739163469211804590304e64"),
RHP("4.332889698664119241961661305937920621845136851180910914498655788e66"),
RHP("-9.1885528241669328226200555215501897138960388916271995959100448711e68"),
RHP("2.0346896776329074493455027990220020065975140253378277023936918421e71"),
RHP("-4.7003833958035731078575255535006060654596737369759057915139763564e73"),
RHP("1.1318043445484249270675186257733934267890365954750747918178993542e76"),
RHP("-2.8382249570693706959264156336481764738284680928012882128228531714e78")
	};

   assert (sizeof(Bernoulli2_HP)/sizeof(Bernoulli2_HP[0]) >= CLi2TermLimit_HP);

 if (Re(z*conj(z)) > 1)
    {added = -PiSquaredOver6_HP-sq(log(-z))/RHP(2);
     factor = RHP("-1");
     z = RHP("1.")/z;}
 if (Re(z) > 0.5)
    {added += factor*(PiSquaredOver6_HP-log(z)*log(RHP("1.")-z));
     factor *= RHP("-1");
     z = RHP("1.")-z;}

 // Compute PolyLog[2,z], z now in unit disc with Re z < 1/2, by Bernoulli series
 CHP w = -log(RHP("1.")-z);

 CHP li2 = (B0_HP+B1over2_HP*w)*w;
 CHP term = w, wsq = w*w;
 int limit = CLi2TermLimit_HP;
 if (Re(w*conj(w)) < CLi2LesserTermThreshold)
    limit = CLi2LesserTermLimit_HP;// 4 for double
 for (int j = 1;  j <= limit;  j += 1)
    {term *= wsq/RHP((2*j+1)*2*j);
    li2 += Bernoulli2_HP[j]*term;}

 CHP result = (factor*li2+added);
 fpu_fix_end(&old_cw);
 return(result);
}

// Clausen function, from hep-ph/0502165v2 [Hameren, Vollinga and Weinzierl]

RHP Cl2(RHP x)
{unsigned int old_cw;
 fpu_fix_start(&old_cw);
 // Having these definitions (even the first!) outside the routine (therefore
 // outside the fpu_fix_start/fpu_fix_end pair) seems to cause errors at the
 // 10^-19 level...
 const RHP PI_HP = RHP("3.14159265358979323846264338327950288419716939937510582097494459");
 const RHP TwoPi = RHP(2)*PI_HP;
 const RHP TwoPiOver3 = RHP(2)*PI_HP/RHP(3);
 const RHP PiOver3 = PI_HP/RHP(3);

 const RHP B0_HP = RHP(1.);
 const RHP B1over2_HP = RHP(-1.)/RHP(4.);
 const RHP Bernoulli2_HP[]= {
		RHP("1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
		RHP("0.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
		RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
		RHP("0.02380952380952380952380952380952380952380952380952380952380952380952380952380952380952"),
		RHP("-0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333"),
		RHP("0.07575757575757575757575757575757575757575757575757575757575757575757575757575757575757"),
		RHP("-0.25311355311355311355311355311355311355311355311355311355311355311355311355311355311355"),
		RHP("1.16666666666666666666666666666666666666666666666666666666666666666666666666666666666667"),
		RHP("-7.09215686274509803921568627450980392156862745098039215686274509803921568627450980392157"),
		RHP("54.97117794486215538847117794486215538847117794486215538847117794486215538847117794486215"),
		RHP("-529.12424242424242424242424242424242424242424242424242424242424242424242424242424"),
		RHP("6192.12318840579710144927536231884057971014492753623188405797101449275362318840579"),
		RHP("-86580.25311355311355311355311355311355311355311355311355311355311355311355311355311"),
		RHP("1.42551716666666666666666666666666666666666666666666666666666666666666666666666666667e6"),
		RHP("-2.729823106781609195402298850574712643678160919540229885057471264367816091954022988506e7"),
		RHP("6.0158087390064236838430386817483591677140064236838430386817483591677140064236838430386e8"),
		RHP("-1.511631576709215686274509803921568627450980392156862745098039215686274509803921568627451e10"),
		RHP("4.2961464306116666666666666666666666666666666666666666666666666666666666666666666666666667e11"),
		RHP("-1.37116552050883327721590879485616327721590879485616327721590879485616327721590879e13"),
		RHP("4.883323189735931666666666666666666666666666666666666666666666666666666666666666667e14"),
		RHP("-1.92965793419400681486326681448632668144863266814486326681448632668144863266814486327e16"),
		RHP("8.416930475736826150005537098560354374307862679955703211517165005537098560354374307863e17"),
		RHP("-4.03380718540594554130768115942028985507246376811594202898550724637681159420289855072464e19"),
		RHP("2.1150748638081991605601453900709219858156028368794326241134751773049645390070921985815603e21"),
		RHP("-1.208662652229652593460273119370825253178194354664942900237017884076707606119370826e23"),
		RHP("7.5008667460769643668557200757575757575757575757575757575757575757575757575757575757e24"),
		RHP("-5.038778101481068914137893030522012578616352201257861635220125786163522012578616352201e26"),
		RHP("3.65287764848181233351104308429711779448621553884711779448621553884711779448621553884712e28"),
		RHP("-2.8498769302450882226269146432910678160919540229885057471264367816091954022988505747126436e30"),
		RHP("2.3865427499683627644645981919219214971751412429378531073446327683615819209039548e32"),
		RHP("-2.1399949257225333665810744765191097392674151161723874574218307692659887265915822235e34"),
		RHP("2.050097572347809756992173309567231025166666666666666666666666666666666666666666666667e36"),
		RHP("-2.09380059113463784090951852900279701847092156862745098039215686274509803921568627450981e38"),
		RHP("2.2752696488463515559649260352769264581469965405889805630233923549952102839838076697259046e40"),
		RHP("-2.62577102862395760473030497361582020814490003333333333333333333333333333333333333e42"),
		RHP("3.2125082102718032518204792304264985243521941106167306871532223644899701237729406743e44"),
RHP("-4.1598278166794710913917074495262358936689603011346470789224934863e46"),
RHP("5.6920695482035280023883456219121058644480512971811666666666666667e48"),
RHP("-8.2183629419784575692290653468617333014550892762886003333333333333e50"),
RHP("1.2502904327166993016732339829702895524177196364448477501115129596e53"),
RHP("-2.0015583233248370274925329198813298768724220132825915915207456198e55"),
RHP("3.3674982915364374233396676903338753016219598947193843672321546185e57"),
RHP("-5.9470970503135447718660496844051540840579071565106904990470431085e59"),
RHP("1.1011910323627977559564130790437691604630511444223148862699949717e62"),
RHP("-2.1355259545253501188658385019041065678973298739163469211804590304e64"),
RHP("4.332889698664119241961661305937920621845136851180910914498655788e66"),
RHP("-9.1885528241669328226200555215501897138960388916271995959100448711e68"),
RHP("2.0346896776329074493455027990220020065975140253378277023936918421e71"),
RHP("-4.7003833958035731078575255535006060654596737369759057915139763564e73"),
RHP("1.1318043445484249270675186257733934267890365954750747918178993542e76"),
RHP("-2.8382249570693706959264156336481764738284680928012882128228531714e78"),
RHP("7.4064248979678850629750827140920984176879731788088706673116100349e80"),
RHP("-2.0096454802756604483465619672715363186867270822532876624346130199e83"),
RHP("5.6657170050805941445719346030519356961419468287510420621387564452e85"),
RHP("-1.6584511154136216915823713374319912301494962614725464727402466816e88"),
RHP("5.0368859950492377419289421915180154812442374264903214141525651323e90"),
RHP("-1.5861468237658186369363401572966438782740978412778963880472864514e93"),
RHP("5.175674361754562698407324068250712256124084923593055085906216694e95"),
RHP("-1.7488921840217117339690025877618159145141476161826544872627347216e98"),
RHP("6.1160519994952185255824525264264167780767726846783200716843240113e100"),
RHP("-2.2122776912707834942288323456712932445573185054987780150566552693e103"),
RHP("8.2722776798770969854221062459984595731204650518433566283848852989e105"),
RHP("-3.1958925111415709583591634369180814873526276671099112273184504243e108"),
RHP("1.2750082223387792982310024302926679866957191796389773295160585735e111"),
RHP("-5.2500923086774133899402824624565175446919894037755243260780134522e113"),
RHP("2.2301817894241625209869298198838728143738272150875878542490550781e116"),
RHP("-9.7684521930955204438633513398980239301166902674985678971000170662e118"),
RHP("4.409836197845295427227262287481316919187575426552811473531975914e121"),
RHP("-2.0508570886464088839729337727583015486456596690400835953087398275e124"),
RHP("9.8214433279791277107572969602097521041491857990724107055831962748e126"),
RHP("-4.8412600798208880508789196709963412761130549942324620385115856258e129")
		}
					;

   assert (sizeof(Bernoulli2_HP)/sizeof(Bernoulli2_HP[0]) >= Cl2TermLimit_HP);

 RHP factor = RHP("1.0");
 RHP result;
 if (x < 0) {x = -x;  factor = RHP("-1.0");}

 while (x > TwoPi) x -= TwoPi;
 // shift to range [0,2 Pi/3] (larger upper limit prevents too many recursions)
 if (x > TwoPiOver3)
   {result = (RHP(2)*factor*(Cl2(RHP("0.5")*x)-Cl2(PI_HP-RHP("0.5")*x)));
    fpu_fix_end(&old_cw);
    return result;}
 // Compute by Bernoulli series
 RHP cl2 = x*(RHP("1.0")-log(x));
 RHP term = -x, mxsq = -x*x;
 int limit = Cl2TermLimit_HP;
 if (x < PiOver3) limit = Cl2LesserTermLimit_HP; //8 for double
 for (int j = 1;  j <= limit;  j += 1)
    {term *= mxsq/RHP((2*j+1)*2*j);
     cl2 += Bernoulli2_HP[j]*term/RHP(2*j);}

 result = (factor*cl2);
 fpu_fix_end(&old_cw);
 return result;
}
}
