/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BH__BH_Ampl swig_types[0]
#define SWIGTYPE_p_BH__BH_interface swig_types[1]
#define SWIGTYPE_p_BH__BHerror swig_types[2]
#define SWIGTYPE_p_BH__BHinput swig_types[3]
#define SWIGTYPE_p_BH__CmomT_dd_real_t swig_types[4]
#define SWIGTYPE_p_BH__CmomT_double_t swig_types[5]
#define SWIGTYPE_p_BH__CmomT_qd_real_t swig_types[6]
#define SWIGTYPE_p_BH__Cut_Part swig_types[7]
#define SWIGTYPE_p_BH__Cut_Part_D_Dims swig_types[8]
#define SWIGTYPE_p_BH__Cut_Part_base swig_types[9]
#define SWIGTYPE_p_BH__HelAmpl swig_types[10]
#define SWIGTYPE_p_BH__Known_Rational_factory swig_types[11]
#define SWIGTYPE_p_BH__Known_Rec_Tree swig_types[12]
#define SWIGTYPE_p_BH__Known_Rec_Tree_base swig_types[13]
#define SWIGTYPE_p_BH__Known_Rec_Tree_offset swig_types[14]
#define SWIGTYPE_p_BH__Known_Rec_Tree_permutation swig_types[15]
#define SWIGTYPE_p_BH__Known_cut_part_factory swig_types[16]
#define SWIGTYPE_p_BH__OneLoopAmplitude_base swig_types[17]
#define SWIGTYPE_p_BH__OneLoopRawAmplitude swig_types[18]
#define SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude swig_types[19]
#define SWIGTYPE_p_BH__Rational_base swig_types[20]
#define SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t swig_types[21]
#define SWIGTYPE_p_BH__Rec_BB swig_types[22]
#define SWIGTYPE_p_BH__Rec_Tree swig_types[23]
#define SWIGTYPE_p_BH__Rec_Tree_WC swig_types[24]
#define SWIGTYPE_p_BH__Rec_Tree_WC_factory swig_types[25]
#define SWIGTYPE_p_BH__SeriesCT_dd_real_t swig_types[26]
#define SWIGTYPE_p_BH__SeriesCT_double_t swig_types[27]
#define SWIGTYPE_p_BH__SeriesCT_qd_real_t swig_types[28]
#define SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t swig_types[29]
#define SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t swig_types[30]
#define SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t swig_types[31]
#define SWIGTYPE_p_BH__Spurious_Pole swig_types[32]
#define SWIGTYPE_p_BH__Spurious_Rational swig_types[33]
#define SWIGTYPE_p_BH__TreeHelAmpl swig_types[34]
#define SWIGTYPE_p_BH__Tree_PairT_BH__massive_prop_massless_shift_t swig_types[35]
#define SWIGTYPE_p_BH__Tree_PairT_BH__massive_prop_shift_t swig_types[36]
#define SWIGTYPE_p_BH__Tree_PairT_BH__massive_shift_t swig_types[37]
#define SWIGTYPE_p_BH__Tree_PairT_BH__massive_unshifted_shift_t swig_types[38]
#define SWIGTYPE_p_BH__Tree_PairT_BH__massless_shift_t swig_types[39]
#define SWIGTYPE_p_BH__Tree_Pair_base swig_types[40]
#define SWIGTYPE_p_BH__Tree_factory swig_types[41]
#define SWIGTYPE_p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t swig_types[42]
#define SWIGTYPE_p_BH__Unknown_Rec_Tree swig_types[43]
#define SWIGTYPE_p_BH__boxD swig_types[44]
#define SWIGTYPE_p_BH__bubbleD swig_types[45]
#define SWIGTYPE_p_BH__computableT_BH__SeriesC_t swig_types[46]
#define SWIGTYPE_p_BH__computableT_std__complex_t swig_types[47]
#define SWIGTYPE_p_BH__copy_into_set swig_types[48]
#define SWIGTYPE_p_BH__cutD swig_types[49]
#define SWIGTYPE_p_BH__cutD_factory swig_types[50]
#define SWIGTYPE_p_BH__cut__Darren_CutD_Factory swig_types[51]
#define SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t swig_types[52]
#define SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t swig_types[53]
#define SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t swig_types[54]
#define SWIGTYPE_p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t swig_types[55]
#define SWIGTYPE_p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t swig_types[56]
#define SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t swig_types[57]
#define SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t swig_types[58]
#define SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t swig_types[59]
#define SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t swig_types[60]
#define SWIGTYPE_p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t swig_types[61]
#define SWIGTYPE_p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t swig_types[62]
#define SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t swig_types[63]
#define SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t swig_types[64]
#define SWIGTYPE_p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t swig_types[65]
#define SWIGTYPE_p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t swig_types[66]
#define SWIGTYPE_p_BH__cut__higgs_CutD_Factory swig_types[67]
#define SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t swig_types[68]
#define SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t swig_types[69]
#define SWIGTYPE_p_BH__cut__normal_cut_partT_FHZ_factory_t swig_types[70]
#define SWIGTYPE_p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t swig_types[71]
#define SWIGTYPE_p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t swig_types[72]
#define SWIGTYPE_p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t swig_types[73]
#define SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t swig_types[74]
#define SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t swig_types[75]
#define SWIGTYPE_p_BH__eval_paramT_dd_real_t swig_types[76]
#define SWIGTYPE_p_BH__eval_paramT_double_t swig_types[77]
#define SWIGTYPE_p_BH__eval_paramT_qd_real_t swig_types[78]
#define SWIGTYPE_p_BH__eval_param_state swig_types[79]
#define SWIGTYPE_p_BH__indices_struct swig_types[80]
#define SWIGTYPE_p_BH__lambdaT_dd_real_t swig_types[81]
#define SWIGTYPE_p_BH__lambdaT_double_t swig_types[82]
#define SWIGTYPE_p_BH__lambdaT_qd_real_t swig_types[83]
#define SWIGTYPE_p_BH__lambdatT_dd_real_t swig_types[84]
#define SWIGTYPE_p_BH__lambdatT_double_t swig_types[85]
#define SWIGTYPE_p_BH__lambdatT_qd_real_t swig_types[86]
#define SWIGTYPE_p_BH__mass_param swig_types[87]
#define SWIGTYPE_p_BH__mass_param_coll swig_types[88]
#define SWIGTYPE_p_BH__mass_param_library swig_types[89]
#define SWIGTYPE_p_BH__match_cutD_independent_of_cut_legs swig_types[90]
#define SWIGTYPE_p_BH__mom_conf_readerT_double_t swig_types[91]
#define SWIGTYPE_p_BH__mom_conf_reader_base swig_types[92]
#define SWIGTYPE_p_BH__momentumT_dd_real_t swig_types[93]
#define SWIGTYPE_p_BH__momentumT_double_t swig_types[94]
#define SWIGTYPE_p_BH__momentumT_qd_real_t swig_types[95]
#define SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t swig_types[96]
#define SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t swig_types[97]
#define SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t swig_types[98]
#define SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t swig_types[99]
#define SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t swig_types[100]
#define SWIGTYPE_p_BH__momentum_configurationT_BH__R_t swig_types[101]
#define SWIGTYPE_p_BH__momentum_configurationT_dd_real_t swig_types[102]
#define SWIGTYPE_p_BH__momentum_configurationT_double_t swig_types[103]
#define SWIGTYPE_p_BH__momentum_configurationT_qd_real_t swig_types[104]
#define SWIGTYPE_p_BH__momentum_configuration_base swig_types[105]
#define SWIGTYPE_p_BH__option swig_types[106]
#define SWIGTYPE_p_BH__ordering_constraint swig_types[107]
#define SWIGTYPE_p_BH__part swig_types[108]
#define SWIGTYPE_p_BH__particle swig_types[109]
#define SWIGTYPE_p_BH__particle_ID swig_types[110]
#define SWIGTYPE_p_BH__pentagonD swig_types[111]
#define SWIGTYPE_p_BH__plabel swig_types[112]
#define SWIGTYPE_p_BH__process swig_types[113]
#define SWIGTYPE_p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t swig_types[114]
#define SWIGTYPE_p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t swig_types[115]
#define SWIGTYPE_p_BH__ratext__normal_ratext_factory swig_types[116]
#define SWIGTYPE_p_BH__raw_box swig_types[117]
#define SWIGTYPE_p_BH__raw_bubble swig_types[118]
#define SWIGTYPE_p_BH__raw_part swig_types[119]
#define SWIGTYPE_p_BH__raw_triangle swig_types[120]
#define SWIGTYPE_p_BH__setable swig_types[121]
#define SWIGTYPE_p_BH__shift_base swig_types[122]
#define SWIGTYPE_p_BH__smatrixT_double_t swig_types[123]
#define SWIGTYPE_p_BH__spinorT_dd_real_t swig_types[124]
#define SWIGTYPE_p_BH__spinorT_double_t swig_types[125]
#define SWIGTYPE_p_BH__spinorT_qd_real_t swig_types[126]
#define SWIGTYPE_p_BH__symmetry_factor swig_types[127]
#define SWIGTYPE_p_BH__triangleD swig_types[128]
#define SWIGTYPE_p_BH__unordered_compare_2 swig_types[129]
#define SWIGTYPE_p_BH__unordered_compare_3 swig_types[130]
#define SWIGTYPE_p_BH__unordered_compare_current swig_types[131]
#define SWIGTYPE_p_BH__unordered_compare_part swig_types[132]
#define SWIGTYPE_p_BH__unordered_compare_part_prop swig_types[133]
#define SWIGTYPE_p_BH__unordered_equal swig_types[134]
#define SWIGTYPE_p_BH__unordered_equal_and_delete_ptr swig_types[135]
#define SWIGTYPE_p_BH__unordered_equal_current swig_types[136]
#define SWIGTYPE_p_BH__unordered_equal_part swig_types[137]
#define SWIGTYPE_p_BH__unordered_equal_part_prop swig_types[138]
#define SWIGTYPE_p_BH__unordered_equal_ptr swig_types[139]
#define SWIGTYPE_p_BH__unordered_equal_to_ptr swig_types[140]
#define SWIGTYPE_p_BH__worker_tree swig_types[141]
#define SWIGTYPE_p_BH__worker_tree_factory swig_types[142]
#define SWIGTYPE_p_BH__worker_tree_known swig_types[143]
#define SWIGTYPE_p_BH__worker_tree_known_offset swig_types[144]
#define SWIGTYPE_p_BH__worker_tree_unknown swig_types[145]
#define SWIGTYPE_p_BoxType swig_types[146]
#define SWIGTYPE_p_BubType swig_types[147]
#define SWIGTYPE_p_BubbleType swig_types[148]
#define SWIGTYPE_p_C swig_types[149]
#define SWIGTYPE_p_CHP swig_types[150]
#define SWIGTYPE_p_CVHP swig_types[151]
#define SWIGTYPE_p_Cut_Part_Type swig_types[152]
#define SWIGTYPE_p_Cut_Part_base swig_types[153]
#define SWIGTYPE_p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t swig_types[154]
#define SWIGTYPE_p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t swig_types[155]
#define SWIGTYPE_p_MomentaEvaluatorType swig_types[156]
#define SWIGTYPE_p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t swig_types[157]
#define SWIGTYPE_p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t swig_types[158]
#define SWIGTYPE_p_Rational_Type swig_types[159]
#define SWIGTYPE_p_SCP swig_types[160]
#define SWIGTYPE_p_TriType swig_types[161]
#define SWIGTYPE_p_TriangleType swig_types[162]
#define SWIGTYPE_p__Rep_type__const_iterator swig_types[163]
#define SWIGTYPE_p__Rep_type__const_reverse_iterator swig_types[164]
#define SWIGTYPE_p__Rep_type__size_type swig_types[165]
#define SWIGTYPE_p_allocator_type swig_types[166]
#define SWIGTYPE_p_bool swig_types[167]
#define SWIGTYPE_p_boxD swig_types[168]
#define SWIGTYPE_p_bubbleD swig_types[169]
#define SWIGTYPE_p_char swig_types[170]
#define SWIGTYPE_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t swig_types[171]
#define SWIGTYPE_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t swig_types[172]
#define SWIGTYPE_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t swig_types[173]
#define SWIGTYPE_p_const_iterator swig_types[174]
#define SWIGTYPE_p_const_pointer swig_types[175]
#define SWIGTYPE_p_const_reference swig_types[176]
#define SWIGTYPE_p_const_reverse_iterator swig_types[177]
#define SWIGTYPE_p_containerTypeT_dd_real_t swig_types[178]
#define SWIGTYPE_p_containerTypeT_double_t swig_types[179]
#define SWIGTYPE_p_containerTypeT_qd_real_t swig_types[180]
#define SWIGTYPE_p_corner_type swig_types[181]
#define SWIGTYPE_p_cutD_D_Dims_factory swig_types[182]
#define SWIGTYPE_p_daughter_type swig_types[183]
#define SWIGTYPE_p_dd_real swig_types[184]
#define SWIGTYPE_p_difference_type swig_types[185]
#define SWIGTYPE_p_double swig_types[186]
#define SWIGTYPE_p_iterator swig_types[187]
#define SWIGTYPE_p_key_compare swig_types[188]
#define SWIGTYPE_p_key_type swig_types[189]
#define SWIGTYPE_p_multi_precision_constant swig_types[190]
#define SWIGTYPE_p_option swig_types[191]
#define SWIGTYPE_p_ordering_constraint swig_types[192]
#define SWIGTYPE_p_p_BH__CmomT_dd_real_t swig_types[193]
#define SWIGTYPE_p_p_BH__CmomT_double_t swig_types[194]
#define SWIGTYPE_p_p_BH__CmomT_qd_real_t swig_types[195]
#define SWIGTYPE_p_p_PyObject swig_types[196]
#define SWIGTYPE_p_pointer swig_types[197]
#define SWIGTYPE_p_qd_real swig_types[198]
#define SWIGTYPE_p_raw_bubble swig_types[199]
#define SWIGTYPE_p_raw_triangle swig_types[200]
#define SWIGTYPE_p_reference swig_types[201]
#define SWIGTYPE_p_reverse_iterator swig_types[202]
#define SWIGTYPE_p_scheme swig_types[203]
#define SWIGTYPE_p_size_t swig_types[204]
#define SWIGTYPE_p_size_type swig_types[205]
#define SWIGTYPE_p_std__allocatorT_BH__particle_ID_t swig_types[206]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[207]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[208]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[209]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t swig_types[210]
#define SWIGTYPE_p_std__complexT_dd_real_t swig_types[211]
#define SWIGTYPE_p_std__complexT_double_t swig_types[212]
#define SWIGTYPE_p_std__complexT_qd_real_t swig_types[213]
#define SWIGTYPE_p_std__invalid_argument swig_types[214]
#define SWIGTYPE_p_std__ios__pos_type swig_types[215]
#define SWIGTYPE_p_std__istream swig_types[216]
#define SWIGTYPE_p_std__lessT_int_t swig_types[217]
#define SWIGTYPE_p_std__ostream swig_types[218]
#define SWIGTYPE_p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t swig_types[219]
#define SWIGTYPE_p_std__pairT__Rep_type__const_iterator_bool_t swig_types[220]
#define SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t swig_types[221]
#define SWIGTYPE_p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t swig_types[222]
#define SWIGTYPE_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t swig_types[223]
#define SWIGTYPE_p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t swig_types[224]
#define SWIGTYPE_p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t swig_types[225]
#define SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t swig_types[226]
#define SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator swig_types[227]
#define SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t swig_types[228]
#define SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t swig_types[229]
#define SWIGTYPE_p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t swig_types[230]
#define SWIGTYPE_p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t swig_types[231]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[232]
#define SWIGTYPE_p_std__vectorT_double_p_std__allocatorT_double_p_t_t swig_types[233]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[234]
#define SWIGTYPE_p_std__vectorT_int_p_std__allocatorT_int_p_t_t swig_types[235]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[236]
#define SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t swig_types[237]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[238]
#define SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t swig_types[239]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[240]
#define SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t swig_types[241]
#define SWIGTYPE_p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t swig_types[242]
#define SWIGTYPE_p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator swig_types[243]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[244]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[245]
#define SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t swig_types[246]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[247]
#define SWIGTYPE_p_triangleD swig_types[248]
#define SWIGTYPE_p_value_compare swig_types[249]
#define SWIGTYPE_p_value_type swig_types[250]
static swig_type_info *swig_types[252];
static swig_module_info swig_module = {swig_types, 251, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _BH.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__BH

#else
#  define SWIG_init    init_BH

#endif
#define SWIG_name    "_BH"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v=std::vector< double,std::allocator< double > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< double,std::allocator< double > >, std::allocator< std::vector< double,std::allocator< double > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< double,std::allocator< double > >" "," "std::allocator< std::vector< double,std::allocator< double > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(std::vector< std::vector< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< double > >::size_type std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__(std::vector< std::vector< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v=std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< double > > *self,PySliceObject *slice,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< double > > const *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< int,std::allocator< int > >, std::allocator< std::vector< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< int,std::allocator< int > >" "," "std::allocator< std::vector< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(std::vector< std::vector< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v=std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }

#include <complex> 


#include <complex>
#include "Interface/BH_interface.h"
#include "Interface/BH_Ampl.h"
//include this one so I can access the components of the spinor
#include "sp.h"
#include "mom_conf.h"
#include "particles.h"
#include "settings_reader.h"
#include "process.h"
#include "particles.h"
#include "eval_param.h"
#include "tree_amplitudes.h"
#if BH_USE_GMP
#include "gmp_r.h"
#include "GMP_random.h"
#endif
//#include "shared_trees.h"
#include "OneLoopHelAmpl.h"
#include "cut_Darren.h"
#include "cut_part.h"
#include "cut_part_factory.h"
#include "rational.h"
#include "rational_factory.h"
#include "print_cutD.h"	  
#include "info.h"
#include "ordering.h"
#include "partitions.h" 
#include "partial_order.h"
#include "cut_part_normal.h"
#include "ratext/ratext_part_normal.h"
#include "worker_tree.h"

using namespace std;
using namespace BH;

 
SWIGINTERN std::set< int > *new_std_set_Sl_int_Sg___SWIG_4(std::vector< int,std::allocator< int > > const &v){
			  std::set<int>*  s=new std::set<int>();
		  for (int i=0;i<v.size();i++){
			  s->insert(v[i]);}
		  return s;
	  }
SWIGINTERN std::string std_set_Sl_int_Sg____str__(std::set< int > *self){
		  std::ostringstream oss(std::ostringstream::out);
		  oss<< "{ ";
		  std::copy(self->begin(),self->end(),ostream_iterator<int>(oss," "));
		  oss<< "}";
		  return oss.str();
	  }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN bool BH_particle_ID___eq__(BH::particle_ID *self,BH::particle_ID const &p){
			return p == *self;
		}
SWIGINTERN bool BH_particle_ID___ne__(BH::particle_ID *self,BH::particle_ID const &p){
			return !(p == *self);
		}
SWIGINTERN bool BH_particle_ID___lt__(BH::particle_ID *self,BH::particle_ID const &p){
			return p < *self;
		}
SWIGINTERN bool BH_particle_ID___gt__(BH::particle_ID *self,BH::particle_ID const &p){
			return p > *self;
		}
SWIGINTERN bool BH_particle_ID___le__(BH::particle_ID *self,BH::particle_ID const &p){
			return !(p > *self);
		}
SWIGINTERN bool BH_particle_ID___ge__(BH::particle_ID *self,BH::particle_ID const &p){
			return !(p < *self);
		}
SWIGINTERN std::string BH_particle_ID___str__(BH::particle_ID *self){
			std::ostringstream oss(std::ostringstream::out);
			  oss << (*self);
			  return oss.str();
		}

SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (PyObject *o, std::complex<double>* val)
{
  if (PyComplex_Check(o)) {
    if (val) *val = std::complex<double>(PyComplex_RealAsDouble(o), PyComplex_ImagAsDouble(o));
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/usr/share/swig2.0/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}

SWIGINTERN std::string BH_process___str__(BH::process *self){
						  //make sure you include sstream in the SWIG interface file
						  std::ostringstream oss(std::ostringstream::out);
						  oss << (*self);
						  return oss.str();
						}
SWIGINTERN std::complex< double > BH_Series_Sl_std_complex_Sl_double_Sg__Sg____getitem__(BH::Series< std::complex< double > > const *self,int order){
			return (*self)[order];
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_double_Sg__Sg____repr__(BH::Series< std::complex< double > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_double_Sg__Sg____str__(BH::Series< std::complex< double > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN std::complex< dd_real > BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____getitem__(BH::Series< std::complex< dd_real > > const *self,int order){
			return (*self)[order];
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____repr__(BH::Series< std::complex< dd_real > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____str__(BH::Series< std::complex< dd_real > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN std::complex< qd_real > BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____getitem__(BH::Series< std::complex< qd_real > > const *self,int order){
			return (*self)[order];
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____repr__(BH::Series< std::complex< qd_real > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN std::string BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____str__(BH::Series< std::complex< qd_real > > *self){
			//make sure you include sstream in the SWIG interface file
			std::ostringstream oss(std::ostringstream::out);
			oss << (*self);
			return oss.str();
		}
SWIGINTERN BH::Cut_Part_D_Dims *BH_Rational_base_getCutPartDDim(BH::Rational_base *self){
		ratext::normal_ratext* ptr = dynamic_cast<ratext::normal_ratext*>(self);
		if (!ptr){
			std::cout << "Cast failed (type is "<< typeid(*self).name() <<" , expected " << typeid(BH::cut_part_Darren).name() <<")" << std::endl;
			return 0;
		} else {
			std::cout << "Cast succeeded" << std::endl;
		}
		return ptr->get_rat_structure();
	}
SWIGINTERN std::string BH_ordering_constraint___str__(BH::ordering_constraint *self){
		//make sure you include sstream in the SWIG interface file
	  	std::ostringstream oss(std::ostringstream::out);
	  	oss << (*self);
	  	return oss.str();
	}

  namespace swig {
    template <>  struct traits<BH::particle_ID > {
      typedef pointer_category category;
      static const char* type_name() { return"BH::particle_ID"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<BH::particle_ID, std::allocator< BH::particle_ID > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "BH::particle_ID" "," "std::allocator< BH::particle_ID >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_BH_particle_ID_Sg__iterator(std::vector< BH::particle_ID > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_BH_particle_ID_Sg____nonzero__(std::vector< BH::particle_ID > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_BH_particle_ID_Sg____bool__(std::vector< BH::particle_ID > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< BH::particle_ID >::size_type std_vector_Sl_BH_particle_ID_Sg____len__(std::vector< BH::particle_ID > const *self){
      return self->size();
    }
SWIGINTERN std::vector< BH::particle_ID >::value_type std_vector_Sl_BH_particle_ID_Sg__pop(std::vector< BH::particle_ID > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *std_vector_Sl_BH_particle_ID_Sg____getslice__(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::difference_type i,std::vector< BH::particle_ID >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____setslice____SWIG_0(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::difference_type i,std::vector< BH::particle_ID >::difference_type j,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &v=std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____delslice__(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::difference_type i,std::vector< BH::particle_ID >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____delitem____SWIG_0(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *std_vector_Sl_BH_particle_ID_Sg____getitem____SWIG_0(std::vector< BH::particle_ID > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_0(std::vector< BH::particle_ID > *self,PySliceObject *slice,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_1(std::vector< BH::particle_ID > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____delitem____SWIG_1(std::vector< BH::particle_ID > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< BH::particle_ID >::value_type const &std_vector_Sl_BH_particle_ID_Sg____getitem____SWIG_1(std::vector< BH::particle_ID > const *self,std::vector< BH::particle_ID >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_2(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::difference_type i,std::vector< BH::particle_ID >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_BH_particle_ID_Sg__append(std::vector< BH::particle_ID > *self,std::vector< BH::particle_ID >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::string BH_Cmom_Sl_double_Sg____str__(BH::Cmom< double > *self){
		  //make sure you include sstream in the SWIG interface file
		  std::ostringstream oss(std::ostringstream::out);
		  oss << (*self);
		  return oss.str();
		}
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectori_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectori___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectori___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectori")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectori_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectori_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectori",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectori" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectori__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectori__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectori__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectori__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectori'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectori_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectori_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectori_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectori_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectori" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectori_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectord_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectord___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectord___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectord")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectord_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectord_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectord",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectord" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectord__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectord__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectord__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectord_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectord_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectord_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectord_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectord" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectord_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorm_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_iterator" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___bool__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___len__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorm___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorm___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorm___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorm___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorm___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorm___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorm___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorm___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorm___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorm___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__delitem__(std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< double > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorm___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorm___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< double > >::__getitem__(std::vector< std::vector< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorm___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorm___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorm___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setitem__(PySliceObject *,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    std::vector< std::vector< double > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< double > >::__setitem__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorm_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorm")) SWIG_fail;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorm",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorm_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(static_cast< const std::vector< std::vector< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_begin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_end" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_rend" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorm",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorm_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorm_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator)\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorm__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorm",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorm" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorm" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorm__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorm__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorm__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorm__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double,std::allocator< double > > > const &)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorm_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorm_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorm_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorm_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::size_type arg3 ;
  std::vector< std::vector< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorm_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorm_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorm_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::size_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorm_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::vector< double > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorm_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorm_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorm_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::value_type const &)\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorm_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorm_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorm_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorm_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorm" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorvi_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_iterator" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___bool__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorvi___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorvi___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorvi___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorvi___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorvi___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorvi___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorvi___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__setslice__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    std::vector< std::vector< int > >::__setslice__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorvi___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvi___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorvi___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorvi___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__delitem__(std::vector< std::vector< int > >::difference_type)\n"
    "    std::vector< std::vector< int > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorvi___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorvi___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< int > >::__getitem__(std::vector< std::vector< int > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvi___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorvi___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorvi___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorvi___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__setitem__(PySliceObject *,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    std::vector< std::vector< int > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< int > >::__setitem__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorvi_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorvi__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorvi")) SWIG_fail;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorvi__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorvi",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorvi" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorvi" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorvi_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(static_cast< const std::vector< std::vector< int > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_begin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_end" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_rend" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorvi__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorvi",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorvi" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorvi_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorvi_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator)\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorvi__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorvi",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorvi" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorvi" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorvi" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorvi(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorvi__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorvi__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorvi__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorvi__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorvi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::vector()\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorvi_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvi_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvi_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorvi_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorvi_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorvi_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvi_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::size_type arg3 ;
  std::vector< std::vector< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorvi_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorvi_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorvi_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::size_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorvi_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvi_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::vector< int > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorvi_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorvi_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorvi_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::value_type const &)\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorvi_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorvi_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvi_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorvi_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorvi_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvi_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorvi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorvi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorvi" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorvi_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_seti__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_seti")) SWIG_fail;
  result = (std::set< int > *)new std::set< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seti__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< int > *arg1 = 0 ;
  std::set< int >::allocator_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_seti",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_seti" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seti" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__allocatorT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_seti" "', argument " "2"" of type '" "std::set< int >::allocator_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seti" "', argument " "2"" of type '" "std::set< int >::allocator_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< int >::allocator_type * >(argp2);
  result = (std::set< int > *)new std::set< int >((std::less< int > const &)*arg1,(std::set< int >::allocator_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seti__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_seti",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_seti" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seti" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< int > * >(argp1);
  result = (std::set< int > *)new std::set< int >((std::less< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seti__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_seti",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_seti" "', argument " "1"" of type '" "std::set< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seti" "', argument " "1"" of type '" "std::set< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = (std::set< int > *)new std::set< int >((std::set< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seti__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_seti",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_seti" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seti" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< int > *)new_std_set_Sl_int_Sg___SWIG_4((std::vector< int,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seti(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_seti__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_seti__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_seti__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_seti__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__allocatorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_seti__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_seti'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::set()\n"
    "    std::set< int >::set(std::less< int > const &,std::set< int >::allocator_type const &)\n"
    "    std::set< int >::set(std::less< int > const &)\n"
    "    std::set< int >::set(std::set< int > const &)\n"
    "    std::set< int >::set(std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti___str__" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = std_set_Sl_int_Sg____str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_key_comp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::key_compare result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_key_comp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_key_comp" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->key_comp();
  resultobj = SWIG_NewPointerObj((new std::set< int >::key_compare(static_cast< const std::set< int >::key_compare& >(result))), SWIGTYPE_p_std__lessT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_value_comp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::value_compare result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_value_comp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_value_comp" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->value_comp();
  resultobj = SWIG_NewPointerObj((new std::set< int >::value_compare(static_cast< const std::set< int >::value_compare& >(result))), SWIGTYPE_p_std__lessT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_get_allocator" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::set< int >::allocator_type(static_cast< const std::set< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_begin" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_end" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_rbegin" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj((new std::set< int >::reverse_iterator(static_cast< const std::set< int >::reverse_iterator& >(result))), SWIGTYPE_p__Rep_type__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_rend" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj((new std::set< int >::reverse_iterator(static_cast< const std::set< int >::reverse_iterator& >(result))), SWIGTYPE_p__Rep_type__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_empty" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = (bool)((std::set< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_size" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->size();
  resultobj = SWIG_NewPointerObj((new std::set< int >::size_type(static_cast< const std::set< int >::size_type& >(result))), SWIGTYPE_p__Rep_type__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_max_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_max_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_max_size" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  result = ((std::set< int > const *)arg1)->max_size();
  resultobj = SWIG_NewPointerObj((new std::set< int >::size_type(static_cast< const std::set< int >::size_type& >(result))), SWIGTYPE_p__Rep_type__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_swap" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "seti_swap" "', argument " "2"" of type '" "std::set< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "seti_swap" "', argument " "2"" of type '" "std::set< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::set< int >::iterator,bool > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_insert" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_insert" "', argument " "2"" of type '" "std::set< int >::value_type""'");
  } 
  temp2 = static_cast< std::set< int >::value_type >(val2);
  arg2 = &temp2;
  result = (arg1)->insert((std::set< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< std::set< int >::iterator,bool >(static_cast< const std::pair< std::set< int >::iterator,bool >& >(result))), SWIGTYPE_p_std__pairT__Rep_type__const_iterator_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::const_iterator arg2 ;
  std::set< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::set< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:seti_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_insert" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p__Rep_type__const_iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "seti_insert" "', argument " "2"" of type '" "std::set< int >::const_iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "seti_insert" "', argument " "2"" of type '" "std::set< int >::const_iterator""'");
    } else {
      std::set< int >::const_iterator * temp = reinterpret_cast< std::set< int >::const_iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "seti_insert" "', argument " "3"" of type '" "std::set< int >::value_type""'");
  } 
  temp3 = static_cast< std::set< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::set< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_insert__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p__Rep_type__const_iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_seti_insert__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::insert(std::set< int >::value_type const &)\n"
    "    std::set< int >::insert(std::set< int >::const_iterator,std::set< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_erase" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p__Rep_type__const_iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "seti_erase" "', argument " "2"" of type '" "std::set< int >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "seti_erase" "', argument " "2"" of type '" "std::set< int >::iterator""'");
    } else {
      std::set< int >::iterator * temp = reinterpret_cast< std::set< int >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_erase" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_erase" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->erase((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::size_type(static_cast< const std::set< int >::size_type& >(result))), SWIGTYPE_p__Rep_type__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::iterator arg2 ;
  std::set< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:seti_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_erase" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p__Rep_type__const_iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "seti_erase" "', argument " "2"" of type '" "std::set< int >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "seti_erase" "', argument " "2"" of type '" "std::set< int >::iterator""'");
    } else {
      std::set< int >::iterator * temp = reinterpret_cast< std::set< int >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p__Rep_type__const_iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "seti_erase" "', argument " "3"" of type '" "std::set< int >::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "seti_erase" "', argument " "3"" of type '" "std::set< int >::iterator""'");
    } else {
      std::set< int >::iterator * temp = reinterpret_cast< std::set< int >::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p__Rep_type__const_iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_seti_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p__Rep_type__const_iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p__Rep_type__const_iterator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_seti_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::erase(std::set< int >::iterator)\n"
    "    std::set< int >::erase(std::set< int >::key_type const &)\n"
    "    std::set< int >::erase(std::set< int >::iterator,std::set< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seti_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_clear" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_count" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_count" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< int > const *)arg1)->count((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::size_type(static_cast< const std::set< int >::size_type& >(result))), SWIGTYPE_p__Rep_type__size_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_find" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_find" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->find((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_find" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_find" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< int > const *)arg1)->find((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::const_iterator(static_cast< const std::set< int >::const_iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_find(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_find__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_find__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::find(std::set< int >::key_type const &)\n"
    "    std::set< int >::find(std::set< int >::key_type const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti_lower_bound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_lower_bound" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_lower_bound" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->lower_bound((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_lower_bound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_lower_bound" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_lower_bound" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< int > const *)arg1)->lower_bound((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::const_iterator(static_cast< const std::set< int >::const_iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_lower_bound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_lower_bound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_lower_bound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_lower_bound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::lower_bound(std::set< int >::key_type const &)\n"
    "    std::set< int >::lower_bound(std::set< int >::key_type const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti_upper_bound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_upper_bound" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_upper_bound" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->upper_bound((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::iterator(static_cast< const std::set< int >::iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_upper_bound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_upper_bound" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_upper_bound" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< int > const *)arg1)->upper_bound((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::set< int >::const_iterator(static_cast< const std::set< int >::const_iterator& >(result))), SWIGTYPE_p__Rep_type__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_upper_bound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_upper_bound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_upper_bound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_upper_bound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::upper_bound(std::set< int >::key_type const &)\n"
    "    std::set< int >::upper_bound(std::set< int >::key_type const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seti_equal_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::set< int >::iterator,std::set< int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_equal_range" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_equal_range" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->equal_range((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< std::set< int >::iterator,std::set< int >::iterator >(static_cast< const std::pair< std::set< int >::iterator,std::set< int >::iterator >& >(result))), SWIGTYPE_p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_equal_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  std::set< int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< int >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::set< int >::const_iterator,std::set< int >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seti_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seti_equal_range" "', argument " "1"" of type '" "std::set< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seti_equal_range" "', argument " "2"" of type '" "std::set< int >::key_type""'");
  } 
  temp2 = static_cast< std::set< int >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< int > const *)arg1)->equal_range((std::set< int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< std::set< int >::const_iterator,std::set< int >::const_iterator >(static_cast< const std::pair< std::set< int >::const_iterator,std::set< int >::const_iterator >& >(result))), SWIGTYPE_p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seti_equal_range(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_equal_range__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_seti_equal_range__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seti_equal_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< int >::equal_range(std::set< int >::key_type const &)\n"
    "    std::set< int >::equal_range(std::set< int >::key_type const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_seti(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int > *arg1 = (std::set< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_seti",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_seti" "', argument " "1"" of type '" "std::set< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *seti_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::plabel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  arg2 = reinterpret_cast< BH::plabel * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::plabel const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::process const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle::statistics_type arg1 ;
  std::string arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::particle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_particle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_particle" "', argument " "1"" of type '" "BH::particle::statistics_type""'");
  } 
  arg1 = static_cast< BH::particle::statistics_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_particle" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_particle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_particle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_particle" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (BH::particle *)new BH::particle(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle::statistics_type arg1 ;
  std::string arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::particle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_particle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_particle" "', argument " "1"" of type '" "BH::particle::statistics_type""'");
  } 
  arg1 = static_cast< BH::particle::statistics_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_particle" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_particle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_particle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (BH::particle *)new BH::particle(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle::statistics_type arg1 ;
  std::string arg2 ;
  double arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::particle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_particle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_particle" "', argument " "1"" of type '" "BH::particle::statistics_type""'");
  } 
  arg1 = static_cast< BH::particle::statistics_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_particle" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_particle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (BH::particle *)new BH::particle(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_particle__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_particle__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_particle__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_particle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::particle::particle(BH::particle::statistics_type,std::string,double,int,int,int)\n"
    "    BH::particle::particle(BH::particle::statistics_type,std::string,double,int,int)\n"
    "    BH::particle::particle(BH::particle::statistics_type,std::string,double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_particle_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_m" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (double)((BH::particle const *)arg1)->m();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_name" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (std::string *) &((BH::particle const *)arg1)->name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_stat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle::statistics_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_stat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_stat" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (BH::particle::statistics_type)((BH::particle const *)arg1)->stat();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_pdg_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_pdg_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_pdg_code" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (int)((BH::particle const *)arg1)->pdg_code();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_get_ordered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_get_ordered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_get_ordered" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (int)((BH::particle const *)arg1)->get_ordered();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_get_mass_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_get_mass_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_get_mass_index" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (int)((BH::particle const *)arg1)->get_mass_index();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_set_mass_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_set_mass_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_set_mass_index" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_set_mass_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mass_index(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ordered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ordered" "', argument " "1"" of type '" "BH::particle const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_ordered" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((BH::particle const *)arg1)->ordered(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_particle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_particle" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *particle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__particle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)BH::operator ==((BH::particle const &)*arg1,(BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)BH::operator !=((BH::particle const &)*arg1,(BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)BH::operator <((BH::particle const &)*arg1,(BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "BH::particle const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)BH::operator >((BH::particle const &)*arg1,(BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_particle_ID")) SWIG_fail;
  result = (BH::particle_ID *)new BH::particle_ID();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  short arg2 ;
  short arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_particle_ID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle_ID" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_particle_ID" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (BH::particle_ID *)new BH::particle_ID(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  short arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_particle_ID",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle_ID" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  result = (BH::particle_ID *)new BH::particle_ID(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_particle_ID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (BH::particle_ID *)new BH::particle_ID(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_particle_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (BH::particle_ID *)new BH::particle_ID(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  short arg2 ;
  short arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_particle_ID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle_ID" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_particle_ID" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (BH::particle_ID *)new BH::particle_ID(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  short arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_particle_ID",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_particle_ID" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  result = (BH::particle_ID *)new BH::particle_ID(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_particle_ID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_particle_ID" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (BH::particle_ID *)new BH::particle_ID(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle *arg1 = (BH::particle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_particle_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_particle_ID" "', argument " "1"" of type '" "BH::particle *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle * >(argp1);
  result = (BH::particle_ID *)new BH::particle_ID(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_particle_ID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_particle_ID__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_particle_ID__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_particle_ID__SWIG_8(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_particle_ID__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_particle_ID__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_particle_ID__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_particle_ID__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_particle_ID__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_particle_ID__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_particle_ID'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::particle_ID::particle_ID()\n"
    "    BH::particle_ID::particle_ID(BH::particle &,short,short,bool)\n"
    "    BH::particle_ID::particle_ID(BH::particle &,short,short)\n"
    "    BH::particle_ID::particle_ID(BH::particle &,short)\n"
    "    BH::particle_ID::particle_ID(BH::particle &)\n"
    "    BH::particle_ID::particle_ID(BH::particle *,short,short,bool)\n"
    "    BH::particle_ID::particle_ID(BH::particle *,short,short)\n"
    "    BH::particle_ID::particle_ID(BH::particle *,short)\n"
    "    BH::particle_ID::particle_ID(BH::particle *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_particle_ID_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_name" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (std::string *) &((BH::particle_ID const *)arg1)->name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_type" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (BH::particle *)((BH::particle_ID const *)arg1)->type();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_helicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_helicity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_helicity" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (short)((BH::particle_ID const *)arg1)->helicity();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_flavor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_flavor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_flavor" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (short)((BH::particle_ID const *)arg1)->flavor();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_anti_particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_is_anti_particle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_anti_particle" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (bool)((BH::particle_ID const *)arg1)->is_anti_particle();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_a__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_is_a",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_a" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID_is_a" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID_is_a" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)((BH::particle_ID const *)arg1)->is_a((BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_a__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_is_a",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_a" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID_is_a" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID_is_a" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)((BH::particle_ID const *)arg1)->is_a((BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_a(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_particle_ID_is_a__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_particle_ID_is_a__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'particle_ID_is_a'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::particle_ID::is_a(BH::particle const &) const\n"
    "    BH::particle_ID::is_a(BH::particle_ID const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_not_a__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_is_not_a",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_not_a" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID_is_not_a" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID_is_not_a" "', argument " "2"" of type '" "BH::particle const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle * >(argp2);
  result = (bool)((BH::particle_ID const *)arg1)->is_not_a((BH::particle const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_not_a__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_is_not_a",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_not_a" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID_is_not_a" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID_is_not_a" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)((BH::particle_ID const *)arg1)->is_not_a((BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_not_a(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_particle_ID_is_not_a__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_particle_ID_is_not_a__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'particle_ID_is_not_a'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::particle_ID::is_not_a(BH::particle const &) const\n"
    "    BH::particle_ID::is_not_a(BH::particle_ID const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_particle_ID_is_fermion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_is_fermion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_is_fermion" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (bool)((BH::particle_ID const *)arg1)->is_fermion();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_get_ordered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_get_ordered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_get_ordered" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (int)((BH::particle_ID const *)arg1)->get_ordered();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_ordered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_ordered" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_ID_ordered" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((BH::particle_ID const *)arg1)->ordered(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_mass_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_mass_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_mass_label" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (int)((BH::particle_ID const *)arg1)->mass_label();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_mass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_mass" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (double)((BH::particle_ID const *)arg1)->mass();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_mass2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_mass2" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = (double)((BH::particle_ID const *)arg1)->mass2();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_conjugate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_conjugate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_conjugate" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = ((BH::particle_ID const *)arg1)->conjugate();
  resultobj = SWIG_NewPointerObj((new BH::particle_ID(static_cast< const BH::particle_ID& >(result))), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_helicity_conjugate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID_helicity_conjugate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_helicity_conjugate" "', argument " "1"" of type '" "BH::particle_ID const *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = ((BH::particle_ID const *)arg1)->helicity_conjugate();
  resultobj = SWIG_NewPointerObj((new BH::particle_ID(static_cast< const BH::particle_ID& >(result))), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_set_helicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_set_helicity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_set_helicity" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_ID_set_helicity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_helicity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_set_flavor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_set_flavor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_set_flavor" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_ID_set_flavor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_flavor(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID_set_is_antiparticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID_set_is_antiparticle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID_set_is_antiparticle" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "particle_ID_set_is_antiparticle" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_is_antiparticle(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___eq__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___eq__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___eq__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___eq__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___ne__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___ne__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___ne__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___ne__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___lt__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___lt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___lt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___lt__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___gt__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___gt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___gt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___gt__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___le__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___le__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___le__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___le__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:particle_ID___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___ge__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "particle_ID___ge__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "particle_ID___ge__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH_particle_ID___ge__(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_particle_ID___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:particle_ID___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "particle_ID___str__" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  result = BH_particle_ID___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_particle_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = (BH::particle_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_particle_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_particle_ID" "', argument " "1"" of type '" "BH::particle_ID *""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *particle_ID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__particle_ID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH::operator ==((BH::particle_ID const &)*arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH::operator !=((BH::particle_ID const &)*arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH::operator <((BH::particle_ID const &)*arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (bool)BH::operator >((BH::particle_ID const &)*arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_gluon_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::gluon""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::gluon""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::gluon = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gluon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::gluon), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_quark_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::quark""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::quark""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::quark = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_quark_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::quark), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lepton_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lepton""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lepton""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::lepton = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lepton_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lepton), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_scalar_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::scalar""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::scalar""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::scalar = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_scalar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::scalar), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_photon_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::photon""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::photon""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::photon = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_photon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::photon), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_gluino_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::gluino""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::gluino""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::gluino = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gluino_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::gluino), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_higgs_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::higgs""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::higgs""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::higgs = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_higgs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::higgs), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_gluon_massive_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::gluon_massive""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::gluon_massive""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::gluon_massive = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gluon_massive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::gluon_massive), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_quark_massive_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::quark_massive""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::quark_massive""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::quark_massive = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_quark_massive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::quark_massive), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_gluino_massive_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::gluino_massive""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::gluino_massive""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::gluino_massive = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gluino_massive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::gluino_massive), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_scalar_massive_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::scalar_massive""' of type '""BH::particle""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::scalar_massive""' of type '""BH::particle""'");
    } else {
      BH::particle * temp;
      temp  = reinterpret_cast< BH::particle * >(argp);
      BH::scalar_massive = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_scalar_massive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::scalar_massive), SWIGTYPE_p_BH__particle,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q3p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q3p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q3p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q3p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q3p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q3p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q3m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q3m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q3m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q3m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q3m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q3m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q4p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q4p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q4p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q4p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q4p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q4p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_q4m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::q4m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::q4m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::q4m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_q4m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::q4m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qbp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qbp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qbp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qbp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qbp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qbp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qbm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qbm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qbm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qbm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qbm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qbm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb3p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb3p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb3p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb3p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb3p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb3p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb3m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb3m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb3m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb3m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb3m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb3m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb4p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb4p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb4p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb4p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb4p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb4p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_qb4m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::qb4m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::qb4m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::qb4m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_qb4m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::qb4m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lbp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lbp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lbp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lbp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lbp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lbp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lbm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lbm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lbm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lbm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lbm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lbm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_l2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::l2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::l2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::l2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_l2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::l2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_l2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::l2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::l2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::l2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_l2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::l2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lb2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lb2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lb2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lb2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lb2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lb2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_lb2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::lb2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::lb2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::lb2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_lb2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::lb2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_s0_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::s0""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::s0""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::s0 = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_s0_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::s0), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_yp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::yp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::yp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::yp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_yp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::yp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ym_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::ym""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::ym""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::ym = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ym_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::ym), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gbp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gbp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gbp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gbp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gbp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gbp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gbm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gbm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gbm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gbm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gbm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gbm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_G2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::G2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::G2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::G2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_G2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::G2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_G2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::G2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::G2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::G2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_G2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::G2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gb2p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gb2p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gb2p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gb2p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gb2p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gb2p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gb2m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gb2m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gb2m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gb2m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gb2m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gb2m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_G3p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::G3p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::G3p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::G3p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_G3p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::G3p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_G3m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::G3m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::G3m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::G3m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_G3m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::G3m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gb3p_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gb3p""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gb3p""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gb3p = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gb3p_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gb3p), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Gb3m_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Gb3m""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Gb3m""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Gb3m = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Gb3m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Gb3m), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_gsc_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::gsc""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::gsc""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::gsc = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gsc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::gsc), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_scM_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::scM""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::scM""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::scM = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_scM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::scM), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Qp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Qp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Qp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Qp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Qp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Qp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Qm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Qm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Qm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Qm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Qm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Qm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Qbp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Qbp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Qbp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Qbp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Qbp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Qbp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Qbm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Qbm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Qbm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Qbm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Qbm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Qbm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Lp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Lp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Lp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Lp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Lp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Lm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Lm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Lm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Lm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Lm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Lbp_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Lbp""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Lbp""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Lbp = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lbp_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Lbp), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_Lbm_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Lbm""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::Lbm""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::Lbm = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lbm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::Lbm), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_ph_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::ph""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::ph""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::ph = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::ph), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_phd_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::phd""' of type '""BH::particle_ID""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::phd""' of type '""BH::particle_ID""'");
    } else {
      BH::particle_ID * temp;
      temp  = reinterpret_cast< BH::particle_ID * >(argp);
      BH::phd = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_phd_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::phd), SWIGTYPE_p_BH__particle_ID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_rat_ext_mass_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__mass_param,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::rat_ext_mass""' of type '""BH::mass_param""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::rat_ext_mass""' of type '""BH::mass_param""'");
    } else {
      BH::mass_param * temp;
      temp  = reinterpret_cast< BH::mass_param * >(argp);
      BH::rat_ext_mass = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_rat_ext_mass_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::rat_ext_mass), SWIGTYPE_p_BH__mass_param,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_top_ext_mass_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__mass_param,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::top_ext_mass""' of type '""BH::mass_param""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::top_ext_mass""' of type '""BH::mass_param""'");
    } else {
      BH::mass_param * temp;
      temp  = reinterpret_cast< BH::mass_param * >(argp);
      BH::top_ext_mass = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_top_ext_mass_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::top_ext_mass), SWIGTYPE_p_BH__mass_param,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_top_mass_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__mass_param,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::top_mass""' of type '""BH::mass_param""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::top_mass""' of type '""BH::mass_param""'");
    } else {
      BH::mass_param * temp;
      temp  = reinterpret_cast< BH::mass_param * >(argp);
      BH::top_mass = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_top_mass_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::top_mass), SWIGTYPE_p_BH__mass_param,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_higgs_mass_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__mass_param,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::higgs_mass""' of type '""BH::mass_param""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""BH::higgs_mass""' of type '""BH::mass_param""'");
    } else {
      BH::mass_param * temp;
      temp  = reinterpret_cast< BH::mass_param * >(argp);
      BH::higgs_mass = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_higgs_mass_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&BH::higgs_mass), SWIGTYPE_p_BH__mass_param,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_plabel_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = (BH::plabel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:plabel_ind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__plabel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "plabel_ind" "', argument " "1"" of type '" "BH::plabel const *""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  result = (int)((BH::plabel const *)arg1)->ind();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_plabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::plabel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_plabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_plabel" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_plabel" "', argument " "1"" of type '" "BH::particle_ID const &""'"); 
  }
  arg1 = reinterpret_cast< BH::particle_ID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_plabel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::plabel *)new BH::plabel((BH::particle_ID const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__plabel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_plabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = (BH::plabel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_plabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__plabel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_plabel" "', argument " "1"" of type '" "BH::plabel *""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *plabel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__plabel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___eq____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = 0 ;
  BH::plabel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  arg2 = reinterpret_cast< BH::plabel * >(argp2);
  result = (bool)BH::operator ==((BH::plabel const &)*arg1,(BH::plabel const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = 0 ;
  BH::plabel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  arg2 = reinterpret_cast< BH::plabel * >(argp2);
  result = (bool)BH::operator !=((BH::plabel const &)*arg1,(BH::plabel const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__plabel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__plabel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = 0 ;
  BH::plabel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  arg2 = reinterpret_cast< BH::plabel * >(argp2);
  result = (bool)BH::operator <((BH::plabel const &)*arg1,(BH::plabel const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::plabel *arg1 = 0 ;
  BH::plabel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "BH::plabel const &""'"); 
  }
  arg1 = reinterpret_cast< BH::plabel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__plabel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "BH::plabel const &""'"); 
  }
  arg2 = reinterpret_cast< BH::plabel * >(argp2);
  result = (bool)BH::operator >((BH::plabel const &)*arg1,(BH::plabel const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__plabel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__plabel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Indices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Indices" "', argument " "1"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Indices" "', argument " "1"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp1);
  result = BH::Indices((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setable_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::setable *arg1 = (BH::setable *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:setable_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__setable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setable_set" "', argument " "1"" of type '" "BH::setable *""'"); 
  }
  arg1 = reinterpret_cast< BH::setable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setable_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_setable_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::setable *arg1 = (BH::setable *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:setable_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__setable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setable_set" "', argument " "1"" of type '" "BH::setable *""'"); 
  }
  arg1 = reinterpret_cast< BH::setable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setable_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_setable_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::setable *arg1 = (BH::setable *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:setable_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__setable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setable_set" "', argument " "1"" of type '" "BH::setable *""'"); 
  }
  arg1 = reinterpret_cast< BH::setable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setable_set" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_setable_set__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::setable *arg1 = (BH::setable *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:setable_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__setable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setable_set" "', argument " "1"" of type '" "BH::setable *""'"); 
  }
  arg1 = reinterpret_cast< BH::setable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setable_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "setable_set" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_setable_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__setable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_setable_set__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__setable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_setable_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__setable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_setable_set__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__setable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_setable_set__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'setable_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::setable::set(std::string const &,double)\n"
    "    BH::setable::set(std::string const &,int)\n"
    "    BH::setable::set(std::string const &,bool)\n"
    "    BH::setable::set(std::string const &,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_setable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::setable *arg1 = (BH::setable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_setable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__setable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_setable" "', argument " "1"" of type '" "BH::setable *""'"); 
  }
  arg1 = reinterpret_cast< BH::setable * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *setable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__setable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BH_interface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BH_interface")) SWIG_fail;
  result = (BH::BH_interface *)new BH::BH_interface();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BH_interface, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BH_interface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  BH::BH_interface *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BH_interface",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BH_interface" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BH_interface" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (BH::BH_interface *)new BH::BH_interface((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BH_interface, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BH_interface(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BH_interface__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BH_interface__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BH_interface'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::BH_interface::BH_interface()\n"
    "    BH::BH_interface::BH_interface(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BH_interface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BH_interface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BH_interface" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_new_ampl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::BH_Ampl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_interface_new_ampl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_new_ampl" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_new_ampl" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_new_ampl" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::BH_Ampl *)(arg1)->new_ampl((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_new_tree_ampl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::BH_Ampl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_interface_new_tree_ampl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_new_tree_ampl" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_new_tree_ampl" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_new_tree_ampl" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::BH_Ampl *)(arg1)->new_tree_ampl((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_interface_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_set" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BH_interface_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_interface_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_set" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BH_interface_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_interface_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_set" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BH_interface_set" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_set__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_interface_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_set" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BH_interface_set" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__BH_interface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BH_interface_set__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__BH_interface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BH_interface_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__BH_interface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BH_interface_set__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__BH_interface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BH_interface_set__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BH_interface_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::BH_interface::set(std::string const &,double)\n"
    "    BH::BH_interface::set(std::string const &,int)\n"
    "    BH::BH_interface::set(std::string const &,std::string)\n"
    "    BH::BH_interface::set(std::string const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BH_interface_print_settings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_interface_print_settings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_print_settings" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface_print_settings" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface_print_settings" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  (arg1)->print_settings(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  BH::BHinput *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_interface___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface___call__" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__BHinput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_interface___call__" "', argument " "2"" of type '" "BH::BHinput &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_interface___call__" "', argument " "2"" of type '" "BH::BHinput &""'"); 
  }
  arg2 = reinterpret_cast< BH::BHinput * >(argp2);
  (arg1)->operator ()(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_interface_print_banner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_interface *arg1 = (BH::BH_interface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_interface_print_banner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_interface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_interface_print_banner" "', argument " "1"" of type '" "BH::BH_interface *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_interface * >(argp1);
  (arg1)->print_banner();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BH_interface_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__BH_interface, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BHinput_m_momenta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHinput *arg1 = (BH::BHinput *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BHinput_m_momenta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHinput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHinput_m_momenta_set" "', argument " "1"" of type '" "BH::BHinput *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHinput * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BHinput_m_momenta_set" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  if (arg1) (arg1)->m_momenta = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BHinput_m_momenta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHinput *arg1 = (BH::BHinput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BHinput_m_momenta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHinput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHinput_m_momenta_get" "', argument " "1"" of type '" "BH::BHinput *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHinput * >(argp1);
  result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)& ((arg1)->m_momenta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BHinput_m_mu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHinput *arg1 = (BH::BHinput *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BHinput_m_mu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHinput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHinput_m_mu_set" "', argument " "1"" of type '" "BH::BHinput *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHinput * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BHinput_m_mu_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m_mu = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BHinput_m_mu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHinput *arg1 = (BH::BHinput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BHinput_m_mu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHinput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHinput_m_mu_get" "', argument " "1"" of type '" "BH::BHinput *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHinput * >(argp1);
  result = (double) ((arg1)->m_mu);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BHinput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::BHinput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BHinput",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BHinput" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BHinput" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BHinput" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (BH::BHinput *)new BH::BHinput((std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BHinput, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BHinput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHinput *arg1 = (BH::BHinput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BHinput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHinput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BHinput" "', argument " "1"" of type '" "BH::BHinput *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHinput * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BHinput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__BHinput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BH_Ampl___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  BH::BHinput *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_Ampl___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl___call__" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__BHinput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_Ampl___call__" "', argument " "2"" of type '" "BH::BHinput &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_Ampl___call__" "', argument " "2"" of type '" "BH::BHinput &""'"); 
  }
  arg2 = reinterpret_cast< BH::BHinput * >(argp2);
  result = (double)(arg1)->operator ()(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_single_pole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_single_pole",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_single_pole" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_single_pole();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_double_pole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_double_pole",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_double_pole" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_double_pole();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_finite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_finite",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_finite" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_finite();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_born(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_born",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_born" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_born();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_single_pole_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_single_pole_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_single_pole_HP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_single_pole_HP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_double_pole_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_double_pole_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_double_pole_HP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_double_pole_HP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_finite_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_finite_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_finite_HP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_finite_HP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_born_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_born_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_born_HP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_born_HP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_single_pole_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_single_pole_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_single_pole_VHP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_single_pole_VHP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_double_pole_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_double_pole_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_double_pole_VHP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_double_pole_VHP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_finite_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_finite_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_finite_VHP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_finite_VHP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_born_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_born_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_born_VHP" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (double)(arg1)->get_born_VHP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_set_partial_born(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_set_partial_born",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_set_partial_born" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  (arg1)->set_partial_born();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_Ampl_get_map",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_map" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_Ampl_get_map" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_Ampl_get_map" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BH_Ampl_get_map" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_Ampl_get_map" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp3);
  (arg1)->get_map(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_vals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  std::vector< double *,std::allocator< double * > > *arg2 = 0 ;
  std::vector< double *,std::allocator< double * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BH_Ampl_get_vals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_vals" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_p_std__allocatorT_double_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BH_Ampl_get_vals" "', argument " "2"" of type '" "std::vector< double *,std::allocator< double * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_Ampl_get_vals" "', argument " "2"" of type '" "std::vector< double *,std::allocator< double * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double *,std::allocator< double * > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_p_std__allocatorT_double_p_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BH_Ampl_get_vals" "', argument " "3"" of type '" "std::vector< double *,std::allocator< double * > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BH_Ampl_get_vals" "', argument " "3"" of type '" "std::vector< double *,std::allocator< double * > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double *,std::allocator< double * > > * >(argp3);
  (arg1)->get_vals(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_order_qcd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_order_qcd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_order_qcd" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (int)(arg1)->get_order_qcd();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_get_order_qed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_get_order_qed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_get_order_qed" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  result = (int)(arg1)->get_order_qed();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_getScaleVariationCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BH_Ampl_getScaleVariationCoefficient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_getScaleVariationCoefficient" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BH_Ampl_getScaleVariationCoefficient" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->getScaleVariationCoefficient(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BH_Ampl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BH_Ampl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BH_Ampl" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BH_Ampl_dry_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *arg1 = (BH::BH_Ampl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BH_Ampl_dry_run",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BH_Ampl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BH_Ampl_dry_run" "', argument " "1"" of type '" "BH::BH_Ampl *""'"); 
  }
  arg1 = reinterpret_cast< BH::BH_Ampl * >(argp1);
  (arg1)->dry_run();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BH_Ampl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BH_Ampl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BH_Ampl")) SWIG_fail;
  result = (BH::BH_Ampl *)new BH::BH_Ampl();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BH_Ampl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BH_Ampl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__BH_Ampl, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_spinorR_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorR_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_a1_set" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorR_a1_set" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  if (arg1) (arg1)->a1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorR_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_a1_get" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  result = (std::complex< double > *)& ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorR_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_a2_set" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorR_a2_set" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  if (arg1) (arg1)->a2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorR_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_a2_get" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  result = (std::complex< double > *)& ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_spinorR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > temp1 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::spinor< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_spinorR",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_spinorR" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  temp1 = static_cast< std::complex< double > >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_spinorR" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  result = (BH::spinor< double > *)new BH::spinor< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__spinorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_conjugate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BH::spinor< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorR_conjugate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_conjugate" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  result = (arg1)->conjugate();
  resultobj = SWIG_NewPointerObj((new BH::spinor< double >(static_cast< const BH::spinor< double >& >(result))), SWIGTYPE_p_BH__spinorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_spinorR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_spinorR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_spinorR" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_add_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  BH::spinor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorR_add_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_add_to" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorR_add_to" "', argument " "2"" of type '" "BH::spinor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorR_add_to" "', argument " "2"" of type '" "BH::spinor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< double > * >(argp2);
  (arg1)->add_to((BH::spinor< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_set_to__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  BH::spinor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorR_set_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_set_to" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorR_set_to" "', argument " "2"" of type '" "BH::spinor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorR_set_to" "', argument " "2"" of type '" "BH::spinor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< double > * >(argp2);
  (arg1)->set_to((BH::spinor< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_set_to__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  std::complex< double > temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:spinorR_set_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_set_to" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spinorR_set_to" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "spinorR_set_to" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  temp3 = static_cast< std::complex< double > >(val3);
  arg3 = &temp3;
  (arg1)->set_to((std::complex< double > const &)*arg2,(std::complex< double > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorR_set_to(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__spinorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_spinorR_set_to__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_spinorR_set_to__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'spinorR_set_to'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::spinor< double >::set_to(BH::spinor< double > const &)\n"
    "    BH::spinor< double >::set_to(std::complex< double > const &,std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_spinorR_mult_by(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = (BH::spinor< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorR_mult_by",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorR_mult_by" "', argument " "1"" of type '" "BH::spinor< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spinorR_mult_by" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  (arg1)->mult_by((std::complex< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *spinorR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__spinorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_spinorRHP_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  std::complex< dd_real > *arg2 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRHP_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_a1_set" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_a1_set" "', argument " "2"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  if (arg1) (arg1)->a1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRHP_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_a1_get" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  result = (std::complex< dd_real > *)& ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  std::complex< dd_real > *arg2 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRHP_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_a2_set" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_a2_set" "', argument " "2"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  if (arg1) (arg1)->a2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRHP_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_a2_get" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  result = (std::complex< dd_real > *)& ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_spinorRHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = 0 ;
  std::complex< dd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::spinor< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_spinorRHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_spinorRHP" "', argument " "1"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_spinorRHP" "', argument " "1"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_spinorRHP" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_spinorRHP" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  result = (BH::spinor< dd_real > *)new BH::spinor< dd_real >((std::complex< dd_real > const &)*arg1,(std::complex< dd_real > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__spinorT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_conjugate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BH::spinor< dd_real > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRHP_conjugate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_conjugate" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  result = (arg1)->conjugate();
  resultobj = SWIG_NewPointerObj((new BH::spinor< dd_real >(static_cast< const BH::spinor< dd_real >& >(result))), SWIGTYPE_p_BH__spinorT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_spinorRHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_spinorRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_spinorRHP" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_add_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  BH::spinor< dd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRHP_add_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_add_to" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_add_to" "', argument " "2"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRHP_add_to" "', argument " "2"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< dd_real > * >(argp2);
  (arg1)->add_to((BH::spinor< dd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_set_to__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  BH::spinor< dd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRHP_set_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_set_to" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_set_to" "', argument " "2"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRHP_set_to" "', argument " "2"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< dd_real > * >(argp2);
  (arg1)->set_to((BH::spinor< dd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_set_to__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  std::complex< dd_real > *arg2 = 0 ;
  std::complex< dd_real > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:spinorRHP_set_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_set_to" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_set_to" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRHP_set_to" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "spinorRHP_set_to" "', argument " "3"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRHP_set_to" "', argument " "3"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg3 = reinterpret_cast< std::complex< dd_real > * >(argp3);
  (arg1)->set_to((std::complex< dd_real > const &)*arg2,(std::complex< dd_real > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRHP_set_to(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__spinorT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_spinorRHP_set_to__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_spinorRHP_set_to__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'spinorRHP_set_to'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::spinor< dd_real >::set_to(BH::spinor< dd_real > const &)\n"
    "    BH::spinor< dd_real >::set_to(std::complex< dd_real > const &,std::complex< dd_real > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_spinorRHP_mult_by(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = (BH::spinor< dd_real > *) 0 ;
  std::complex< dd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRHP_mult_by",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRHP_mult_by" "', argument " "1"" of type '" "BH::spinor< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRHP_mult_by" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRHP_mult_by" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  (arg1)->mult_by((std::complex< dd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *spinorRHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__spinorT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_spinorRVHP_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  std::complex< qd_real > *arg2 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRVHP_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_a1_set" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_a1_set" "', argument " "2"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  if (arg1) (arg1)->a1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRVHP_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_a1_get" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  result = (std::complex< qd_real > *)& ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  std::complex< qd_real > *arg2 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRVHP_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_a2_set" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_a2_set" "', argument " "2"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  if (arg1) (arg1)->a2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRVHP_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_a2_get" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  result = (std::complex< qd_real > *)& ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_spinorRVHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = 0 ;
  std::complex< qd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::spinor< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_spinorRVHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_spinorRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_spinorRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_spinorRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_spinorRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  result = (BH::spinor< qd_real > *)new BH::spinor< qd_real >((std::complex< qd_real > const &)*arg1,(std::complex< qd_real > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__spinorT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_conjugate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BH::spinor< qd_real > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:spinorRVHP_conjugate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_conjugate" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  result = (arg1)->conjugate();
  resultobj = SWIG_NewPointerObj((new BH::spinor< qd_real >(static_cast< const BH::spinor< qd_real >& >(result))), SWIGTYPE_p_BH__spinorT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_spinorRVHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_spinorRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_spinorRVHP" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_add_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  BH::spinor< qd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRVHP_add_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_add_to" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_add_to" "', argument " "2"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRVHP_add_to" "', argument " "2"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< qd_real > * >(argp2);
  (arg1)->add_to((BH::spinor< qd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_set_to__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  BH::spinor< qd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRVHP_set_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_set_to" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__spinorT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_set_to" "', argument " "2"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRVHP_set_to" "', argument " "2"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::spinor< qd_real > * >(argp2);
  (arg1)->set_to((BH::spinor< qd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_set_to__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  std::complex< qd_real > *arg2 = 0 ;
  std::complex< qd_real > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:spinorRVHP_set_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_set_to" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_set_to" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRVHP_set_to" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "spinorRVHP_set_to" "', argument " "3"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRVHP_set_to" "', argument " "3"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg3 = reinterpret_cast< std::complex< qd_real > * >(argp3);
  (arg1)->set_to((std::complex< qd_real > const &)*arg2,(std::complex< qd_real > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_set_to(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__spinorT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_spinorRVHP_set_to__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__spinorT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_spinorRVHP_set_to__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'spinorRVHP_set_to'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::spinor< qd_real >::set_to(BH::spinor< qd_real > const &)\n"
    "    BH::spinor< qd_real >::set_to(std::complex< qd_real > const &,std::complex< qd_real > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_spinorRVHP_mult_by(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = (BH::spinor< qd_real > *) 0 ;
  std::complex< qd_real > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spinorRVHP_mult_by",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__spinorT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spinorRVHP_mult_by" "', argument " "1"" of type '" "BH::spinor< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spinorRVHP_mult_by" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spinorRVHP_mult_by" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  (arg1)->mult_by((std::complex< qd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *spinorRVHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__spinorT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdaR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  result = (BH::lambda< double > *)new BH::lambda< double >((BH::momentum< std::complex< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< double > * >(argp1);
  result = (BH::lambda< double > *)new BH::lambda< double >((BH::momentum< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaR__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::spinor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaR" "', argument " "1"" of type '" "BH::spinor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< double > * >(argp1);
  result = (BH::lambda< double > *)new BH::lambda< double >((BH::spinor< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaR__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaR",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LambdaR" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LambdaR" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (BH::lambda< double > *)new BH::lambda< double >((double const &)*arg1,(double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaR__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  std::complex< double > arg2 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaR",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LambdaR" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LambdaR" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  result = (BH::lambda< double > *)new BH::lambda< double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaR(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaR__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaR__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaR__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LambdaR__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LambdaR__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdaR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambda< double >::lambda(BH::momentum< std::complex< double > > const &)\n"
    "    BH::lambda< double >::lambda(BH::momentum< double > const &)\n"
    "    BH::lambda< double >::lambda(BH::spinor< double > const &)\n"
    "    BH::lambda< double >::lambda(double const &,double const &)\n"
    "    BH::lambda< double >::lambda(std::complex< double > const,std::complex< double > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdaR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambda< double > *arg1 = (BH::lambda< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdaR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdaT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdaR" "', argument " "1"" of type '" "BH::lambda< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambda< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdaR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdaT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdaRHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< dd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::momentum< std::complex< dd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::momentum< std::complex< dd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< dd_real > > * >(argp1);
  result = (BH::lambda< dd_real > *)new BH::lambda< dd_real >((BH::momentum< std::complex< dd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< dd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::momentum< dd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::momentum< dd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< dd_real > * >(argp1);
  result = (BH::lambda< dd_real > *)new BH::lambda< dd_real >((BH::momentum< dd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< dd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "BH::spinor< dd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
  result = (BH::lambda< dd_real > *)new BH::lambda< dd_real >((BH::spinor< dd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRHP__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dd_real *arg1 = 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaRHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  arg1 = reinterpret_cast< dd_real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdaRHP" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (BH::lambda< dd_real > *)new BH::lambda< dd_real >((dd_real const &)*arg1,(dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRHP__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > arg1 ;
  std::complex< dd_real > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaRHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "std::complex< dd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "1"" of type '" "std::complex< dd_real > const""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdaRHP" "', argument " "2"" of type '" "std::complex< dd_real > const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRHP" "', argument " "2"" of type '" "std::complex< dd_real > const""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambda< dd_real > *)new BH::lambda< dd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRHP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRHP__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRHP__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdaRHP__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdaRHP__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdaRHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambda< dd_real >::lambda(BH::momentum< std::complex< dd_real > > const &)\n"
    "    BH::lambda< dd_real >::lambda(BH::momentum< dd_real > const &)\n"
    "    BH::lambda< dd_real >::lambda(BH::spinor< dd_real > const &)\n"
    "    BH::lambda< dd_real >::lambda(dd_real const &,dd_real const &)\n"
    "    BH::lambda< dd_real >::lambda(std::complex< dd_real > const,std::complex< dd_real > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdaRHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambda< dd_real > *arg1 = (BH::lambda< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdaRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdaRHP" "', argument " "1"" of type '" "BH::lambda< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambda< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdaRHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdaT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdaRVHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< qd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::momentum< std::complex< qd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::momentum< std::complex< qd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< qd_real > > * >(argp1);
  result = (BH::lambda< qd_real > *)new BH::lambda< qd_real >((BH::momentum< std::complex< qd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRVHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< qd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::momentum< qd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::momentum< qd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< qd_real > * >(argp1);
  result = (BH::lambda< qd_real > *)new BH::lambda< qd_real >((BH::momentum< qd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRVHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::spinor< qd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdaRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "BH::spinor< qd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
  result = (BH::lambda< qd_real > *)new BH::lambda< qd_real >((BH::spinor< qd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRVHP__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qd_real *arg1 = 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaRVHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  arg1 = reinterpret_cast< qd_real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdaRVHP" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (BH::lambda< qd_real > *)new BH::lambda< qd_real >((qd_real const &)*arg1,(qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRVHP__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > arg1 ;
  std::complex< qd_real > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdaRVHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdaRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdaRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambda< qd_real > *)new BH::lambda< qd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdaRVHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRVHP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRVHP__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdaRVHP__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdaRVHP__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdaRVHP__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdaRVHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambda< qd_real >::lambda(BH::momentum< std::complex< qd_real > > const &)\n"
    "    BH::lambda< qd_real >::lambda(BH::momentum< qd_real > const &)\n"
    "    BH::lambda< qd_real >::lambda(BH::spinor< qd_real > const &)\n"
    "    BH::lambda< qd_real >::lambda(qd_real const &,qd_real const &)\n"
    "    BH::lambda< qd_real >::lambda(std::complex< qd_real > const,std::complex< qd_real > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdaRVHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambda< qd_real > *arg1 = (BH::lambda< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdaRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdaRVHP" "', argument " "1"" of type '" "BH::lambda< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambda< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdaRVHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdaT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdatR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  result = (BH::lambdat< double > *)new BH::lambdat< double >((BH::momentum< std::complex< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< double > * >(argp1);
  result = (BH::lambdat< double > *)new BH::lambdat< double >((BH::momentum< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatR__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< BH::spinor< double > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatR",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::spinor< double > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatR" "', argument " "1"" of type '" "BH::spinor< double > const""'");
    } else {
      BH::spinor< double > * temp = reinterpret_cast< BH::spinor< double > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::lambdat< double > *)new BH::lambdat< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatR__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatR",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LambdatR" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LambdatR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (BH::lambdat< double > *)new BH::lambdat< double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatR__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  std::complex< double > arg2 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatR",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LambdatR" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LambdatR" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  result = (BH::lambdat< double > *)new BH::lambdat< double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatR(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatR__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatR__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatR__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LambdatR__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LambdatR__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdatR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambdat< double >::lambdat(BH::momentum< std::complex< double > > const &)\n"
    "    BH::lambdat< double >::lambdat(BH::momentum< double > const &)\n"
    "    BH::lambdat< double >::lambdat(BH::spinor< double > const)\n"
    "    BH::lambdat< double >::lambdat(double const,double const)\n"
    "    BH::lambdat< double >::lambdat(std::complex< double > const,std::complex< double > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdatR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambdat< double > *arg1 = (BH::lambdat< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdatR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdatT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdatR" "', argument " "1"" of type '" "BH::lambdat< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambdat< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdatR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdatT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdatRHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< dd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::momentum< std::complex< dd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::momentum< std::complex< dd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< dd_real > > * >(argp1);
  result = (BH::lambdat< dd_real > *)new BH::lambdat< dd_real >((BH::momentum< std::complex< dd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< dd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::momentum< dd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::momentum< dd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< dd_real > * >(argp1);
  result = (BH::lambdat< dd_real > *)new BH::lambdat< dd_real >((BH::momentum< dd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< BH::spinor< dd_real > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRHP",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::spinor< dd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "BH::spinor< dd_real > const""'");
    } else {
      BH::spinor< dd_real > * temp = reinterpret_cast< BH::spinor< dd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::lambdat< dd_real > *)new BH::lambdat< dd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRHP__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dd_real arg1 ;
  dd_real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatRHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "dd_real const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "dd_real const""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdatRHP" "', argument " "2"" of type '" "dd_real const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "2"" of type '" "dd_real const""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambdat< dd_real > *)new BH::lambdat< dd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRHP__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > arg1 ;
  std::complex< dd_real > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatRHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "std::complex< dd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "1"" of type '" "std::complex< dd_real > const""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdatRHP" "', argument " "2"" of type '" "std::complex< dd_real > const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRHP" "', argument " "2"" of type '" "std::complex< dd_real > const""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambdat< dd_real > *)new BH::lambdat< dd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRHP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRHP__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRHP__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdatRHP__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdatRHP__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdatRHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambdat< dd_real >::lambdat(BH::momentum< std::complex< dd_real > > const &)\n"
    "    BH::lambdat< dd_real >::lambdat(BH::momentum< dd_real > const &)\n"
    "    BH::lambdat< dd_real >::lambdat(BH::spinor< dd_real > const)\n"
    "    BH::lambdat< dd_real >::lambdat(dd_real const,dd_real const)\n"
    "    BH::lambdat< dd_real >::lambdat(std::complex< dd_real > const,std::complex< dd_real > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdatRHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambdat< dd_real > *arg1 = (BH::lambdat< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdatRHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdatRHP" "', argument " "1"" of type '" "BH::lambdat< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambdat< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdatRHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdatT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LambdatRVHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< qd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::momentum< std::complex< qd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::momentum< std::complex< qd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< qd_real > > * >(argp1);
  result = (BH::lambdat< qd_real > *)new BH::lambdat< qd_real >((BH::momentum< std::complex< qd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRVHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< qd_real > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::momentum< qd_real > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::momentum< qd_real > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< qd_real > * >(argp1);
  result = (BH::lambdat< qd_real > *)new BH::lambdat< qd_real >((BH::momentum< qd_real > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRVHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< BH::spinor< qd_real > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LambdatRVHP",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__spinorT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::spinor< qd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "BH::spinor< qd_real > const""'");
    } else {
      BH::spinor< qd_real > * temp = reinterpret_cast< BH::spinor< qd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::lambdat< qd_real > *)new BH::lambdat< qd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRVHP__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qd_real arg1 ;
  qd_real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatRVHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "qd_real const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "qd_real const""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdatRVHP" "', argument " "2"" of type '" "qd_real const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "2"" of type '" "qd_real const""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambdat< qd_real > *)new BH::lambdat< qd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRVHP__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > arg1 ;
  std::complex< qd_real > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LambdatRVHP",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "1"" of type '" "std::complex< qd_real > const""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LambdatRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LambdatRVHP" "', argument " "2"" of type '" "std::complex< qd_real > const""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::lambdat< qd_real > *)new BH::lambdat< qd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LambdatRVHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRVHP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRVHP__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__spinorT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LambdatRVHP__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdatRVHP__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LambdatRVHP__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LambdatRVHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::lambdat< qd_real >::lambdat(BH::momentum< std::complex< qd_real > > const &)\n"
    "    BH::lambdat< qd_real >::lambdat(BH::momentum< qd_real > const &)\n"
    "    BH::lambdat< qd_real >::lambdat(BH::spinor< qd_real > const)\n"
    "    BH::lambdat< qd_real >::lambdat(qd_real const,qd_real const)\n"
    "    BH::lambdat< qd_real >::lambdat(std::complex< qd_real > const,std::complex< qd_real > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LambdatRVHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambdat< qd_real > *arg1 = (BH::lambdat< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LambdatRVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LambdatRVHP" "', argument " "1"" of type '" "BH::lambdat< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::lambdat< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LambdatRVHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__lambdatT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_momentum_configuration_base_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration_base *arg1 = (BH::momentum_configuration_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:momentum_configuration_base_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configuration_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "momentum_configuration_base_get_ID" "', argument " "1"" of type '" "BH::momentum_configuration_base const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration_base * >(argp1);
  result = (long)((BH::momentum_configuration_base const *)arg1)->get_ID();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_momentum_configuration_base_renew_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration_base *arg1 = (BH::momentum_configuration_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:momentum_configuration_base_renew_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configuration_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "momentum_configuration_base_renew_ID" "', argument " "1"" of type '" "BH::momentum_configuration_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration_base * >(argp1);
  (arg1)->renew_ID();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_momentum_configuration_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_momentum_configuration_base")) SWIG_fail;
  result = (BH::momentum_configuration_base *)new BH::momentum_configuration_base();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configuration_base, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_momentum_configuration_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration_base *arg1 = (BH::momentum_configuration_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_momentum_configuration_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configuration_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_momentum_configuration_base" "', argument " "1"" of type '" "BH::momentum_configuration_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *momentum_configuration_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__momentum_configuration_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GenKey__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GenKey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = BH::GenKey((char const *)arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GenKey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = BH::GenKey((char const *)arg1,arg2,arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GenKey",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenKey" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = BH::GenKey((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenKey" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GenKey" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = BH::GenKey((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenKey" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GenKey" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GenKey" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = BH::GenKey((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenKey" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GenKey" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GenKey" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GenKey" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = BH::GenKey((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GenKey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::GenKey((char const *)arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GenKey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GenKey" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = BH::GenKey((char const *)arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GenKey",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GenKey" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = BH::GenKey((char const *)arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GenKey",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = BH::GenKey((char const *)arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenKey" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg5 = ptr;
  }
  result = BH::GenKey((char const *)arg1,arg2,arg3,arg4,(std::vector< int,std::allocator< int > > const &)*arg5);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg5 = ptr;
  }
  result = BH::GenKey((char const *)arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  std::vector< int,std::allocator< int > > *arg6 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GenKey" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg6 = ptr;
  }
  result = BH::GenKey((char const *)arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5,(std::vector< int,std::allocator< int > > const &)*arg6);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  std::vector< int,std::allocator< int > > *arg6 = 0 ;
  std::vector< int,std::allocator< int > > *arg7 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:GenKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenKey" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "5"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GenKey" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res7 = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GenKey" "', argument " "7"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GenKey" "', argument " "7"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg7 = ptr;
  }
  result = BH::GenKey((char const *)arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5,(std::vector< int,std::allocator< int > > const &)*arg6,(std::vector< int,std::allocator< int > > const &)*arg7);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKey(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GenKey__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenKey__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GenKey__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GenKey__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GenKey__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GenKey__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GenKey__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GenKey__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<int,std::allocator< int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_GenKey__SWIG_10(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<int,std::allocator< int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_GenKey__SWIG_11(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GenKey__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<int,std::allocator< int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<int,std::allocator< int > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_GenKey__SWIG_12(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_GenKey__SWIG_5(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<int,std::allocator< int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<int,std::allocator< int > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<int,std::allocator< int > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_GenKey__SWIG_13(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GenKey'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::GenKey(char const *,int)\n"
    "    BH::GenKey(char const *,int,int)\n"
    "    BH::GenKey(char const *,int,int,int)\n"
    "    BH::GenKey(char const *,int,int,int,int)\n"
    "    BH::GenKey(char const *,int,int,int,int,int)\n"
    "    BH::GenKey(char const *,int,int,int,int,int,int)\n"
    "    BH::GenKey(char const *,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,int,int,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,int,int,int,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,int,int,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,int,int,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::GenKey(char const *,int,int,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mom_conf_reader_base_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader_base *arg1 = (BH::mom_conf_reader_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mom_conf_reader_base_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_reader_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mom_conf_reader_base_next" "', argument " "1"" of type '" "BH::mom_conf_reader_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader_base * >(argp1);
  result = (bool)(arg1)->next();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mom_conf_reader_base_go_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader_base *arg1 = (BH::mom_conf_reader_base *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mom_conf_reader_base_go_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_reader_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mom_conf_reader_base_go_to" "', argument " "1"" of type '" "BH::mom_conf_reader_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mom_conf_reader_base_go_to" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (bool)(arg1)->go_to(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mom_conf_reader_base_go_to_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader_base *arg1 = (BH::mom_conf_reader_base *) 0 ;
  std::ios::pos_type arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mom_conf_reader_base_go_to_pos",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_reader_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mom_conf_reader_base_go_to_pos" "', argument " "1"" of type '" "BH::mom_conf_reader_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader_base * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ios__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mom_conf_reader_base_go_to_pos" "', argument " "2"" of type '" "std::ios::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mom_conf_reader_base_go_to_pos" "', argument " "2"" of type '" "std::ios::pos_type""'");
    } else {
      std::ios::pos_type * temp = reinterpret_cast< std::ios::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mom_conf_reader_base_go_to_pos" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (bool)(arg1)->go_to_pos(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mom_conf_reader_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader_base *arg1 = (BH::mom_conf_reader_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mom_conf_reader_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_reader_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mom_conf_reader_base" "', argument " "1"" of type '" "BH::mom_conf_reader_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mom_conf_reader_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__mom_conf_reader_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mass_param__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_mass_param")) SWIG_fail;
  result = (BH::mass_param *)new BH::mass_param();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  C arg1 ;
  CHP arg2 ;
  CVHP arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_mass_param",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_C,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mass_param" "', argument " "1"" of type '" "C const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param" "', argument " "1"" of type '" "C const""'");
    } else {
      C * temp = reinterpret_cast< C * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mass_param" "', argument " "2"" of type '" "CHP const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param" "', argument " "2"" of type '" "CHP const""'");
    } else {
      CHP * temp = reinterpret_cast< CHP * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mass_param" "', argument " "3"" of type '" "CVHP const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param" "', argument " "3"" of type '" "CVHP const""'");
    } else {
      CVHP * temp = reinterpret_cast< CVHP * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::mass_param *)new BH::mass_param(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mass_param",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__mass_param,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mass_param" "', argument " "1"" of type '" "BH::mass_param const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param" "', argument " "1"" of type '" "BH::mass_param const &""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  result = (BH::mass_param *)new BH::mass_param((BH::mass_param const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_mass_param__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mass_param__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_C, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_mass_param__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mass_param'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::mass_param()\n"
    "    BH::mass_param::mass_param(C const,CHP const,CVHP const)\n"
    "    BH::mass_param::mass_param(BH::mass_param const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mass_param",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mass_param" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "CVHP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "CVHP const &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  (arg1)->set_dynamic((CVHP const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "CHP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "CHP const &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  (arg1)->set_dynamic((CHP const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "C const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic" "', argument " "2"" of type '" "C const &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  (arg1)->set_dynamic((C const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_set_dynamic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::set_dynamic(CVHP const &)\n"
    "    BH::mass_param::set_dynamic(CHP const &)\n"
    "    BH::mass_param::set_dynamic(C const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "CVHP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "CVHP const &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  (arg1)->set_dynamic2((CVHP const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "CHP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "CHP const &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  (arg1)->set_dynamic2((CHP const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "C const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_set_dynamic2" "', argument " "2"" of type '" "C const &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  (arg1)->set_dynamic2((C const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_dynamic2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic2__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_set_dynamic2__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_set_dynamic2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::set_dynamic2(CVHP const &)\n"
    "    BH::mass_param::set_dynamic2(CHP const &)\n"
    "    BH::mass_param::set_dynamic2(C const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "C &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "C &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "CHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "CHP &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_orig_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::orig_mass(C &) const\n"
    "    BH::mass_param::orig_mass(CHP &) const\n"
    "    BH::mass_param::orig_mass(CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "C &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "C &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "CHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "CHP &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_orig_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_orig_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_orig_mass2" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  ((BH::mass_param const *)arg1)->orig_mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_orig_mass2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass2__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_orig_mass2__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_orig_mass2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::orig_mass2(C &) const\n"
    "    BH::mass_param::orig_mass2(CHP &) const\n"
    "    BH::mass_param::orig_mass2(CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass" "', argument " "2"" of type '" "C &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass" "', argument " "2"" of type '" "C &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  ((BH::mass_param const *)arg1)->mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass" "', argument " "2"" of type '" "CHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass" "', argument " "2"" of type '" "CHP &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  ((BH::mass_param const *)arg1)->mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  ((BH::mass_param const *)arg1)->mass(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::mass(C &) const\n"
    "    BH::mass_param::mass(CHP &) const\n"
    "    BH::mass_param::mass(CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_mass2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  C *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass2" "', argument " "2"" of type '" "C &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass2" "', argument " "2"" of type '" "C &""'"); 
  }
  arg2 = reinterpret_cast< C * >(argp2);
  ((BH::mass_param const *)arg1)->mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass2" "', argument " "2"" of type '" "CHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass2" "', argument " "2"" of type '" "CHP &""'"); 
  }
  arg2 = reinterpret_cast< CHP * >(argp2);
  ((BH::mass_param const *)arg1)->mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  CVHP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_mass2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_mass2" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_mass2" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_mass2" "', argument " "2"" of type '" "CVHP &""'"); 
  }
  arg2 = reinterpret_cast< CVHP * >(argp2);
  ((BH::mass_param const *)arg1)->mass2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_mass2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_C, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass2__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CVHP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mass_param_mass2__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_mass2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param::mass2(C &) const\n"
    "    BH::mass_param::mass2(CHP &) const\n"
    "    BH::mass_param::mass2(CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mass_param_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_reset" "', argument " "1"" of type '" "BH::mass_param *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = (BH::mass_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mass_param_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_label" "', argument " "1"" of type '" "BH::mass_param const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  result = (int)((BH::mass_param const *)arg1)->label();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_set_next_mass_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mass_param_set_next_mass_label",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mass_param_set_next_mass_label" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)BH::mass_param::set_next_mass_label(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_get_next_mass_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mass_param_get_next_mass_label")) SWIG_fail;
  result = (int)BH::mass_param::get_next_mass_label();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mass_param_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__mass_param, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mass_param_library__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_mass_param_library")) SWIG_fail;
  result = (BH::mass_param_library *)new BH::mass_param_library();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param_library, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param_library__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param_library *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mass_param_library",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__mass_param,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mass_param_library" "', argument " "1"" of type '" "BH::mass_param &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param_library" "', argument " "1"" of type '" "BH::mass_param &""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param * >(argp1);
  result = (BH::mass_param_library *)new BH::mass_param_library(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param_library, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param_library(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_mass_param_library__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mass_param_library__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mass_param_library'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::mass_param_library()\n"
    "    BH::mass_param_library::mass_param_library(BH::mass_param &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_mass_param_library(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mass_param_library",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mass_param_library" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "CVHP const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "CVHP const &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  (arg1)->set_dynamic(arg2,(CVHP const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "CHP const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "CHP const &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  (arg1)->set_dynamic(arg2,(CHP const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "C const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic" "', argument " "3"" of type '" "C const &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  (arg1)->set_dynamic(arg2,(C const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_set_dynamic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::set_dynamic(int,CVHP const &)\n"
    "    BH::mass_param_library::set_dynamic(int,CHP const &)\n"
    "    BH::mass_param_library::set_dynamic(int,C const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "CVHP const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "CVHP const &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  (arg1)->set_dynamic2(arg2,(CVHP const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "CHP const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "CHP const &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  (arg1)->set_dynamic2(arg2,(CHP const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_set_dynamic2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_set_dynamic2" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_set_dynamic2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "C const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_set_dynamic2" "', argument " "3"" of type '" "C const &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  (arg1)->set_dynamic2(arg2,(C const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_set_dynamic2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic2__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic2__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_set_dynamic2__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_set_dynamic2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::set_dynamic2(int,CVHP const &)\n"
    "    BH::mass_param_library::set_dynamic2(int,CHP const &)\n"
    "    BH::mass_param_library::set_dynamic2(int,C const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "C &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "C &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "CHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "CHP &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_orig_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::orig_mass(int,C &) const\n"
    "    BH::mass_param_library::orig_mass(int,CHP &) const\n"
    "    BH::mass_param_library::orig_mass(int,CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "C &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "C &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "CHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "CHP &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_orig_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_orig_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_orig_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_orig_mass2" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->orig_mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_orig_mass2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass2__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass2__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_orig_mass2__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_orig_mass2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::orig_mass2(int,C &) const\n"
    "    BH::mass_param_library::orig_mass2(int,CHP &) const\n"
    "    BH::mass_param_library::orig_mass2(int,CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "C &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "C &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "CHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "CHP &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::mass(int,C &) const\n"
    "    BH::mass_param_library::mass(int,CHP &) const\n"
    "    BH::mass_param_library::mass(int,CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  C *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_C,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "C &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "C &""'"); 
  }
  arg3 = reinterpret_cast< C * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "CHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "CHP &""'"); 
  }
  arg3 = reinterpret_cast< CHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  CVHP *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_library_mass2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_mass2" "', argument " "1"" of type '" "BH::mass_param_library const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_mass2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CVHP,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_mass2" "', argument " "3"" of type '" "CVHP &""'"); 
  }
  arg3 = reinterpret_cast< CVHP * >(argp3);
  ((BH::mass_param_library const *)arg1)->mass2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_mass2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_C, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass2__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass2__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__mass_param_library, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CVHP, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mass_param_library_mass2__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mass_param_library_mass2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_library::mass2(int,C &) const\n"
    "    BH::mass_param_library::mass2(int,CHP &) const\n"
    "    BH::mass_param_library::mass2(int,CVHP &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mass_param_library_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  BH::mass_param *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_library_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_add" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__mass_param,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mass_param_library_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mass_param_library_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  arg2 = reinterpret_cast< BH::mass_param * >(argp2);
  (arg1)->add(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_library_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_p" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::mass_param *) &(arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mass_param_library_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_size" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  result = (arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_library_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_library *arg1 = (BH::mass_param_library *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_library_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_library_reset" "', argument " "1"" of type '" "BH::mass_param_library *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_library * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_library_reset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->reset(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mass_param_library_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__mass_param_library, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mass_param_coll__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param_coll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mass_param_coll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mass_param_coll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param_coll *)new BH::mass_param_coll(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param_coll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param_coll__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_coll *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param_coll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mass_param_coll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__mass_param_coll,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mass_param_coll" "', argument " "1"" of type '" "BH::mass_param_coll const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param_coll" "', argument " "1"" of type '" "BH::mass_param_coll const &""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_coll * >(argp1);
  result = (BH::mass_param_coll *)new BH::mass_param_coll((BH::mass_param_coll const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param_coll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param_coll__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param_coll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mass_param_coll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mass_param_coll" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mass_param_coll" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::mass_param_coll *)new BH::mass_param_coll((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param_coll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mass_param_coll(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__mass_param_coll, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mass_param_coll__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mass_param_coll__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_mass_param_coll__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mass_param_coll'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::mass_param_coll::mass_param_coll(int)\n"
    "    BH::mass_param_coll::mass_param_coll(BH::mass_param_coll const &)\n"
    "    BH::mass_param_coll::mass_param_coll(BH::process const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_mass_param_coll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_coll *arg1 = (BH::mass_param_coll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mass_param_coll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_coll, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mass_param_coll" "', argument " "1"" of type '" "BH::mass_param_coll *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_coll * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_coll_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_coll *arg1 = (BH::mass_param_coll *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mass_param_coll_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_coll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_coll_p" "', argument " "1"" of type '" "BH::mass_param_coll const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_coll * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_coll_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::mass_param_coll const *)arg1)->p(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_coll_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_coll *arg1 = (BH::mass_param_coll *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mass_param_coll_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_coll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_coll_set" "', argument " "1"" of type '" "BH::mass_param_coll *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_coll * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mass_param_coll_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mass_param_coll_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mass_param_coll_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mass_param_coll *arg1 = (BH::mass_param_coll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mass_param_coll_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mass_param_coll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mass_param_coll_size" "', argument " "1"" of type '" "BH::mass_param_coll const *""'"); 
  }
  arg1 = reinterpret_cast< BH::mass_param_coll * >(argp1);
  result = (int)((BH::mass_param_coll const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mass_param_coll_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__mass_param_coll, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_eval_param_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_eval_param_state",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_eval_param_state" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::eval_param_state *)new BH::eval_param_state(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_eval_param_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_eval_param_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_eval_param_state" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_renew_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:eval_param_state_renew_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_renew_ID" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  (arg1)->renew_ID();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_set_leg_EPS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  int arg2 ;
  BH::eval_param_state *arg3 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:eval_param_state_set_leg_EPS",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_set_leg_EPS" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eval_param_state_set_leg_EPS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "eval_param_state_set_leg_EPS" "', argument " "3"" of type '" "BH::eval_param_state *""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param_state * >(argp3);
  (arg1)->set_leg_EPS(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_get_leg_EPS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:eval_param_state_get_leg_EPS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_get_leg_EPS" "', argument " "1"" of type '" "BH::eval_param_state const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "eval_param_state_get_leg_EPS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::eval_param_state *)((BH::eval_param_state const *)arg1)->get_leg_EPS(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:eval_param_state_get_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_get_state" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  result = (unsigned short)(arg1)->get_state();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_toggle_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:eval_param_state_toggle_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_toggle_state" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  (arg1)->toggle_state();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_get_full_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:eval_param_state_get_full_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_get_full_state" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  result = (unsigned long)(arg1)->get_full_state();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_is_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  BH::eval_param_state *arg2 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:eval_param_state_is_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_is_match" "', argument " "1"" of type '" "BH::eval_param_state *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eval_param_state_is_match" "', argument " "2"" of type '" "BH::eval_param_state *""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param_state * >(argp2);
  result = (bool)(arg1)->is_match(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eval_param_state_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param_state *arg1 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:eval_param_state_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eval_param_state_get_ID" "', argument " "1"" of type '" "BH::eval_param_state const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param_state * >(argp1);
  result = (unsigned long)((BH::eval_param_state const *)arg1)->get_ID();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *eval_param_state_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__eval_param_state, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ep" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::eval_param< double > *)new BH::eval_param< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::Cmom< double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ep" "', argument " "1"" of type '" "std::vector< BH::Cmom< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ep" "', argument " "1"" of type '" "std::vector< BH::Cmom< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::Cmom< double > > * >(argp1);
  result = (BH::eval_param< double > *)new BH::eval_param< double >((std::vector< BH::Cmom< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ep__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ep" "', argument " "1"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ep" "', argument " "1"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ep" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ep" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  result = (BH::eval_param< double > *)new BH::eval_param< double >(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ep__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ep" "', argument " "1"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ep" "', argument " "1"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ep" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ep" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::eval_param< double > *)new BH::eval_param< double >(*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ep__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ep__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ep__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ep__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::eval_param(int)\n"
    "    BH::eval_param< double >::eval_param(std::vector< BH::Cmom< double > > const &)\n"
    "    BH::eval_param< double >::eval_param(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > &)\n"
    "    BH::eval_param< double >::eval_param(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ep" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_update",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_update" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ep_update" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ep_update" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ep_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ep_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->update(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_is_state_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  BH::eval_param_state *arg2 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_is_state_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_is_state_match" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ep_is_state_match" "', argument " "2"" of type '" "BH::eval_param_state *""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param_state * >(argp2);
  result = (bool)(arg1)->is_state_match(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_get_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_get_state" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (BH::eval_param_state *)(arg1)->get_state();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_get_leg_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_get_leg_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_get_leg_state" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_get_leg_state" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::eval_param_state *)((BH::eval_param< double > const *)arg1)->get_leg_state(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_changed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_changed" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  (arg1)->changed();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_get_ID" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (unsigned long)((BH::eval_param< double > const *)arg1)->get_ID();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_renew_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_renew_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_renew_ID" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  (arg1)->renew_ID();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_p" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< double > *)((BH::eval_param< double > const *)arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_cmom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_cmom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_cmom" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_cmom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< double > *) &((BH::eval_param< double > const *)arg1)->cmom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::momentum< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_mom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_mom" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_mom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::momentum< std::complex< double > > *) &((BH::eval_param< double > const *)arg1)->mom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_size" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (int)((BH::eval_param< double > const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< double > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_begin" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (BH::Cmom< double > **)((BH::eval_param< double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< double > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_back" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (BH::Cmom< double > **)((BH::eval_param< double > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_ref" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  result = (BH::Cmom< double > *)((BH::eval_param< double > const *)arg1)->ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  BH::Cmom< double > *arg3 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_set" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ep_set" "', argument " "3"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  (arg1)->set(arg2,(BH::Cmom< double > const *)arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  BH::Cmom< double > *arg3 = (BH::Cmom< double > *) 0 ;
  BH::eval_param_state *arg4 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ep_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_set" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ep_set" "', argument " "3"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ep_set" "', argument " "4"" of type '" "BH::eval_param_state *""'"); 
  }
  arg4 = reinterpret_cast< BH::eval_param_state * >(argp4);
  (arg1)->set(arg2,(BH::Cmom< double > const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ep_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__eval_param_state, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ep_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::set(int,BH::Cmom< double > const *)\n"
    "    BH::eval_param< double >::set(int,BH::Cmom< double > const *,BH::eval_param_state *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_set_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  BH::Cmom< double > *arg2 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_set_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_set_ref" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ep_set_ref" "', argument " "2"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  (arg1)->set_ref((BH::Cmom< double > const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_get_default_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ep_get_default_ref")) SWIG_fail;
  result = (BH::Cmom< double > *) &BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR get_default_ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_spa",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spa" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< double > const *)arg1)->spa(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_spb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spb" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< double > const *)arg1)->spb(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spab__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ep_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spab" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< double > const *)arg1)->spab(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spba__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ep_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spba" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< double > const *)arg1)->spba(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spaa__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ep_spaa",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spaa" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< double > const *)arg1)->spaa(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spbb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ep_spbb",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spbb" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< double > const *)arg1)->spbb(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spab__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ep_spab",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spab" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spab" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ep_spab" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< double > const *)arg1)->spab(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spab(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ep_spab__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ep_spab__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_spab'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::spab(int const,int const,int const) const\n"
    "    BH::eval_param< double >::spab(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_spba__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ep_spba",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spba" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spba" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ep_spba" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< double > const *)arg1)->spba(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spba(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ep_spba__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ep_spba__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_spba'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::spba(int const,int const,int const) const\n"
    "    BH::eval_param< double >::spba(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_spaa__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ep_spaa",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spaa" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ep_spaa" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ep_spaa" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< double > const *)arg1)->spaa(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spaa(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ep_spaa__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_ep_spaa__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_spaa'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::spaa(int const,int const,int const,int const) const\n"
    "    BH::eval_param< double >::spaa(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_spbb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ep_spbb",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_spbb" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ep_spbb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ep_spbb" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< double > const *)arg1)->spbb(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_spbb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ep_spbb__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_ep_spbb__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_spbb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::spbb(int const,int const,int const,int const) const\n"
    "    BH::eval_param< double >::spbb(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_s__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_s" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< double > const *)arg1)->s(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_s__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ep_s",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_s" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< double > const *)arg1)->s(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_s__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ep_s",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_s" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< double > const *)arg1)->s(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_s__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ep_s",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_s" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ep_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ep_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ep_s" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< double > const *)arg1)->s(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_s(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ep_s__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ep_s__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ep_s__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ep_s__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ep_s'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< double >::s(int const,int const) const\n"
    "    BH::eval_param< double >::s(int const,int const,int const) const\n"
    "    BH::eval_param< double >::s(int const,int const,int const,int const) const\n"
    "    BH::eval_param< double >::s(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ep_sp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ep_sp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_sp" "', argument " "1"" of type '" "BH::eval_param< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_sp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ep_sp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< double > const *)arg1)->sp(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_modify_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_modify_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_modify_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR modify_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_get_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_get_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_get_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR get_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_orig_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_orig_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_orig_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR orig_mass(arg1);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_orig_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_orig_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_orig_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR orig_mass2(arg1);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR mass(arg1);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ep_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR mass2(arg1);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_set_dynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< double > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_set_dynamic",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_set_dynamic" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_set_dynamic" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic(arg1,(std::complex< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_set_dynamic2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< double > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ep_set_dynamic2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_set_dynamic2" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic2(arg1,(std::complex< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_nbr_masses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ep_nbr_masses")) SWIG_fail;
  result = BH::eval_param< double >::SWIGTEMPLATEDISAMBIGUATOR nbr_masses();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ep_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< double > *arg1 = (BH::eval_param< double > *) 0 ;
  BH::mass_param *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ep_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_add" "', argument " "1"" of type '" "BH::eval_param< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__mass_param,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ep_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ep_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  arg2 = reinterpret_cast< BH::mass_param * >(argp2);
  (arg1)->add(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__eval_paramT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_epdd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_epdd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_epdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::eval_param< dd_real > *)new BH::eval_param< dd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epdd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::Cmom< dd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_epdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epdd" "', argument " "1"" of type '" "std::vector< BH::Cmom< dd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epdd" "', argument " "1"" of type '" "std::vector< BH::Cmom< dd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::Cmom< dd_real > > * >(argp1);
  result = (BH::eval_param< dd_real > *)new BH::eval_param< dd_real >((std::vector< BH::Cmom< dd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epdd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< dd_real > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_epdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epdd" "', argument " "1"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epdd" "', argument " "1"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_epdd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epdd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  result = (BH::eval_param< dd_real > *)new BH::eval_param< dd_real >(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epdd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< dd_real > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_epdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epdd" "', argument " "1"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epdd" "', argument " "1"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_epdd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epdd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::eval_param< dd_real > *)new BH::eval_param< dd_real >(*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epdd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_epdd__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_epdd__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_epdd__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_epdd__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_epdd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::eval_param(int)\n"
    "    BH::eval_param< dd_real >::eval_param(std::vector< BH::Cmom< dd_real > > const &)\n"
    "    BH::eval_param< dd_real >::eval_param(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > &)\n"
    "    BH::eval_param< dd_real >::eval_param(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_epdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_epdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_epdd" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_update",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_update" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_update" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epdd_update" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epdd_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epdd_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->update(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_is_state_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  BH::eval_param_state *arg2 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_is_state_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_is_state_match" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_is_state_match" "', argument " "2"" of type '" "BH::eval_param_state *""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param_state * >(argp2);
  result = (bool)(arg1)->is_state_match(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_get_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_get_state" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (BH::eval_param_state *)(arg1)->get_state();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_get_leg_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_get_leg_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_get_leg_state" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_get_leg_state" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::eval_param_state *)((BH::eval_param< dd_real > const *)arg1)->get_leg_state(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_changed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_changed" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  (arg1)->changed();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_get_ID" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (unsigned long)((BH::eval_param< dd_real > const *)arg1)->get_ID();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_renew_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_renew_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_renew_ID" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  (arg1)->renew_ID();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_p" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< dd_real > *)((BH::eval_param< dd_real > const *)arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_cmom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_cmom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_cmom" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_cmom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< dd_real > *) &((BH::eval_param< dd_real > const *)arg1)->cmom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::momentum< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_mom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_mom" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_mom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::momentum< std::complex< dd_real > > *) &((BH::eval_param< dd_real > const *)arg1)->mom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentumT_std__complexT_dd_real_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_size" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (int)((BH::eval_param< dd_real > const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< dd_real > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_begin" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (BH::Cmom< dd_real > **)((BH::eval_param< dd_real > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< dd_real > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_back" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (BH::Cmom< dd_real > **)((BH::eval_param< dd_real > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_ref" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  result = (BH::Cmom< dd_real > *)((BH::eval_param< dd_real > const *)arg1)->ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  BH::Cmom< dd_real > *arg3 = (BH::Cmom< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_set" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epdd_set" "', argument " "3"" of type '" "BH::Cmom< dd_real > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< dd_real > * >(argp3);
  (arg1)->set(arg2,(BH::Cmom< dd_real > const *)arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  BH::Cmom< dd_real > *arg3 = (BH::Cmom< dd_real > *) 0 ;
  BH::eval_param_state *arg4 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epdd_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_set" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epdd_set" "', argument " "3"" of type '" "BH::Cmom< dd_real > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< dd_real > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "epdd_set" "', argument " "4"" of type '" "BH::eval_param_state *""'"); 
  }
  arg4 = reinterpret_cast< BH::eval_param_state * >(argp4);
  (arg1)->set(arg2,(BH::Cmom< dd_real > const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_epdd_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__eval_param_state, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_epdd_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::set(int,BH::Cmom< dd_real > const *)\n"
    "    BH::eval_param< dd_real >::set(int,BH::Cmom< dd_real > const *,BH::eval_param_state *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_set_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  BH::Cmom< dd_real > *arg2 = (BH::Cmom< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_set_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_set_ref" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_set_ref" "', argument " "2"" of type '" "BH::Cmom< dd_real > const *""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< dd_real > * >(argp2);
  (arg1)->set_ref((BH::Cmom< dd_real > const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_get_default_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":epdd_get_default_ref")) SWIG_fail;
  result = (BH::Cmom< dd_real > *) &BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR get_default_ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_spa",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spa" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< dd_real > const *)arg1)->spa(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_spb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spb" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< dd_real > const *)arg1)->spb(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spab__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epdd_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spab" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< dd_real > const *)arg1)->spab(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spba__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epdd_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spba" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< dd_real > const *)arg1)->spba(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spaa__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epdd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spaa" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< dd_real > const *)arg1)->spaa(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spbb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epdd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spbb" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< dd_real > const *)arg1)->spbb(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spab__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epdd_spab",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spab" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spab" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epdd_spab" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< dd_real > const *)arg1)->spab(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spab(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epdd_spab__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epdd_spab__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_spab'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::spab(int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::spab(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_spba__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epdd_spba",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spba" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spba" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epdd_spba" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< dd_real > const *)arg1)->spba(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spba(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epdd_spba__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epdd_spba__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_spba'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::spba(int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::spba(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_spaa__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:epdd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spaa" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epdd_spaa" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "epdd_spaa" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< dd_real > const *)arg1)->spaa(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spaa(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epdd_spaa__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_epdd_spaa__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_spaa'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::spaa(int const,int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::spaa(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_spbb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:epdd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_spbb" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epdd_spbb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "epdd_spbb" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< dd_real > const *)arg1)->spbb(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_spbb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epdd_spbb__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_epdd_spbb__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_spbb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::spbb(int const,int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::spbb(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_s__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_s" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< dd_real > const *)arg1)->s(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_s__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epdd_s",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_s" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< dd_real > const *)arg1)->s(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_s__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epdd_s",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_s" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< dd_real > const *)arg1)->s(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_s__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epdd_s",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_s" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epdd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epdd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epdd_s" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< dd_real > const *)arg1)->s(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_s(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_epdd_s__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epdd_s__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epdd_s__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epdd_s__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epdd_s'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< dd_real >::s(int const,int const) const\n"
    "    BH::eval_param< dd_real >::s(int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::s(int const,int const,int const,int const) const\n"
    "    BH::eval_param< dd_real >::s(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epdd_sp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epdd_sp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_sp" "', argument " "1"" of type '" "BH::eval_param< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epdd_sp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epdd_sp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< dd_real > const *)arg1)->sp(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_modify_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_modify_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_modify_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR modify_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_get_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_get_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_get_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR get_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_orig_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_orig_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_orig_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR orig_mass(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_orig_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_orig_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_orig_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR orig_mass2(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR mass(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epdd_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR mass2(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_set_dynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< dd_real > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_set_dynamic",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_set_dynamic" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_set_dynamic" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epdd_set_dynamic" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic(arg1,(std::complex< dd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_set_dynamic2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< dd_real > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epdd_set_dynamic2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_set_dynamic2" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epdd_set_dynamic2" "', argument " "2"" of type '" "std::complex< dd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< dd_real > * >(argp2);
  BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic2(arg1,(std::complex< dd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_nbr_masses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":epdd_nbr_masses")) SWIG_fail;
  result = BH::eval_param< dd_real >::SWIGTEMPLATEDISAMBIGUATOR nbr_masses();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epdd_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< dd_real > *arg1 = (BH::eval_param< dd_real > *) 0 ;
  BH::mass_param *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epdd_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epdd_add" "', argument " "1"" of type '" "BH::eval_param< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__mass_param,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epdd_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epdd_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  arg2 = reinterpret_cast< BH::mass_param * >(argp2);
  (arg1)->add(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *epdd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__eval_paramT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_epqd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_epqd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_epqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::eval_param< qd_real > *)new BH::eval_param< qd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epqd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::Cmom< qd_real > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_epqd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epqd" "', argument " "1"" of type '" "std::vector< BH::Cmom< qd_real > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epqd" "', argument " "1"" of type '" "std::vector< BH::Cmom< qd_real > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::Cmom< qd_real > > * >(argp1);
  result = (BH::eval_param< qd_real > *)new BH::eval_param< qd_real >((std::vector< BH::Cmom< qd_real > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epqd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< qd_real > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_epqd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epqd" "', argument " "1"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epqd" "', argument " "1"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_epqd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epqd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  result = (BH::eval_param< qd_real > *)new BH::eval_param< qd_real >(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epqd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< qd_real > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_epqd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_epqd" "', argument " "1"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epqd" "', argument " "1"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_epqd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_epqd" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::eval_param< qd_real > *)new BH::eval_param< qd_real >(*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_epqd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_epqd__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_epqd__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_epqd__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_epqd__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_epqd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::eval_param(int)\n"
    "    BH::eval_param< qd_real >::eval_param(std::vector< BH::Cmom< qd_real > > const &)\n"
    "    BH::eval_param< qd_real >::eval_param(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > &)\n"
    "    BH::eval_param< qd_real >::eval_param(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_epqd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_epqd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_epqd" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_update",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_update" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_update" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epqd_update" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epqd_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epqd_update" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->update(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_is_state_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  BH::eval_param_state *arg2 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_is_state_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_is_state_match" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_is_state_match" "', argument " "2"" of type '" "BH::eval_param_state *""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param_state * >(argp2);
  result = (bool)(arg1)->is_state_match(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_get_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_get_state" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (BH::eval_param_state *)(arg1)->get_state();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_get_leg_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::eval_param_state *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_get_leg_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_get_leg_state" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_get_leg_state" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::eval_param_state *)((BH::eval_param< qd_real > const *)arg1)->get_leg_state(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_changed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_changed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_changed" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  (arg1)->changed();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_get_ID" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (unsigned long)((BH::eval_param< qd_real > const *)arg1)->get_ID();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_renew_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_renew_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_renew_ID" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  (arg1)->renew_ID();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_p" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_p" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< qd_real > *)((BH::eval_param< qd_real > const *)arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_cmom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_cmom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_cmom" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_cmom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Cmom< qd_real > *) &((BH::eval_param< qd_real > const *)arg1)->cmom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::momentum< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_mom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_mom" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_mom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::momentum< std::complex< qd_real > > *) &((BH::eval_param< qd_real > const *)arg1)->mom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentumT_std__complexT_qd_real_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_size" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (int)((BH::eval_param< qd_real > const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< qd_real > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_begin" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (BH::Cmom< qd_real > **)((BH::eval_param< qd_real > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< qd_real > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_back" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (BH::Cmom< qd_real > **)((BH::eval_param< qd_real > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_ref" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  result = (BH::Cmom< qd_real > *)((BH::eval_param< qd_real > const *)arg1)->ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  BH::Cmom< qd_real > *arg3 = (BH::Cmom< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_set" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epqd_set" "', argument " "3"" of type '" "BH::Cmom< qd_real > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< qd_real > * >(argp3);
  (arg1)->set(arg2,(BH::Cmom< qd_real > const *)arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  BH::Cmom< qd_real > *arg3 = (BH::Cmom< qd_real > *) 0 ;
  BH::eval_param_state *arg4 = (BH::eval_param_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epqd_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_set" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "epqd_set" "', argument " "3"" of type '" "BH::Cmom< qd_real > const *""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< qd_real > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__eval_param_state, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "epqd_set" "', argument " "4"" of type '" "BH::eval_param_state *""'"); 
  }
  arg4 = reinterpret_cast< BH::eval_param_state * >(argp4);
  (arg1)->set(arg2,(BH::Cmom< qd_real > const *)arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_epqd_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__CmomT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__eval_param_state, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_epqd_set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::set(int,BH::Cmom< qd_real > const *)\n"
    "    BH::eval_param< qd_real >::set(int,BH::Cmom< qd_real > const *,BH::eval_param_state *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_set_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  BH::Cmom< qd_real > *arg2 = (BH::Cmom< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_set_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_set_ref" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_set_ref" "', argument " "2"" of type '" "BH::Cmom< qd_real > const *""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< qd_real > * >(argp2);
  (arg1)->set_ref((BH::Cmom< qd_real > const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_get_default_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":epqd_get_default_ref")) SWIG_fail;
  result = (BH::Cmom< qd_real > *) &BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR get_default_ref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_spa",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spa" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< qd_real > const *)arg1)->spa(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_spb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spb" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< qd_real > const *)arg1)->spb(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spab__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epqd_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spab" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< qd_real > const *)arg1)->spab(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spba__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epqd_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spba" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< qd_real > const *)arg1)->spba(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spaa__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epqd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spaa" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< qd_real > const *)arg1)->spaa(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spbb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epqd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spbb" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< qd_real > const *)arg1)->spbb(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spab__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epqd_spab",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spab" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spab" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epqd_spab" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< qd_real > const *)arg1)->spab(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spab(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epqd_spab__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epqd_spab__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_spab'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::spab(int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::spab(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_spba__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epqd_spba",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spba" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spba" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epqd_spba" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< qd_real > const *)arg1)->spba(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spba(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epqd_spba__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epqd_spba__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_spba'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::spba(int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::spba(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_spaa__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:epqd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spaa" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epqd_spaa" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "epqd_spaa" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< qd_real > const *)arg1)->spaa(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spaa(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epqd_spaa__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_epqd_spaa__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_spaa'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::spaa(int const,int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::spaa(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_spbb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:epqd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_spbb" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epqd_spbb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "epqd_spbb" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = ((BH::eval_param< qd_real > const *)arg1)->spbb(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_spbb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epqd_spbb__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_epqd_spbb__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_spbb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::spbb(int const,int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::spbb(int const,int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_s__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_s" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< qd_real > const *)arg1)->s(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_s__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:epqd_s",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_s" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((BH::eval_param< qd_real > const *)arg1)->s(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_s__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:epqd_s",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_s" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((BH::eval_param< qd_real > const *)arg1)->s(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_s__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:epqd_s",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_s" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "epqd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "epqd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "epqd_s" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = ((BH::eval_param< qd_real > const *)arg1)->s(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_s(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_epqd_s__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_epqd_s__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_epqd_s__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_epqd_s__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'epqd_s'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::eval_param< qd_real >::s(int const,int const) const\n"
    "    BH::eval_param< qd_real >::s(int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::s(int const,int const,int const,int const) const\n"
    "    BH::eval_param< qd_real >::s(int const,int const,int const,int const,int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_epqd_sp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:epqd_sp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_sp" "', argument " "1"" of type '" "BH::eval_param< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "epqd_sp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "epqd_sp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((BH::eval_param< qd_real > const *)arg1)->sp(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_modify_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_modify_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_modify_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR modify_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_get_mass_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::mass_param *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_get_mass_param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_get_mass_param" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::mass_param *) &BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR get_mass_param(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mass_param, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_orig_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_orig_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_orig_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR orig_mass(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_orig_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_orig_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_orig_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR orig_mass2(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_mass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_mass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR mass(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_mass2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:epqd_mass2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_mass2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR mass2(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_set_dynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< qd_real > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_set_dynamic",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_set_dynamic" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_set_dynamic" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epqd_set_dynamic" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic(arg1,(std::complex< qd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_set_dynamic2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< qd_real > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_set_dynamic2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "epqd_set_dynamic2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_set_dynamic2" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epqd_set_dynamic2" "', argument " "2"" of type '" "std::complex< qd_real > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< qd_real > * >(argp2);
  BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR set_dynamic2(arg1,(std::complex< qd_real > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_nbr_masses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":epqd_nbr_masses")) SWIG_fail;
  result = BH::eval_param< qd_real >::SWIGTEMPLATEDISAMBIGUATOR nbr_masses();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epqd_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::eval_param< qd_real > *arg1 = (BH::eval_param< qd_real > *) 0 ;
  BH::mass_param *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epqd_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epqd_add" "', argument " "1"" of type '" "BH::eval_param< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::eval_param< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__mass_param,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "epqd_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "epqd_add" "', argument " "2"" of type '" "BH::mass_param &""'"); 
  }
  arg2 = reinterpret_cast< BH::mass_param * >(argp2);
  (arg1)->add(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *epqd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__eval_paramT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_read_settings_from_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:read_settings_from_file",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_settings_from_file" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "read_settings_from_file" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  BH::settings::read_settings_from_file((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_use_setting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:use_setting",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "use_setting" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "use_setting" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  BH::settings::use_setting((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_n",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_n" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = ((BH::process const *)arg1)->n();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:process_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_p" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "process_p" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (BH::particle_ID *) &((BH::process const *)arg1)->p(arg2);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_particle_IDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_particle_IDs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_particle_IDs" "', argument " "1"" of type '" "BH::process *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *) &(arg1)->particle_IDs();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_process")) SWIG_fail;
  result = (BH::process *)new BH::process();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp1);
  result = (BH::process *)new BH::process((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp1);
  result = (BH::process *)new BH::process((std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg1 = 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_process",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_process" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (BH::process *)new BH::process(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle *,std::allocator< BH::particle * > > *arg1 = 0 ;
  SwigValueWrapper< std::vector< short,std::allocator< short > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_process",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle *,std::allocator< BH::particle * > > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "std::vector< short,std::allocator< short > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "std::vector< short,std::allocator< short > >""'");
    } else {
      std::vector< short,std::allocator< short > > * temp = reinterpret_cast< std::vector< short,std::allocator< short > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::process *)new BH::process((std::vector< BH::particle *,std::allocator< BH::particle * > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_process",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_begin" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = ((BH::process const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator(static_cast< const std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_end" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = ((BH::process const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator(static_cast< const std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process___len__" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = ((BH::process const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_pcode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_pcode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_pcode" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (long)((BH::process const *)arg1)->pcode();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:process___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process___getitem__" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "process___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::particle_ID *) &((BH::process const *)arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_front" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::particle_ID *) &((BH::process const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_process_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::particle_ID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process_back" "', argument " "1"" of type '" "BH::process const *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::particle_ID *) &((BH::process const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_process",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_process",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_process",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  BH::particle_ID arg8 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  BH::particle_ID arg8 ;
  BH::particle_ID arg9 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  BH::particle_ID arg8 ;
  BH::particle_ID arg9 ;
  BH::particle_ID arg10 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  BH::particle_ID arg8 ;
  BH::particle_ID arg9 ;
  BH::particle_ID arg10 ;
  BH::particle_ID arg11 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_process" "', argument " "11"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "11"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::particle_ID arg1 ;
  BH::particle_ID arg2 ;
  BH::particle_ID arg3 ;
  BH::particle_ID arg4 ;
  BH::particle_ID arg5 ;
  BH::particle_ID arg6 ;
  BH::particle_ID arg7 ;
  BH::particle_ID arg8 ;
  BH::particle_ID arg9 ;
  BH::particle_ID arg10 ;
  BH::particle_ID arg11 ;
  BH::particle_ID arg12 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  void *argp12 ;
  int res12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:new_process",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "1"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "2"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "3"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "4"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "5"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "6"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "7"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "8"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "9"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "10"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_process" "', argument " "11"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "11"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  {
    res12 = SWIG_ConvertPtr(obj11, &argp12, SWIGTYPE_p_BH__particle_ID,  0  | 0);
    if (!SWIG_IsOK(res12)) {
      SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "new_process" "', argument " "12"" of type '" "BH::particle_ID""'"); 
    }  
    if (!argp12) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_process" "', argument " "12"" of type '" "BH::particle_ID""'");
    } else {
      BH::particle_ID * temp = reinterpret_cast< BH::particle_ID * >(argp12);
      arg12 = *temp;
      if (SWIG_IsNewObj(res12)) delete temp;
    }
  }
  result = (BH::process *)new BH::process(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_process(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[13];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 12) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_process__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_process__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_process__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_process__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_process__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_process__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_process__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_process__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_process__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_process__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_process__SWIG_10(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_process__SWIG_11(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__particle_ID, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_process__SWIG_12(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__particle_ID, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__particle_ID, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_process__SWIG_13(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__particle_ID, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__particle_ID, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__particle_ID, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_process__SWIG_14(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__particle_ID, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__particle_ID, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__particle_ID, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_BH__particle_ID, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_process__SWIG_15(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__particle_ID, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__particle_ID, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__particle_ID, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__particle_ID, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__particle_ID, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_BH__particle_ID, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          int res = SWIG_ConvertPtr(argv[11], 0, SWIGTYPE_p_BH__particle_ID, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            return _wrap_new_process__SWIG_16(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_process'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::process::process()\n"
    "    BH::process::process(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)\n"
    "    BH::process::process(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    BH::process::process(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > &,long)\n"
    "    BH::process::process(std::vector< BH::particle *,std::allocator< BH::particle * > > const &,std::vector< short,std::allocator< short > >)\n"
    "    BH::process::process(BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n"
    "    BH::process::process(BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID,BH::particle_ID)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_process___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:process___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "process___str__" "', argument " "1"" of type '" "BH::process *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = BH_process___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = (BH::process *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__process, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_process" "', argument " "1"" of type '" "BH::process *""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *process_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__process, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___eq____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (bool)BH::operator ==((BH::process const &)*arg1,(BH::process const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (bool)BH::operator <((BH::process const &)*arg1,(BH::process const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_is_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_is_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_is_zero" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_is_zero" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (bool)BH::Tree_is_zero((BH::process const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::color_structure arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::color_structure""'");
  } 
  arg2 = static_cast< BH::color_structure >(val2);
  result = (std::ostream *) &BH::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HelAmpl_display(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *arg1 = (BH::HelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HelAmpl_display",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__HelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelAmpl_display" "', argument " "1"" of type '" "BH::HelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::HelAmpl * >(argp1);
  (arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HelAmpl_is_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *arg1 = (BH::HelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HelAmpl_is_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__HelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelAmpl_is_zero" "', argument " "1"" of type '" "BH::HelAmpl const *""'"); 
  }
  arg1 = reinterpret_cast< BH::HelAmpl * >(argp1);
  result = (bool)((BH::HelAmpl const *)arg1)->is_zero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HelAmpl_is_split_helicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *arg1 = (BH::HelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HelAmpl_is_split_helicity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__HelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelAmpl_is_split_helicity" "', argument " "1"" of type '" "BH::HelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::HelAmpl * >(argp1);
  result = (bool)(arg1)->is_split_helicity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HelAmpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HelAmpl")) SWIG_fail;
  result = (BH::HelAmpl *)new BH::HelAmpl();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__HelAmpl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HelAmpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::HelAmpl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HelAmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HelAmpl" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HelAmpl" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::HelAmpl *)new BH::HelAmpl((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__HelAmpl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HelAmpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HelAmpl__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HelAmpl__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HelAmpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::HelAmpl::HelAmpl()\n"
    "    BH::HelAmpl::HelAmpl(BH::process const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HelAmpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *arg1 = (BH::HelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HelAmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__HelAmpl, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HelAmpl" "', argument " "1"" of type '" "BH::HelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::HelAmpl * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HelAmpl_get_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::HelAmpl *arg1 = (BH::HelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HelAmpl_get_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__HelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelAmpl_get_process" "', argument " "1"" of type '" "BH::HelAmpl const *""'"); 
  }
  arg1 = reinterpret_cast< BH::HelAmpl * >(argp1);
  result = (BH::process *) &((BH::HelAmpl const *)arg1)->get_process();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HelAmpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__HelAmpl, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeHelAmpl_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeHelAmpl_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeHelAmpl_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::eval_param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeHelAmpl_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< double > * >(argp2);
  {
    try {
      result = (arg1)->eval((BH::eval_param< double > const &)*arg2);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeHelAmpl_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  {
    try {
      result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeHelAmpl_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_eval" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeHelAmpl_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  {
    try {
      result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
    } catch (BH::BHerror &e) {
      std::string message;
      e.print();
      //	  PyErr_SetString(PyExc_SystemError, const_cast<char*>(e.what()));
      PyErr_SetString(PyExc_SystemError, "BH error.");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeHelAmpl_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeHelAmpl_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeHelAmpl_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeHelAmpl_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeHelAmpl_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeHelAmpl_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeHelAmpl_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::TreeHelAmpl::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::TreeHelAmpl::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::TreeHelAmpl::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::TreeHelAmpl::eval(BH::eval_param< double > const &)\n"
    "    BH::TreeHelAmpl::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::TreeHelAmpl::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_is_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeHelAmpl_is_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_is_zero" "', argument " "1"" of type '" "BH::TreeHelAmpl const *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  result = (bool)((BH::TreeHelAmpl const *)arg1)->is_zero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeHelAmpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::TreeHelAmpl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeHelAmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeHelAmpl" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeHelAmpl" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::TreeHelAmpl *)new BH::TreeHelAmpl((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__TreeHelAmpl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeHelAmpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::TreeHelAmpl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeHelAmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__TreeHelAmpl,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeHelAmpl" "', argument " "1"" of type '" "BH::TreeHelAmpl const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeHelAmpl" "', argument " "1"" of type '" "BH::TreeHelAmpl const &""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  result = (BH::TreeHelAmpl *)new BH::TreeHelAmpl((BH::TreeHelAmpl const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__TreeHelAmpl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeHelAmpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeHelAmpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__TreeHelAmpl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeHelAmpl__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeHelAmpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::TreeHelAmpl::TreeHelAmpl(BH::process const &)\n"
    "    BH::TreeHelAmpl::TreeHelAmpl(BH::TreeHelAmpl const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeHelAmpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeHelAmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeHelAmpl" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeHelAmpl_pointee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::TreeHelAmpl *arg1 = (BH::TreeHelAmpl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::TREE_TYPE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeHelAmpl_pointee",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__TreeHelAmpl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeHelAmpl_pointee" "', argument " "1"" of type '" "BH::TreeHelAmpl *""'"); 
  }
  arg1 = reinterpret_cast< BH::TreeHelAmpl * >(argp1);
  result = (BH::TREE_TYPE *)(arg1)->pointee();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeHelAmpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__TreeHelAmpl, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_seriesComplexd")) SWIG_fail;
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_seriesComplexd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_seriesComplexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  std::complex< double > arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_seriesComplexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_seriesComplexd" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  std::complex< double > arg8 ;
  std::complex< double > arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  std::complex< double > val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_seriesComplexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_seriesComplexd" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  ecode9 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_seriesComplexd" "', argument " "9"" of type '" "std::complex< double >""'");
  } 
  arg9 = static_cast< std::complex< double > >(val9);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  std::complex< double > arg8 ;
  std::complex< double > arg9 ;
  std::complex< double > arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  std::complex< double > val9 ;
  int ecode9 = 0 ;
  std::complex< double > val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_seriesComplexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_seriesComplexd" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  ecode9 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_seriesComplexd" "', argument " "9"" of type '" "std::complex< double >""'");
  } 
  arg9 = static_cast< std::complex< double > >(val9);
  ecode10 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_seriesComplexd" "', argument " "10"" of type '" "std::complex< double >""'");
  } 
  arg10 = static_cast< std::complex< double > >(val10);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  std::complex< double > arg8 ;
  std::complex< double > arg9 ;
  std::complex< double > arg10 ;
  std::complex< double > arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  std::complex< double > val9 ;
  int ecode9 = 0 ;
  std::complex< double > val10 ;
  int ecode10 = 0 ;
  std::complex< double > val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_seriesComplexd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_seriesComplexd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_seriesComplexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_seriesComplexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_seriesComplexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_seriesComplexd" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  ecode9 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_seriesComplexd" "', argument " "9"" of type '" "std::complex< double >""'");
  } 
  arg9 = static_cast< std::complex< double > >(val9);
  ecode10 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_seriesComplexd" "', argument " "10"" of type '" "std::complex< double >""'");
  } 
  arg10 = static_cast< std::complex< double > >(val10);
  ecode11 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_seriesComplexd" "', argument " "11"" of type '" "std::complex< double >""'");
  } 
  arg11 = static_cast< std::complex< double > >(val11);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexd" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< double >,std::allocator< std::complex< double > > > * >(argp3);
  result = (BH::Series< std::complex< double > > *)new BH::Series< std::complex< double > >(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_seriesComplexd__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_seriesComplexd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_seriesComplexd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_seriesComplexd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_seriesComplexd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_seriesComplexd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_seriesComplexd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_seriesComplexd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_seriesComplexd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_seriesComplexd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_seriesComplexd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_new_seriesComplexd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_seriesComplexd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Series< std::complex< double > >::Series()\n"
    "    BH::Series< std::complex< double > >::Series(int,int)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >,std::complex< double >)\n"
    "    BH::Series< std::complex< double > >::Series(int,int,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seriesComplexd___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexd___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd___call__" "', argument " "1"" of type '" "BH::Series< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexd___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::complex< double > *) &((BH::Series< std::complex< double > > const *)arg1)->operator ()(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd_leading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexd_leading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd_leading" "', argument " "1"" of type '" "BH::Series< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  result = (int)((BH::Series< std::complex< double > > const *)arg1)->leading();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexd_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd_last" "', argument " "1"" of type '" "BH::Series< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  result = (int)((BH::Series< std::complex< double > > const *)arg1)->last();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd_get_term(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexd_get_term",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd_get_term" "', argument " "1"" of type '" "BH::Series< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  result = ((BH::Series< std::complex< double > > const *)arg1)->get_term();
  resultobj = SWIG_NewPointerObj((new std::vector< std::complex< double >,std::allocator< std::complex< double > > >(static_cast< const std::vector< std::complex< double >,std::allocator< std::complex< double > > >& >(result))), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexd___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd___getitem__" "', argument " "1"" of type '" "BH::Series< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexd___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = BH_Series_Sl_std_complex_Sl_double_Sg__Sg____getitem__((BH::Series< std::complex< double > > const *)arg1,arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexd___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd___repr__" "', argument " "1"" of type '" "BH::Series< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_double_Sg__Sg____repr__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexd___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexd___str__" "', argument " "1"" of type '" "BH::Series< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_double_Sg__Sg____str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_seriesComplexd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > *arg1 = (BH::Series< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_seriesComplexd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_seriesComplexd" "', argument " "1"" of type '" "BH::Series< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *seriesComplexd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_seriesComplexdd")) SWIG_fail;
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_seriesComplexdd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexdd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  std::complex< dd_real > arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  std::complex< dd_real > arg7 ;
  std::complex< dd_real > arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  std::complex< dd_real > arg7 ;
  std::complex< dd_real > arg8 ;
  std::complex< dd_real > arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  std::complex< dd_real > arg7 ;
  std::complex< dd_real > arg8 ;
  std::complex< dd_real > arg9 ;
  std::complex< dd_real > arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_seriesComplexdd" "', argument " "10"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "10"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< dd_real > arg3 ;
  std::complex< dd_real > arg4 ;
  std::complex< dd_real > arg5 ;
  std::complex< dd_real > arg6 ;
  std::complex< dd_real > arg7 ;
  std::complex< dd_real > arg8 ;
  std::complex< dd_real > arg9 ;
  std::complex< dd_real > arg10 ;
  std::complex< dd_real > arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_seriesComplexdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "4"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "5"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "6"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "7"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "8"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "9"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_seriesComplexdd" "', argument " "10"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "10"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_std__complexT_dd_real_t,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_seriesComplexdd" "', argument " "11"" of type '" "std::complex< dd_real >""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "11"" of type '" "std::complex< dd_real >""'");
    } else {
      std::complex< dd_real > * temp = reinterpret_cast< std::complex< dd_real > * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< dd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexdd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexdd" "', argument " "3"" of type '" "std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > * >(argp3);
  result = (BH::Series< std::complex< dd_real > > *)new BH::Series< std::complex< dd_real > >(arg1,arg2,(std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexdd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_seriesComplexdd__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_seriesComplexdd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_seriesComplexdd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_seriesComplexdd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_seriesComplexdd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_seriesComplexdd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_seriesComplexdd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_seriesComplexdd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_seriesComplexdd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_seriesComplexdd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_seriesComplexdd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_std__complexT_dd_real_t, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_seriesComplexdd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_seriesComplexdd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Series< std::complex< dd_real > >::Series()\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >,std::complex< dd_real >)\n"
    "    BH::Series< std::complex< dd_real > >::Series(int,int,std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexdd___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd___call__" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexdd___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::complex< dd_real > *) &((BH::Series< std::complex< dd_real > > const *)arg1)->operator ()(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd_leading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexdd_leading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd_leading" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  result = (int)((BH::Series< std::complex< dd_real > > const *)arg1)->leading();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexdd_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd_last" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  result = (int)((BH::Series< std::complex< dd_real > > const *)arg1)->last();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd_get_term(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexdd_get_term",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd_get_term" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  result = ((BH::Series< std::complex< dd_real > > const *)arg1)->get_term();
  resultobj = SWIG_NewPointerObj((new std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > >(static_cast< const std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > >& >(result))), SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexdd___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd___getitem__" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexdd___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____getitem__((BH::Series< std::complex< dd_real > > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexdd___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd___repr__" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____repr__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexdd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexdd___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexdd___str__" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_dd_real_Sg__Sg____str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_seriesComplexdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > *arg1 = (BH::Series< std::complex< dd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_seriesComplexdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_seriesComplexdd" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *seriesComplexdd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_seriesComplexqd")) SWIG_fail;
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_seriesComplexqd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexqd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  std::complex< qd_real > arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  std::complex< qd_real > arg7 ;
  std::complex< qd_real > arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  std::complex< qd_real > arg7 ;
  std::complex< qd_real > arg8 ;
  std::complex< qd_real > arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  std::complex< qd_real > arg7 ;
  std::complex< qd_real > arg8 ;
  std::complex< qd_real > arg9 ;
  std::complex< qd_real > arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_seriesComplexqd" "', argument " "10"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "10"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::complex< qd_real > arg3 ;
  std::complex< qd_real > arg4 ;
  std::complex< qd_real > arg5 ;
  std::complex< qd_real > arg6 ;
  std::complex< qd_real > arg7 ;
  std::complex< qd_real > arg8 ;
  std::complex< qd_real > arg9 ;
  std::complex< qd_real > arg10 ;
  std::complex< qd_real > arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_seriesComplexqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "4"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "5"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "6"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "7"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "8"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "9"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_seriesComplexqd" "', argument " "10"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "10"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_std__complexT_qd_real_t,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_seriesComplexqd" "', argument " "11"" of type '" "std::complex< qd_real >""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "11"" of type '" "std::complex< qd_real >""'");
    } else {
      std::complex< qd_real > * temp = reinterpret_cast< std::complex< qd_real > * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Series< std::complex< qd_real > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_seriesComplexqd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_seriesComplexqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_seriesComplexqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_seriesComplexqd" "', argument " "3"" of type '" "std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > * >(argp3);
  result = (BH::Series< std::complex< qd_real > > *)new BH::Series< std::complex< qd_real > >(arg1,arg2,(std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_seriesComplexqd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_seriesComplexqd__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_seriesComplexqd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_seriesComplexqd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_seriesComplexqd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_seriesComplexqd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_seriesComplexqd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_seriesComplexqd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_seriesComplexqd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_seriesComplexqd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_seriesComplexqd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_seriesComplexqd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_std__complexT_qd_real_t, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_seriesComplexqd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_seriesComplexqd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Series< std::complex< qd_real > >::Series()\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >,std::complex< qd_real >)\n"
    "    BH::Series< std::complex< qd_real > >::Series(int,int,std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexqd___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd___call__" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexqd___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::complex< qd_real > *) &((BH::Series< std::complex< qd_real > > const *)arg1)->operator ()(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd_leading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexqd_leading",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd_leading" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  result = (int)((BH::Series< std::complex< qd_real > > const *)arg1)->leading();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexqd_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd_last" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  result = (int)((BH::Series< std::complex< qd_real > > const *)arg1)->last();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd_get_term(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexqd_get_term",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd_get_term" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  result = ((BH::Series< std::complex< qd_real > > const *)arg1)->get_term();
  resultobj = SWIG_NewPointerObj((new std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > >(static_cast< const std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > >& >(result))), SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:seriesComplexqd___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd___getitem__" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "seriesComplexqd___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____getitem__((BH::Series< std::complex< qd_real > > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexqd___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd___repr__" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____repr__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seriesComplexqd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seriesComplexqd___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "seriesComplexqd___str__" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  result = BH_Series_Sl_std_complex_Sl_qd_real_Sg__Sg____str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_seriesComplexqd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > *arg1 = (BH::Series< std::complex< qd_real > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_seriesComplexqd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_seriesComplexqd" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *seriesComplexqd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCd")) SWIG_fail;
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SCd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SCd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SCd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SCd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SCd" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SCd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SCd" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SCd" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SCd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SCd" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SCd" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_SCd" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_SCd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SCd" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SCd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SCd" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SCd" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SCd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SCd" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SCd" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_SCd" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_SCd" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCd" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCd" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< double >,std::allocator< std::complex< double > > > * >(argp3);
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< double > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SCd",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SCd" "', argument " "1"" of type '" "BH::Series< std::complex< double > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCd" "', argument " "1"" of type '" "BH::Series< std::complex< double > >""'");
    } else {
      BH::Series< std::complex< double > > * temp = reinterpret_cast< BH::Series< std::complex< double > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::SeriesC< double > *)new BH::SeriesC< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SCd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__SeriesT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SCd__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SCd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SCd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SCd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SCd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_SCd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_SCd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_SCd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_SCd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_SCd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_SCd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_new_SCd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SCd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::SeriesC< double >::SeriesC()\n"
    "    BH::SeriesC< double >::SeriesC(int,int)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,double,double,double,double,double,double,double,double,double)\n"
    "    BH::SeriesC< double >::SeriesC(int,int,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n"
    "    BH::SeriesC< double >::SeriesC(BH::Series< std::complex< double > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SCd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< double > *arg1 = (BH::SeriesC< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCd" "', argument " "1"" of type '" "BH::SeriesC< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::SeriesC< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCdd")) SWIG_fail;
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SCdd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCdd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  dd_real arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  dd_real arg7 ;
  dd_real arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  dd_real arg7 ;
  dd_real arg8 ;
  dd_real arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  dd_real arg7 ;
  dd_real arg8 ;
  dd_real arg9 ;
  dd_real arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_SCdd" "', argument " "10"" of type '" "dd_real""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "10"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  dd_real arg3 ;
  dd_real arg4 ;
  dd_real arg5 ;
  dd_real arg6 ;
  dd_real arg7 ;
  dd_real arg8 ;
  dd_real arg9 ;
  dd_real arg10 ;
  dd_real arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_SCdd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "4"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "5"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "6"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "7"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "8"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "9"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_SCdd" "', argument " "10"" of type '" "dd_real""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "10"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_SCdd" "', argument " "11"" of type '" "dd_real""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "11"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCdd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCdd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCdd" "', argument " "3"" of type '" "std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "3"" of type '" "std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > * >(argp3);
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1,arg2,(std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< dd_real > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SCdd",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SCdd" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCdd" "', argument " "1"" of type '" "BH::Series< std::complex< dd_real > >""'");
    } else {
      BH::Series< std::complex< dd_real > > * temp = reinterpret_cast< BH::Series< std::complex< dd_real > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::SeriesC< dd_real > *)new BH::SeriesC< dd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCdd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SCdd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__SeriesT_std__complexT_dd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SCdd__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SCdd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SCdd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SCdd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SCdd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_SCdd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_SCdd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_dd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_SCdd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_dd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_dd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_SCdd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_dd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_dd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_dd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_SCdd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_dd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_dd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_dd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_dd_real, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_SCdd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_dd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_dd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_dd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_dd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_dd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_dd_real, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_dd_real, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_SCdd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SCdd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::SeriesC< dd_real >::SeriesC()\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real,dd_real)\n"
    "    BH::SeriesC< dd_real >::SeriesC(int,int,std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > const &)\n"
    "    BH::SeriesC< dd_real >::SeriesC(BH::Series< std::complex< dd_real > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SCdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< dd_real > *arg1 = (BH::SeriesC< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCdd" "', argument " "1"" of type '" "BH::SeriesC< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::SeriesC< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCdd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCqd")) SWIG_fail;
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SCqd",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCqd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  qd_real arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  qd_real arg7 ;
  qd_real arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  qd_real arg7 ;
  qd_real arg8 ;
  qd_real arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  qd_real arg7 ;
  qd_real arg8 ;
  qd_real arg9 ;
  qd_real arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_SCqd" "', argument " "10"" of type '" "qd_real""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "10"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  qd_real arg3 ;
  qd_real arg4 ;
  qd_real arg5 ;
  qd_real arg6 ;
  qd_real arg7 ;
  qd_real arg8 ;
  qd_real arg9 ;
  qd_real arg10 ;
  qd_real arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_SCqd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "4"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "5"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "6"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "7"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "8"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  {
    res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "9"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp9);
      arg9 = *temp;
      if (SWIG_IsNewObj(res9)) delete temp;
    }
  }
  {
    res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_SCqd" "', argument " "10"" of type '" "qd_real""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "10"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp10);
      arg10 = *temp;
      if (SWIG_IsNewObj(res10)) delete temp;
    }
  }
  {
    res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_SCqd" "', argument " "11"" of type '" "qd_real""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "11"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp11);
      arg11 = *temp;
      if (SWIG_IsNewObj(res11)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SCqd",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCqd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCqd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SCqd" "', argument " "3"" of type '" "std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "3"" of type '" "std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > * >(argp3);
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1,arg2,(std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Series< std::complex< qd_real > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SCqd",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SCqd" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCqd" "', argument " "1"" of type '" "BH::Series< std::complex< qd_real > >""'");
    } else {
      BH::Series< std::complex< qd_real > > * temp = reinterpret_cast< BH::Series< std::complex< qd_real > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::SeriesC< qd_real > *)new BH::SeriesC< qd_real >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SCqd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SCqd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__SeriesT_std__complexT_qd_real_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SCqd__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SCqd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SCqd__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SCqd__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SCqd__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_SCqd__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_SCqd__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_qd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_SCqd__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_qd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_qd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_SCqd__SWIG_7(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_qd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_qd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_qd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_SCqd__SWIG_8(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_qd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_qd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_qd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_qd_real, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_SCqd__SWIG_9(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_qd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_qd_real, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_qd_real, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_qd_real, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_qd_real, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_qd_real, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_qd_real, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_qd_real, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_SCqd__SWIG_10(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SCqd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::SeriesC< qd_real >::SeriesC()\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real,qd_real)\n"
    "    BH::SeriesC< qd_real >::SeriesC(int,int,std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > const &)\n"
    "    BH::SeriesC< qd_real >::SeriesC(BH::Series< std::complex< qd_real > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SCqd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::SeriesC< qd_real > *arg1 = (BH::SeriesC< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCqd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCqd" "', argument " "1"" of type '" "BH::SeriesC< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< BH::SeriesC< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCqd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Ccomputable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Ccomputable")) SWIG_fail;
  result = (BH::computable< std::complex > *)new BH::computable< std::complex >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__computableT_std__complex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by relpdouble*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_containerTypeT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_containerTypeT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by relpdouble*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_containerTypeT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_get_value__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_get_value" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_containerTypeT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ccomputable_get_value(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_get_value__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_get_value__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_get_value__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_get_value__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_get_value__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_get_value__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Ccomputable_get_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::computable< std::complex >::get_value(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::get_value(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::get_value(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::get_value(BH::eval_param< BH::R > const &)\n"
    "    BH::computable< std::complex >::get_value(BH::eval_param< BH::RHP > const &)\n"
    "    BH::computable< std::complex >::get_value(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


/*replaced by relpdouble*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_containerTypeT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Ccomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_containerTypeT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by relpdouble*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_containerTypeT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by repl*/SWIGINTERN PyObject *_wrap_Ccomputable_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ccomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ccomputable_eval" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ccomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_containerTypeT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ccomputable_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ccomputable_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_std__complex_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Ccomputable_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Ccomputable_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::computable< std::complex >::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< std::complex >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::computable< std::complex >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::computable< std::complex >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Ccomputable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< std::complex > *arg1 = (BH::computable< std::complex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ccomputable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_std__complex_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ccomputable" "', argument " "1"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< std::complex > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ccomputable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__computableT_std__complex_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCcomputable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCcomputable")) SWIG_fail;
  result = (BH::computable< BH::SeriesC > *)new BH::computable< BH::SeriesC >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__computableT_BH__SeriesC_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< double >(static_cast< const SeriesC< double >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< dd_real >(static_cast< const SeriesC< dd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< qd_real >(static_cast< const SeriesC< qd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< double >(static_cast< const SeriesC< double >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< dd_real >(static_cast< const SeriesC< dd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_get_value__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_get_value" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< qd_real >(static_cast< const SeriesC< qd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCcomputable_get_value(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_get_value__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_get_value__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_get_value__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_get_value__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_get_value__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_get_value__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SCcomputable_get_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::eval_param< BH::R > const &)\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::eval_param< BH::RHP > const &)\n"
    "    BH::computable< BH::SeriesC >::get_value(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< double >(static_cast< const SeriesC< double >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< dd_real >(static_cast< const SeriesC< dd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SCcomputable_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< qd_real >(static_cast< const SeriesC< qd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< double >(static_cast< const SeriesC< double >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< dd_real >(static_cast< const SeriesC< dd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


/*replaced by replSC*/SWIGINTERN PyObject *_wrap_SCcomputable_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCcomputable_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCcomputable_eval" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCcomputable_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< qd_real >(static_cast< const SeriesC< qd_real >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCcomputable_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCcomputable_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__computableT_BH__SeriesC_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SCcomputable_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SCcomputable_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::computable< BH::SeriesC >::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::computable< BH::SeriesC >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::computable< BH::SeriesC >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::computable< BH::SeriesC >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SCcomputable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::computable< BH::SeriesC > *arg1 = (BH::computable< BH::SeriesC > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCcomputable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__computableT_BH__SeriesC_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCcomputable" "', argument " "1"" of type '" "BH::computable< BH::SeriesC > *""'"); 
  }
  arg1 = reinterpret_cast< BH::computable< BH::SeriesC > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCcomputable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__computableT_BH__SeriesC_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Rec_BB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_BB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rec_BB")) SWIG_fail;
  result = (BH::Rec_BB *)new BH::Rec_BB();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_BB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_BB_get_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_BB *arg1 = (BH::Rec_BB *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Rec_BB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_BB_get_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_BB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_BB_get_daughter" "', argument " "1"" of type '" "BH::Rec_BB *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_BB * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rec_BB_get_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::Rec_BB *)(arg1)->get_daughter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_BB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_BB_set_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_BB *arg1 = (BH::Rec_BB *) 0 ;
  size_t arg2 ;
  BH::Rec_BB *arg3 = (BH::Rec_BB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_BB_set_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_BB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_BB_set_daughter" "', argument " "1"" of type '" "BH::Rec_BB *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_BB * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rec_BB_set_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__Rec_BB, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_BB_set_daughter" "', argument " "3"" of type '" "BH::Rec_BB *""'"); 
  }
  arg3 = reinterpret_cast< BH::Rec_BB * >(argp3);
  (arg1)->set_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_BB_nbr_daughters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_BB *arg1 = (BH::Rec_BB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rec_BB_nbr_daughters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_BB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_BB_nbr_daughters" "', argument " "1"" of type '" "BH::Rec_BB *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_BB * >(argp1);
  result = (arg1)->nbr_daughters();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rec_BB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_BB *arg1 = (BH::Rec_BB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rec_BB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_BB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rec_BB" "', argument " "1"" of type '" "BH::Rec_BB *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_BB * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rec_BB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rec_BB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Rec_Tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Rec_Tree *)new BH::Rec_Tree((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_get_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rec_Tree_get_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_get_process" "', argument " "1"" of type '" "BH::Rec_Tree const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  result = (BH::process *) &((BH::Rec_Tree const *)arg1)->get_process();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rec_Tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rec_Tree" "', argument " "1"" of type '" "BH::Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rec_Tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rec_Tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Known_Rec_Tree_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Known_Rec_Tree_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Known_Rec_Tree_base" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree_base" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Known_Rec_Tree_base *)new BH::Known_Rec_Tree_base((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rec_Tree_base, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Known_Rec_Tree_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Known_Rec_Tree_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Known_Rec_Tree_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_base_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_base_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_base_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_base_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_base_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Known_Rec_Tree_base_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Known_Rec_Tree_base_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Known_Rec_Tree_base_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Known_Rec_Tree_base_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Known_Rec_Tree_base::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Known_Rec_Tree_base::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Known_Rec_Tree_base::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Known_Rec_Tree_base::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Known_Rec_Tree_base::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Known_Rec_Tree_base::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Known_Rec_Tree_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_base *arg1 = (BH::Known_Rec_Tree_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_Rec_Tree_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_Rec_Tree_base" "', argument " "1"" of type '" "BH::Known_Rec_Tree_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_Rec_Tree_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_Rec_Tree_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Known_Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Known_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Known_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Known_Rec_Tree *)new BH::Known_Rec_Tree((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rec_Tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Known_Rec_Tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree *arg1 = (BH::Known_Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_Rec_Tree" "', argument " "1"" of type '" "BH::Known_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_Rec_Tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_Rec_Tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree_offset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Known_Rec_Tree_offset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Known_Rec_Tree_offset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Known_Rec_Tree_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Known_Rec_Tree_offset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::Known_Rec_Tree_offset *)new BH::Known_Rec_Tree_offset((BH::process const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rec_Tree_offset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree_offset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Known_Rec_Tree_offset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Known_Rec_Tree_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Known_Rec_Tree_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Known_Rec_Tree_offset *)new BH::Known_Rec_Tree_offset((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rec_Tree_offset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree_offset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Known_Rec_Tree_offset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Known_Rec_Tree_offset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Known_Rec_Tree_offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Known_Rec_Tree_offset::Known_Rec_Tree_offset(BH::process const &,size_t)\n"
    "    BH::Known_Rec_Tree_offset::Known_Rec_Tree_offset(BH::process const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_offset_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_offset *arg1 = (BH::Known_Rec_Tree_offset *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_offset_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_offset *arg1 = (BH::Known_Rec_Tree_offset *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_offset_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_offset *arg1 = (BH::Known_Rec_Tree_offset *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_offset_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_offset_eval__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_offset_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_offset_eval__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Known_Rec_Tree_offset_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Known_Rec_Tree_offset::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Known_Rec_Tree_offset::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Known_Rec_Tree_offset::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_offset_get_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_offset *arg1 = (BH::Known_Rec_Tree_offset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Known_Rec_Tree_offset_get_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_offset_get_offset" "', argument " "1"" of type '" "BH::Known_Rec_Tree_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_offset * >(argp1);
  result = (int)(arg1)->get_offset();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Known_Rec_Tree_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_offset *arg1 = (BH::Known_Rec_Tree_offset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_Rec_Tree_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_offset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_Rec_Tree_offset" "', argument " "1"" of type '" "BH::Known_Rec_Tree_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_offset * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_Rec_Tree_offset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_Rec_Tree_offset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Known_Rec_Tree_permutation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Known_Rec_Tree_permutation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Known_Rec_Tree_permutation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Known_Rec_Tree_permutation" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree_permutation" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Known_Rec_Tree_permutation" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Known_Rec_Tree_permutation" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::Known_Rec_Tree_permutation *)new BH::Known_Rec_Tree_permutation((BH::process const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rec_Tree_permutation, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_permutation_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_permutation *arg1 = (BH::Known_Rec_Tree_permutation *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_permutation_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_permutation *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_permutation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_permutation_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_permutation *arg1 = (BH::Known_Rec_Tree_permutation *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_permutation_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_permutation *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_permutation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_permutation_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_permutation *arg1 = (BH::Known_Rec_Tree_permutation *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Known_Rec_Tree_permutation_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "1"" of type '" "BH::Known_Rec_Tree_permutation *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_permutation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rec_Tree_permutation_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_permutation_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_permutation_eval__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_permutation_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Known_Rec_Tree_permutation_eval__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Known_Rec_Tree_permutation_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Known_Rec_Tree_permutation::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Known_Rec_Tree_permutation::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Known_Rec_Tree_permutation::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Known_Rec_Tree_permutation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_permutation *arg1 = (BH::Known_Rec_Tree_permutation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_Rec_Tree_permutation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_permutation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_Rec_Tree_permutation" "', argument " "1"" of type '" "BH::Known_Rec_Tree_permutation *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_permutation * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rec_Tree_permutation_get_perm_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rec_Tree_permutation *arg1 = (BH::Known_Rec_Tree_permutation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Known_Rec_Tree_permutation_get_perm_ind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rec_Tree_permutation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rec_Tree_permutation_get_perm_ind" "', argument " "1"" of type '" "BH::Known_Rec_Tree_permutation *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rec_Tree_permutation * >(argp1);
  result = (std::vector< int,std::allocator< int > > *) &(arg1)->get_perm_ind();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_Rec_Tree_permutation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_Rec_Tree_permutation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Unknown_Rec_Tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Unknown_Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Unknown_Rec_Tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Unknown_Rec_Tree" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unknown_Rec_Tree" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  result = (BH::Unknown_Rec_Tree *)new BH::Unknown_Rec_Tree((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Unknown_Rec_Tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unknown_Rec_Tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Unknown_Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Unknown_Rec_Tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Unknown_Rec_Tree" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unknown_Rec_Tree" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Unknown_Rec_Tree" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Unknown_Rec_Tree" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (BH::Unknown_Rec_Tree *)new BH::Unknown_Rec_Tree((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Unknown_Rec_Tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unknown_Rec_Tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Unknown_Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Unknown_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Unknown_Rec_Tree *)new BH::Unknown_Rec_Tree((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Unknown_Rec_Tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Unknown_Rec_Tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Unknown_Rec_Tree__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Unknown_Rec_Tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Unknown_Rec_Tree__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Unknown_Rec_Tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Unknown_Rec_Tree::Unknown_Rec_Tree(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    BH::Unknown_Rec_Tree::Unknown_Rec_Tree(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,int,int)\n"
    "    BH::Unknown_Rec_Tree::Unknown_Rec_Tree(BH::process const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Unknown_Rec_Tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Unknown_Rec_Tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unknown_Rec_Tree" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unknown_Rec_Tree_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unknown_Rec_Tree_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unknown_Rec_Tree_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unknown_Rec_Tree_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unknown_Rec_Tree_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unknown_Rec_Tree_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_eval" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unknown_Rec_Tree_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unknown_Rec_Tree_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unknown_Rec_Tree_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Unknown_Rec_Tree_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Unknown_Rec_Tree_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Unknown_Rec_Tree_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Unknown_Rec_Tree_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Unknown_Rec_Tree_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Unknown_Rec_Tree::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Unknown_Rec_Tree::eval(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Unknown_Rec_Tree::eval(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Unknown_Rec_Tree::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Unknown_Rec_Tree::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Unknown_Rec_Tree::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_get_shifted_legs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Unknown_Rec_Tree_get_shifted_legs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_get_shifted_legs" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unknown_Rec_Tree_get_shifted_legs" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Unknown_Rec_Tree_get_shifted_legs" "', argument " "3"" of type '" "size_t *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  (arg1)->get_shifted_legs(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_get_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unknown_Rec_Tree_get_i",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_get_i" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  result = (int)(arg1)->get_i();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unknown_Rec_Tree_get_j(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Unknown_Rec_Tree *arg1 = (BH::Unknown_Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unknown_Rec_Tree_get_j",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Unknown_Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unknown_Rec_Tree_get_j" "', argument " "1"" of type '" "BH::Unknown_Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp1);
  result = (int)(arg1)->get_j();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unknown_Rec_Tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Unknown_Rec_Tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Tree_factory_new_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_factory *arg1 = (BH::Tree_factory *) 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_factory_new_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_factory_new_tree" "', argument " "1"" of type '" "BH::Tree_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (BH::Rec_Tree *)(arg1)->new_tree((BH::process const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_factory_new_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_factory *arg1 = (BH::Tree_factory *) 0 ;
  BH::process *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Rec_Tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_factory_new_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_factory_new_tree" "', argument " "1"" of type '" "BH::Tree_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_factory_new_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_factory_new_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (BH::Rec_Tree *)(arg1)->new_tree((BH::process const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_factory_new_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_factory_new_tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_factory_new_tree__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tree_factory_new_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Tree_factory::new_tree(BH::process const &)\n"
    "    BH::Tree_factory::new_tree(BH::process const &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Tree_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Tree_factory")) SWIG_fail;
  result = (BH::Tree_factory *)new BH::Tree_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Tree_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Tree_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_factory *arg1 = (BH::Tree_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Tree_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tree_factory" "', argument " "1"" of type '" "BH::Tree_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tree_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Tree_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::Rec_Tree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__Rec_Tree,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Rec_Tree &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Rec_Tree &""'"); 
  }
  arg2 = reinterpret_cast< BH::Rec_Tree * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::Known_Rec_Tree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__Known_Rec_Tree,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Known_Rec_Tree &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Known_Rec_Tree &""'"); 
  }
  arg2 = reinterpret_cast< BH::Known_Rec_Tree * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::Unknown_Rec_Tree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__Unknown_Rec_Tree,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Unknown_Rec_Tree &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::Unknown_Rec_Tree &""'"); 
  }
  arg2 = reinterpret_cast< BH::Unknown_Rec_Tree * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rec_Tree_WC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Rec_Tree_WC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rec_Tree_WC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rec_Tree_WC" "', argument " "1"" of type '" "BH::Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  result = (BH::Rec_Tree_WC *)new BH::Rec_Tree_WC(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree_WC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rec_Tree_WC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rec_Tree_WC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rec_Tree_WC" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_eval" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_eval__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_eval__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_eval__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_eval__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_eval__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Rec_Tree_WC_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Rec_Tree_WC::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Rec_Tree_WC::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Rec_Tree_WC::eval(BH::eval_param< BH::RVHP > const &)\n"
    "    BH::Rec_Tree_WC::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Rec_Tree_WC::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Rec_Tree_WC::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_get_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_value((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC *arg1 = (BH::Rec_Tree_WC *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_get_value" "', argument " "1"" of type '" "BH::Rec_Tree_WC *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_get_value" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_value(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_get_value(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_get_value__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_get_value__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_get_value__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_get_value__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_get_value__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_get_value__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Rec_Tree_WC_get_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Rec_Tree_WC::get_value(BH::eval_param< BH::R > const &)\n"
    "    BH::Rec_Tree_WC::get_value(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Rec_Tree_WC::get_value(BH::eval_param< BH::RVHP > const &)\n"
    "    BH::Rec_Tree_WC::get_value(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Rec_Tree_WC::get_value(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Rec_Tree_WC::get_value(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *Rec_Tree_WC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rec_Tree_WC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Rec_Tree_WC_factory_new_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC_factory *arg1 = (BH::Rec_Tree_WC_factory *) 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Rec_Tree_WC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rec_Tree_WC_factory_new_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "1"" of type '" "BH::Rec_Tree_WC_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (BH::Rec_Tree_WC *)(arg1)->new_tree((BH::process const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_factory_new_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC_factory *arg1 = (BH::Rec_Tree_WC_factory *) 0 ;
  BH::process *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Rec_Tree_WC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Rec_Tree_WC_factory_new_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "1"" of type '" "BH::Rec_Tree_WC_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rec_Tree_WC_factory_new_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (BH::Rec_Tree_WC *)(arg1)->new_tree((BH::process const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree_WC, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rec_Tree_WC_factory_new_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rec_Tree_WC_factory_new_tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree_WC_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Rec_Tree_WC_factory_new_tree__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Rec_Tree_WC_factory_new_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Rec_Tree_WC_factory::new_tree(BH::process const &)\n"
    "    BH::Rec_Tree_WC_factory::new_tree(BH::process const &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Rec_Tree_WC_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rec_Tree_WC_factory")) SWIG_fail;
  result = (BH::Rec_Tree_WC_factory *)new BH::Rec_Tree_WC_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree_WC_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rec_Tree_WC_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree_WC_factory *arg1 = (BH::Rec_Tree_WC_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rec_Tree_WC_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree_WC_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rec_Tree_WC_factory" "', argument " "1"" of type '" "BH::Rec_Tree_WC_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree_WC_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rec_Tree_WC_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rec_Tree_WC_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BHerror__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHerror *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BHerror")) SWIG_fail;
  result = (BH::BHerror *)new BH::BHerror();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BHerror, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BHerror__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::BHerror *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BHerror",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BHerror" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (BH::BHerror *)new BH::BHerror((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BHerror, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BHerror__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  BH::BHerror *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BHerror",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BHerror" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BHerror" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (BH::BHerror *)new BH::BHerror((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__BHerror, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BHerror(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BHerror__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BHerror__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BHerror__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BHerror'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::BHerror::BHerror()\n"
    "    BH::BHerror::BHerror(char const *)\n"
    "    BH::BHerror::BHerror(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BHerror_display(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHerror *arg1 = (BH::BHerror *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BHerror_display",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHerror, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHerror_display" "', argument " "1"" of type '" "BH::BHerror *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHerror * >(argp1);
  (arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BHerror_set_descr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHerror *arg1 = (BH::BHerror *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BHerror_set_descr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHerror, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BHerror_set_descr" "', argument " "1"" of type '" "BH::BHerror *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHerror * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BHerror_set_descr" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BHerror_set_descr" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_descr((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BHerror(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::BHerror *arg1 = (BH::BHerror *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BHerror",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__BHerror, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BHerror" "', argument " "1"" of type '" "BH::BHerror *""'"); 
  }
  arg1 = reinterpret_cast< BH::BHerror * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BHerror_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__BHerror, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_part_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< BH::plabel > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:part_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_add" "', argument " "1"" of type '" "BH::part *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_add" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__plabel,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "part_add" "', argument " "3"" of type '" "BH::plabel""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "part_add" "', argument " "3"" of type '" "BH::plabel""'");
    } else {
      BH::plabel * temp = reinterpret_cast< BH::plabel * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->add(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_np(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_np",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_np" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = ((BH::part const *)arg1)->np();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_nc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_nc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_nc" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = ((BH::part const *)arg1)->nc();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_corner_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:part_corner_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_corner_size" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_corner_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::part const *)arg1)->corner_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_corner_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:part_corner_ind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_corner_ind" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_corner_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "part_corner_ind" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((BH::part const *)arg1)->corner_ind(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:part_c",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_c" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_c" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::vector< BH::plabel,std::allocator< BH::plabel > > *) &((BH::part const *)arg1)->c(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_set_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  size_t arg2 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:part_set_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_set_corner" "', argument " "1"" of type '" "BH::part *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_set_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "part_set_corner" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "part_set_corner" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp3);
  (arg1)->set_corner(arg2,(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_set_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:part_set_code",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_set_code" "', argument " "1"" of type '" "BH::part *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part_set_code" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_code(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_get_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_get_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_get_code" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = (int)((BH::part const *)arg1)->get_code();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_extern_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_extern_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_extern_process" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = (BH::process *) &((BH::part const *)arg1)->extern_process();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_part__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_part")) SWIG_fail;
  result = (BH::part *)new BH::part();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_part__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_part",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_part" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (BH::part *)new BH::part(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_part(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_part__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_part__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_part'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::part::part()\n"
    "    BH::part::part(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_part" "', argument " "1"" of type '" "BH::part *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< BH::plabel,std::allocator< BH::plabel > >,std::allocator< std::vector< BH::plabel,std::allocator< BH::plabel > > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_begin" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = ((BH::part const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new BH::part::const_iterator(static_cast< const BH::part::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< BH::plabel,std::allocator< BH::plabel > >,std::allocator< std::vector< BH::plabel,std::allocator< BH::plabel > > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_end" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = ((BH::part const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new BH::part::const_iterator(static_cast< const BH::part::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:part_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part_size" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  result = ((BH::part const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_part___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = (BH::part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:part___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "part___getitem__" "', argument " "1"" of type '" "BH::part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "part___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (std::vector< BH::plabel,std::allocator< BH::plabel > > *) &((BH::part const *)arg1)->operator [](arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *part_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__part, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::part const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  result = (bool)BH::operator <((BH::part const &)*arg1,(BH::part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  result = (bool)BH::operator ==((BH::part const &)*arg1,(BH::part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splits4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:splits4",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "splits4" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = BH::splits4(arg1);
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >(static_cast< const std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splits2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:splits2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "splits2" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = BH::splits2(arg1);
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >(static_cast< const std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splits1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:splits1",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "splits1" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = BH::splits1(arg1);
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >(static_cast< const std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  size_t arg2 ;
  BH::particle *arg3 = (BH::particle *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:raw_part_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_add" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_add" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__particle, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "raw_part_add" "', argument " "3"" of type '" "BH::particle *""'"); 
  }
  arg3 = reinterpret_cast< BH::particle * >(argp3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "raw_part_add" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  (arg1)->add(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_np(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_part_np",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_np" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  result = ((BH::raw_part const *)arg1)->np();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_nc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_part_nc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_nc" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  result = ((BH::raw_part const *)arg1)->nc();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle *,std::allocator< BH::particle * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_c",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_c" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_c" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::vector< BH::particle *,std::allocator< BH::particle * > > *) &((BH::raw_part const *)arg1)->c(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle *,std::allocator< BH::particle * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_corner" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_corner" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::vector< BH::particle *,std::allocator< BH::particle * > > *) &((BH::raw_part const *)arg1)->corner(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_ind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_ind" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((BH::raw_part const *)arg1)->ind(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_indices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_indices" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_indices" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((BH::raw_part const *)arg1)->indices(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::raw_part result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:raw_part_open",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_open" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_open" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raw_part_open" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "raw_part_open" "', argument " "4"" of type '" "bool &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "raw_part_open" "', argument " "4"" of type '" "bool &""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  result = (arg1)->open(arg2,arg3,*arg4);
  resultobj = SWIG_NewPointerObj((new BH::raw_part(static_cast< const BH::raw_part& >(result))), SWIGTYPE_p_BH__raw_part, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_set_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_set_code",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_set_code" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_set_code" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_code(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_get_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_part_get_code",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_get_code" "', argument " "1"" of type '" "BH::raw_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  result = (int)((BH::raw_part const *)arg1)->get_code();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_part__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_raw_part")) SWIG_fail;
  result = (BH::raw_part *)new BH::raw_part();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_part__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::raw_part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_raw_part",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_raw_part" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (BH::raw_part *)new BH::raw_part(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_part(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_raw_part__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_raw_part__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_raw_part'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::raw_part::raw_part()\n"
    "    BH::raw_part::raw_part(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_raw_part_add_hel_cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_add_hel_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_add_hel_cut" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_part_add_hel_cut" "', argument " "2"" of type '" "BH::cutD *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  (arg1)->add_hel_cut(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_nbr_hel_cuts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_part_nbr_hel_cuts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_nbr_hel_cuts" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  result = (arg1)->nbr_hel_cuts();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_part_hel_cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_part_hel_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_part_hel_cut" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_part_hel_cut" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::cutD *)(arg1)->hel_cut(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_raw_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_raw_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_part, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_raw_part" "', argument " "1"" of type '" "BH::raw_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *raw_part_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__raw_part, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_raw_box_add_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  raw_triangle *arg2 = (raw_triangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_box_add_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_box_add_parent" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_box_add_parent" "', argument " "2"" of type '" "raw_triangle *""'"); 
  }
  arg2 = reinterpret_cast< raw_triangle * >(argp2);
  (arg1)->add_parent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_box_add_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  raw_triangle *arg2 = (raw_triangle *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:raw_box_add_parent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_box_add_parent" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_box_add_parent" "', argument " "2"" of type '" "raw_triangle *""'"); 
  }
  arg2 = reinterpret_cast< raw_triangle * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raw_box_add_parent" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_parent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_box_add_parent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_raw_triangle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_raw_box_add_parent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_raw_triangle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_raw_box_add_parent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'raw_box_add_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::raw_box::add_parent(raw_triangle *)\n"
    "    BH::raw_box::add_parent(raw_triangle *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_raw_box_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  raw_triangle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_box_get_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_box_get_parent" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_box_get_parent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (raw_triangle *)(arg1)->get_parent(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_raw_triangle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_box_get_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_box_get_closed_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_box_get_closed_corner" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_box_get_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_closed_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_box_parents_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_box_parents_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_box_parents_nbr" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  result = (arg1)->parents_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::raw_box *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_raw_box",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__raw_part,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_raw_box" "', argument " "1"" of type '" "BH::raw_part""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_raw_box" "', argument " "1"" of type '" "BH::raw_part""'");
    } else {
      BH::raw_part * temp = reinterpret_cast< BH::raw_part * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::raw_box *)new BH::raw_box(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_box, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_raw_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_box *arg1 = (BH::raw_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_raw_box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_box, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_raw_box" "', argument " "1"" of type '" "BH::raw_box *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_box * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *raw_box_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__raw_box, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_raw_triangle_add_daughter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  BH::raw_box *arg2 = (BH::raw_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_add_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_add_daughter" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_triangle_add_daughter" "', argument " "2"" of type '" "BH::raw_box *""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_box * >(argp2);
  (arg1)->add_daughter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_add_daughter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  BH::raw_box *arg2 = (BH::raw_box *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:raw_triangle_add_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_add_daughter" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__raw_box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_triangle_add_daughter" "', argument " "2"" of type '" "BH::raw_box *""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_box * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raw_triangle_add_daughter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_add_daughter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__raw_box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_raw_triangle_add_daughter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__raw_box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_raw_triangle_add_daughter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'raw_triangle_add_daughter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::raw_triangle::add_daughter(BH::raw_box *)\n"
    "    BH::raw_triangle::add_daughter(BH::raw_box *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_raw_triangle_add_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  raw_bubble *arg2 = (raw_bubble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_add_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_add_parent" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_triangle_add_parent" "', argument " "2"" of type '" "raw_bubble *""'"); 
  }
  arg2 = reinterpret_cast< raw_bubble * >(argp2);
  (arg1)->add_parent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_add_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  raw_bubble *arg2 = (raw_bubble *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:raw_triangle_add_parent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_add_parent" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_triangle_add_parent" "', argument " "2"" of type '" "raw_bubble *""'"); 
  }
  arg2 = reinterpret_cast< raw_bubble * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raw_triangle_add_parent" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_parent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_add_parent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_raw_bubble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_raw_triangle_add_parent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_raw_bubble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_raw_triangle_add_parent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'raw_triangle_add_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::raw_triangle::add_parent(raw_bubble *)\n"
    "    BH::raw_triangle::add_parent(raw_bubble *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_raw_triangle_get_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::raw_box *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_get_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_get_daughter" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_triangle_get_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::raw_box *)(arg1)->get_daughter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_box, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  raw_bubble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_get_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_get_parent" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_triangle_get_parent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (raw_bubble *)(arg1)->get_parent(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_raw_bubble, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_get_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_get_opened_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_get_opened_corner" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_triangle_get_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_opened_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_get_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_triangle_get_closed_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_get_closed_corner" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_triangle_get_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_closed_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_daughters_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_triangle_daughters_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_daughters_nbr" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  result = (arg1)->daughters_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_triangle_parents_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_triangle_parents_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_triangle_parents_nbr" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  result = (arg1)->parents_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::raw_triangle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_raw_triangle",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__raw_part,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_raw_triangle" "', argument " "1"" of type '" "BH::raw_part""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_raw_triangle" "', argument " "1"" of type '" "BH::raw_part""'");
    } else {
      BH::raw_part * temp = reinterpret_cast< BH::raw_part * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::raw_triangle *)new BH::raw_triangle(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_triangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_raw_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_triangle *arg1 = (BH::raw_triangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_raw_triangle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_triangle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_raw_triangle" "', argument " "1"" of type '" "BH::raw_triangle *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_triangle * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *raw_triangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__raw_triangle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_raw_bubble_add_daughter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  BH::raw_triangle *arg2 = (BH::raw_triangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_bubble_add_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_bubble_add_daughter" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_bubble_add_daughter" "', argument " "2"" of type '" "BH::raw_triangle *""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_triangle * >(argp2);
  (arg1)->add_daughter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_bubble_add_daughter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  BH::raw_triangle *arg2 = (BH::raw_triangle *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:raw_bubble_add_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_bubble_add_daughter" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "raw_bubble_add_daughter" "', argument " "2"" of type '" "BH::raw_triangle *""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_triangle * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raw_bubble_add_daughter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_bubble_add_daughter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_bubble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_raw_bubble_add_daughter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__raw_bubble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__raw_triangle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_raw_bubble_add_daughter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'raw_bubble_add_daughter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::raw_bubble::add_daughter(BH::raw_triangle *)\n"
    "    BH::raw_bubble::add_daughter(BH::raw_triangle *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_raw_bubble_get_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::raw_triangle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_bubble_get_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_bubble_get_daughter" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_bubble_get_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::raw_triangle *)(arg1)->get_daughter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_triangle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_bubble_get_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:raw_bubble_get_opened_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_bubble_get_opened_corner" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raw_bubble_get_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_opened_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raw_bubble_daughters_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:raw_bubble_daughters_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "raw_bubble_daughters_nbr" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  result = (arg1)->daughters_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_raw_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::raw_bubble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_raw_bubble",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__raw_part,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_raw_bubble" "', argument " "1"" of type '" "BH::raw_part""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_raw_bubble" "', argument " "1"" of type '" "BH::raw_part""'");
    } else {
      BH::raw_part * temp = reinterpret_cast< BH::raw_part * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::raw_bubble *)new BH::raw_bubble(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_bubble, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_raw_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_bubble *arg1 = (BH::raw_bubble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_raw_bubble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__raw_bubble, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_raw_bubble" "', argument " "1"" of type '" "BH::raw_bubble *""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_bubble * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *raw_bubble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__raw_bubble, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::raw_part arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__raw_part,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::raw_part""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::raw_part""'");
    } else {
      BH::raw_part * temp = reinterpret_cast< BH::raw_part * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &BH::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = 0 ;
  BH::raw_part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__raw_part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::raw_part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::raw_part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__raw_part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::raw_part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::raw_part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_part * >(argp2);
  result = (bool)BH::operator <((BH::raw_part const &)*arg1,(BH::raw_part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::raw_part *arg1 = 0 ;
  BH::raw_part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__raw_part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::raw_part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::raw_part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::raw_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__raw_part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::raw_part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::raw_part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_part * >(argp2);
  result = (bool)BH::operator ==((BH::raw_part const &)*arg1,(BH::raw_part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry_factor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::symmetry_factor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_symmetry_factor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_symmetry_factor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_symmetry_factor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::symmetry_factor *)new BH::symmetry_factor(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__symmetry_factor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry_factor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::symmetry_factor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_symmetry_factor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_symmetry_factor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (BH::symmetry_factor *)new BH::symmetry_factor(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__symmetry_factor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry_factor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::symmetry_factor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_symmetry_factor")) SWIG_fail;
  result = (BH::symmetry_factor *)new BH::symmetry_factor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__symmetry_factor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry_factor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_symmetry_factor__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_symmetry_factor__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_symmetry_factor__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_symmetry_factor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::symmetry_factor::symmetry_factor(int,int)\n"
    "    BH::symmetry_factor::symmetry_factor(int)\n"
    "    BH::symmetry_factor::symmetry_factor()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_symmetry_factor_get_num(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::symmetry_factor *arg1 = (BH::symmetry_factor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:symmetry_factor_get_num",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__symmetry_factor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_factor_get_num" "', argument " "1"" of type '" "BH::symmetry_factor const *""'"); 
  }
  arg1 = reinterpret_cast< BH::symmetry_factor * >(argp1);
  result = (int)((BH::symmetry_factor const *)arg1)->get_num();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_factor_get_den(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::symmetry_factor *arg1 = (BH::symmetry_factor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:symmetry_factor_get_den",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__symmetry_factor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_factor_get_den" "', argument " "1"" of type '" "BH::symmetry_factor const *""'"); 
  }
  arg1 = reinterpret_cast< BH::symmetry_factor * >(argp1);
  result = (int)((BH::symmetry_factor const *)arg1)->get_den();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_symmetry_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::symmetry_factor *arg1 = (BH::symmetry_factor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_symmetry_factor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__symmetry_factor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_symmetry_factor" "', argument " "1"" of type '" "BH::symmetry_factor *""'"); 
  }
  arg1 = reinterpret_cast< BH::symmetry_factor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *symmetry_factor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__symmetry_factor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cutD_l(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::particle_ID result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_l",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_l" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cutD_l" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((BH::cutD const *)arg1)->l(arg2);
  resultobj = SWIG_NewPointerObj((new BH::particle_ID(static_cast< const BH::particle_ID& >(result))), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  BH::particle_ID *arg4 = 0 ;
  bool *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< BH::cutD > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:cutD_open",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_open" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cutD_open" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cutD_open" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "cutD_open" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cutD_open" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  arg4 = reinterpret_cast< BH::particle_ID * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "cutD_open" "', argument " "5"" of type '" "bool &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cutD_open" "', argument " "5"" of type '" "bool &""'"); 
  }
  arg5 = reinterpret_cast< bool * >(argp5);
  result = (arg1)->open(arg2,arg3,(BH::particle_ID const &)*arg4,*arg5);
  resultobj = SWIG_NewPointerObj((new BH::cutD(static_cast< const BH::cutD& >(result))), SWIGTYPE_p_BH__cutD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cutD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_cutD",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cutD" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  result = (BH::cutD *)new BH::cutD((BH::part const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cutD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  BH::particle_ID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_cutD",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  arg3 = reinterpret_cast< BH::particle_ID * >(argp3);
  result = (BH::cutD *)new BH::cutD((BH::part const &)*arg1,(BH::particle_ID const &)*arg2,(BH::particle_ID const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cutD__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  BH::particle_ID *arg3 = 0 ;
  BH::particle_ID *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_cutD",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  arg3 = reinterpret_cast< BH::particle_ID * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cutD" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  arg4 = reinterpret_cast< BH::particle_ID * >(argp4);
  result = (BH::cutD *)new BH::cutD((BH::part const &)*arg1,(BH::particle_ID const &)*arg2,(BH::particle_ID const &)*arg3,(BH::particle_ID const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cutD__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::particle_ID *arg2 = 0 ;
  BH::particle_ID *arg3 = 0 ;
  BH::particle_ID *arg4 = 0 ;
  BH::particle_ID *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_cutD",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "2"" of type '" "BH::particle_ID const &""'"); 
  }
  arg2 = reinterpret_cast< BH::particle_ID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "3"" of type '" "BH::particle_ID const &""'"); 
  }
  arg3 = reinterpret_cast< BH::particle_ID * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_cutD" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "4"" of type '" "BH::particle_ID const &""'"); 
  }
  arg4 = reinterpret_cast< BH::particle_ID * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_cutD" "', argument " "5"" of type '" "BH::particle_ID const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_cutD" "', argument " "5"" of type '" "BH::particle_ID const &""'"); 
  }
  arg5 = reinterpret_cast< BH::particle_ID * >(argp5);
  result = (BH::cutD *)new BH::cutD((BH::part const &)*arg1,(BH::particle_ID const &)*arg2,(BH::particle_ID const &)*arg3,(BH::particle_ID const &)*arg4,(BH::particle_ID const &)*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cutD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_cutD__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_cutD__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_cutD__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__particle_ID, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_cutD__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_cutD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cutD::cutD(BH::part const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    BH::cutD::cutD(BH::part const &,BH::particle_ID const &,BH::particle_ID const &)\n"
    "    BH::cutD::cutD(BH::part const &,BH::particle_ID const &,BH::particle_ID const &,BH::particle_ID const &)\n"
    "    BH::cutD::cutD(BH::part const &,BH::particle_ID const &,BH::particle_ID const &,BH::particle_ID const &,BH::particle_ID const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cutD_is_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cutD_is_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_is_zero" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (bool)(arg1)->is_zero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_c_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  corner_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_c_type",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_c_type" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cutD_c_type" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((BH::cutD const *)arg1)->c_type(arg2);
  resultobj = SWIG_NewPointerObj((new corner_type(static_cast< const corner_type& >(result))), SWIGTYPE_p_corner_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_get_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_get_process",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_get_process" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cutD_get_process" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::process *) &((BH::cutD const *)arg1)->get_process(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_get_process_code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_get_process_code",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_get_process_code" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cutD_get_process_code" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (long)((BH::cutD const *)arg1)->get_process_code(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_get_raw_partition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::raw_part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cutD_get_raw_partition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_get_raw_partition" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::raw_part *)(arg1)->get_raw_partition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__raw_part, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_set_raw_partition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  BH::raw_part *arg2 = (BH::raw_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_set_raw_partition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_set_raw_partition" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__raw_part, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cutD_set_raw_partition" "', argument " "2"" of type '" "BH::raw_part *""'"); 
  }
  arg2 = reinterpret_cast< BH::raw_part * >(argp2);
  (arg1)->set_raw_partition(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_nbr_props(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cutD_nbr_props",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_nbr_props" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (arg1)->nbr_props();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cutD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_cutD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cutD" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_get_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cutD_get_ID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_get_ID" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (long)(arg1)->get_ID();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_get_symmetry_factor_no_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::symmetry_factor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cutD_get_symmetry_factor_no_eval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_get_symmetry_factor_no_eval" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::symmetry_factor *) &((BH::cutD const *)arg1)->get_symmetry_factor_no_eval();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__symmetry_factor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cutD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cutD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pentagonD_add_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  boxD *arg2 = (boxD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_add_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_add_parent" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boxD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_add_parent" "', argument " "2"" of type '" "boxD *""'"); 
  }
  arg2 = reinterpret_cast< boxD * >(argp2);
  (arg1)->add_parent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_add_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  boxD *arg2 = (boxD *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pentagonD_add_parent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_add_parent" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boxD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_add_parent" "', argument " "2"" of type '" "boxD *""'"); 
  }
  arg2 = reinterpret_cast< boxD * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pentagonD_add_parent" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_parent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_add_parent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boxD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pentagonD_add_parent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boxD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pentagonD_add_parent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pentagonD_add_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::pentagonD::add_parent(boxD *)\n"
    "    BH::pentagonD::add_parent(boxD *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pentagonD_clear_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pentagonD_clear_parents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_clear_parents" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  (arg1)->clear_parents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boxD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_get_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_get_parent" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pentagonD_get_parent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (boxD *)(arg1)->get_parent(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boxD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_get_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_get_closed_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_get_closed_corner" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pentagonD_get_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_closed_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_set_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pentagonD_set_closed_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_set_closed_corner" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pentagonD_set_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pentagonD_set_closed_corner" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->set_closed_corner(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_parents_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pentagonD_parents_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_parents_nbr" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  result = (arg1)->parents_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pentagonD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< BH::cutD > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::pentagonD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pentagonD",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pentagonD" "', argument " "1"" of type '" "BH::cutD""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pentagonD" "', argument " "1"" of type '" "BH::cutD""'");
    } else {
      BH::cutD * temp = reinterpret_cast< BH::cutD * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (BH::pentagonD *)new BH::pentagonD(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__pentagonD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pentagonD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pentagonD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pentagonD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pentagonD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pentagonD_eval" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pentagonD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pentagonD_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pentagonD_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pentagonD_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pentagonD_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pentagonD_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pentagonD_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__pentagonD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pentagonD_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pentagonD_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::pentagonD::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::pentagonD::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::pentagonD::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::pentagonD::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::pentagonD::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::pentagonD::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_pentagonD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::pentagonD *arg1 = (BH::pentagonD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pentagonD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__pentagonD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pentagonD" "', argument " "1"" of type '" "BH::pentagonD *""'"); 
  }
  arg1 = reinterpret_cast< BH::pentagonD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pentagonD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__pentagonD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_boxD_add_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  triangleD *arg2 = (triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_add_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_add_parent" "', argument " "1"" of type '" "BH::boxD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_triangleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_add_parent" "', argument " "2"" of type '" "triangleD *""'"); 
  }
  arg2 = reinterpret_cast< triangleD * >(argp2);
  ((BH::boxD const *)arg1)->add_parent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_add_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  triangleD *arg2 = (triangleD *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxD_add_parent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_add_parent" "', argument " "1"" of type '" "BH::boxD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_triangleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_add_parent" "', argument " "2"" of type '" "triangleD *""'"); 
  }
  arg2 = reinterpret_cast< triangleD * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "boxD_add_parent" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ((BH::boxD const *)arg1)->add_parent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_add_parent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_triangleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxD_add_parent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_triangleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_boxD_add_parent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boxD_add_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::boxD::add_parent(triangleD *) const\n"
    "    BH::boxD::add_parent(triangleD *,size_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_boxD_clear_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:boxD_clear_parents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_clear_parents" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  (arg1)->clear_parents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  triangleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_get_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_get_parent" "', argument " "1"" of type '" "BH::boxD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxD_get_parent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (triangleD *)((BH::boxD const *)arg1)->get_parent(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_triangleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_get_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_get_closed_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_get_closed_corner" "', argument " "1"" of type '" "BH::boxD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxD_get_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((BH::boxD const *)arg1)->get_closed_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_set_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxD_set_closed_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_set_closed_corner" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxD_set_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "boxD_set_closed_corner" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->set_closed_corner(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_parents_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:boxD_parents_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_parents_nbr" "', argument " "1"" of type '" "BH::boxD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  result = ((BH::boxD const *)arg1)->parents_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boxD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::boxD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_boxD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_boxD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_boxD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::boxD *)new BH::boxD((BH::cutD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__boxD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxD_eval" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxD_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxD_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxD_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxD_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxD_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxD_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__boxD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxD_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boxD_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::boxD::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::boxD::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::boxD::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::boxD::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::boxD::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::boxD::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_boxD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = (BH::boxD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_boxD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__boxD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boxD" "', argument " "1"" of type '" "BH::boxD *""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *boxD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__boxD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_triangleD_add_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  bubbleD *arg2 = (bubbleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_add_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_add_parent" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_add_parent" "', argument " "2"" of type '" "bubbleD *""'"); 
  }
  arg2 = reinterpret_cast< bubbleD * >(argp2);
  (arg1)->add_parent(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_add_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  bubbleD *arg2 = (bubbleD *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_add_parent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_add_parent" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_add_parent" "', argument " "2"" of type '" "bubbleD *""'"); 
  }
  arg2 = reinterpret_cast< bubbleD * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "triangleD_add_parent" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_parent(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_add_parent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bubbleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleD_add_parent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bubbleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_triangleD_add_parent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleD_add_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::triangleD::add_parent(bubbleD *)\n"
    "    BH::triangleD::add_parent(bubbleD *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleD_clear_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleD_clear_parents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_clear_parents" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  (arg1)->clear_parents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_add_daughter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::boxD *arg2 = (BH::boxD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_add_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_add_daughter" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_add_daughter" "', argument " "2"" of type '" "BH::boxD *""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  (arg1)->add_daughter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_add_daughter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::boxD *arg2 = (BH::boxD *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_add_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_add_daughter" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__boxD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_add_daughter" "', argument " "2"" of type '" "BH::boxD *""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "triangleD_add_daughter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_add_daughter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__boxD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleD_add_daughter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__boxD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_triangleD_add_daughter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleD_add_daughter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::triangleD::add_daughter(BH::boxD *)\n"
    "    BH::triangleD::add_daughter(BH::boxD *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleD_clear_daughters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleD_clear_daughters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_clear_daughters" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  (arg1)->clear_daughters();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bubbleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_get_parent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_get_parent" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_get_parent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (bubbleD *)(arg1)->get_parent(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bubbleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_get_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::boxD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_get_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_get_daughter" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_get_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::boxD *)(arg1)->get_daughter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__boxD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_parents_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleD_parents_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_parents_nbr" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  result = (arg1)->parents_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_daughters_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleD_daughters_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_daughters_nbr" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  result = (arg1)->daughters_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_eval" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleD_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleD_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleD_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleD_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleD_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__triangleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleD_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleD_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::triangleD::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::triangleD::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::triangleD::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::triangleD::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::triangleD::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::triangleD::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleD_get_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_get_opened_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_get_opened_corner" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_get_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_opened_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_get_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleD_get_closed_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_get_closed_corner" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_get_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_closed_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_set_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_set_opened_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_set_opened_corner" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_set_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "triangleD_set_opened_corner" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->set_opened_corner(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleD_set_closed_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleD_set_closed_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleD_set_closed_corner" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleD_set_closed_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "triangleD_set_closed_corner" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->set_closed_corner(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_triangleD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::triangleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_triangleD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_triangleD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_triangleD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::triangleD *)new BH::triangleD((BH::cutD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__triangleD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_triangleD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_triangleD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__triangleD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_triangleD" "', argument " "1"" of type '" "BH::triangleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *triangleD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__triangleD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_bubbleD_add_daughter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::triangleD *arg2 = (BH::triangleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_add_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_add_daughter" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_add_daughter" "', argument " "2"" of type '" "BH::triangleD *""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  (arg1)->add_daughter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_add_daughter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::triangleD *arg2 = (BH::triangleD *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleD_add_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_add_daughter" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__triangleD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_add_daughter" "', argument " "2"" of type '" "BH::triangleD *""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bubbleD_add_daughter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->add_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_add_daughter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__triangleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleD_add_daughter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__triangleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_bubbleD_add_daughter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bubbleD_add_daughter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::bubbleD::add_daughter(BH::triangleD *)\n"
    "    BH::bubbleD::add_daughter(BH::triangleD *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bubbleD_clear_daughters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bubbleD_clear_daughters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_clear_daughters" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  (arg1)->clear_daughters();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_get_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::triangleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_get_daughter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_get_daughter" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleD_get_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::triangleD *)(arg1)->get_daughter(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__triangleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_daughters_nbr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bubbleD_daughters_nbr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_daughters_nbr" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  result = (arg1)->daughters_nbr();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_get_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_get_opened_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_get_opened_corner" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleD_get_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_opened_corner(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_set_opened_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleD_set_opened_corner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_set_opened_corner" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleD_set_opened_corner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bubbleD_set_opened_corner" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->set_opened_corner(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bubbleD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::bubbleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_bubbleD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bubbleD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bubbleD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::bubbleD *)new BH::bubbleD((BH::cutD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__bubbleD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleD_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleD_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_eval" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleD_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleD_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleD_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleD_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleD_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleD_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__bubbleD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleD_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bubbleD_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::bubbleD::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::bubbleD::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::bubbleD::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::bubbleD::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::bubbleD::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::bubbleD::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_bubbleD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bubbleD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bubbleD" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleD_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = (BH::bubbleD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bubbleD_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleD_get_accuracy" "', argument " "1"" of type '" "BH::bubbleD *""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bubbleD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__bubbleD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::pentagonD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__pentagonD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::pentagonD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::pentagonD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::pentagonD * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::pentagonD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::boxD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__boxD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::boxD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::triangleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__triangleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::triangleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::bubbleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__bubbleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::bubbleD * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::bubbleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  BH::cutD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)BH::operator <((BH::cutD const &)*arg1,(BH::cutD const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  BH::cutD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)BH::operator ==((BH::cutD const &)*arg1,(BH::cutD const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__plabel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__plabel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__cutD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__raw_part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__raw_part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_4(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_cutD_factory_new_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD_factory *arg1 = (BH::cutD_factory *) 0 ;
  BH::boxD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::boxD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_factory_new_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_factory_new_box" "', argument " "1"" of type '" "BH::cutD_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__boxD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cutD_factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cutD_factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  result = (BH::boxD *)(arg1)->new_box((BH::boxD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__boxD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_factory_new_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD_factory *arg1 = (BH::cutD_factory *) 0 ;
  BH::triangleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::triangleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_factory_new_triangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_factory_new_triangle" "', argument " "1"" of type '" "BH::cutD_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__triangleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cutD_factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cutD_factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  result = (BH::triangleD *)(arg1)->new_triangle((BH::triangleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__triangleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cutD_factory_new_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD_factory *arg1 = (BH::cutD_factory *) 0 ;
  BH::bubbleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::bubbleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cutD_factory_new_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cutD_factory_new_bubble" "', argument " "1"" of type '" "BH::cutD_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__bubbleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cutD_factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cutD_factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::bubbleD * >(argp2);
  result = (BH::bubbleD *)(arg1)->new_bubble((BH::bubbleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_cutD_factory_default_CF_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__cutD_factory,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::cutD_factory::default_CF""' of type '""BH::cutD_factory *""'");
    }
    BH::cutD_factory::default_CF = reinterpret_cast< BH::cutD_factory * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_cutD_factory_default_CF_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(BH::cutD_factory::default_CF), SWIGTYPE_p_BH__cutD_factory,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_cutD_factory_default_CF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_cutD_factory_default_CF_get();
}


SWIGINTERN PyObject *_wrap_cutD_factory_default_CF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_cutD_factory_default_CF_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_delete_cutD_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD_factory *arg1 = (BH::cutD_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_cutD_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cutD_factory" "', argument " "1"" of type '" "BH::cutD_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cutD_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cutD_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DWbox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::boxD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DWbox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__boxD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DWbox" "', argument " "1"" of type '" "BH::boxD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DWbox" "', argument " "1"" of type '" "BH::boxD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::boxD * >(argp1);
  result = (BH::cut::Darren::Darren_wrapper< BH::boxD > *)new BH::cut::Darren::Darren_wrapper< BH::boxD >((BH::boxD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::R > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbox_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbox_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RVHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbox_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::R > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbox_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::R > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::R > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbox_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RVHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbox_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbox_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RVHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_eval_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbox_eval_tree__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbox_eval_tree__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbox_eval_tree__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbox_eval_tree__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbox_eval_tree__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbox_eval_tree__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DWbox_eval_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::boxD >::eval_tree(int,BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DWbox_corner_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DWbox_corner_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_corner_size" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_corner_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::boxD > const *)arg1)->corner_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbox_corner_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbox_corner_ind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbox_corner_ind" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbox_corner_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DWbox_corner_ind" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::boxD > const *)arg1)->corner_ind(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DWbox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::boxD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::boxD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DWbox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DWbox" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::boxD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::boxD > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DWbox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DWtriangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::triangleD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DWtriangle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__triangleD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DWtriangle" "', argument " "1"" of type '" "BH::triangleD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DWtriangle" "', argument " "1"" of type '" "BH::triangleD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::triangleD * >(argp1);
  result = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *)new BH::cut::Darren::Darren_wrapper< BH::triangleD >((BH::triangleD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::R > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RVHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::R > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::R > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::R > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RVHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWtriangle_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWtriangle_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RVHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_eval_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWtriangle_eval_tree__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWtriangle_eval_tree__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWtriangle_eval_tree__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWtriangle_eval_tree__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWtriangle_eval_tree__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWtriangle_eval_tree__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DWtriangle_eval_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::triangleD >::eval_tree(int,BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DWtriangle_corner_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DWtriangle_corner_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_corner_size" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_corner_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::triangleD > const *)arg1)->corner_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWtriangle_corner_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWtriangle_corner_ind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWtriangle_corner_ind" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWtriangle_corner_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DWtriangle_corner_ind" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::triangleD > const *)arg1)->corner_ind(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DWtriangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::triangleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DWtriangle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DWtriangle" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::triangleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::triangleD > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DWtriangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DWbubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::bubbleD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DWbubble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__bubbleD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DWbubble" "', argument " "1"" of type '" "BH::bubbleD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DWbubble" "', argument " "1"" of type '" "BH::bubbleD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::bubbleD * >(argp1);
  result = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *)new BH::cut::Darren::Darren_wrapper< BH::bubbleD >((BH::bubbleD const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::R > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbubble_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbubble_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::momentum_configuration< BH::RVHP > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DWbubble_eval_tree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->eval_tree(arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::R > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbubble_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::R > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::R > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbubble_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  BH::eval_param< BH::RVHP > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbubble_eval_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_eval_tree" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_eval_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DWbubble_eval_tree" "', argument " "3"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp3);
  result = (arg1)->eval_tree(arg2,(BH::eval_param< BH::RVHP > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_eval_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbubble_eval_tree__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbubble_eval_tree__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DWbubble_eval_tree__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbubble_eval_tree__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbubble_eval_tree__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DWbubble_eval_tree__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DWbubble_eval_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::Darren_wrapper< BH::bubbleD >::eval_tree(int,BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DWbubble_corner_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DWbubble_corner_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_corner_size" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_corner_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::bubbleD > const *)arg1)->corner_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DWbubble_corner_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DWbubble_corner_ind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DWbubble_corner_ind" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DWbubble_corner_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DWbubble_corner_ind" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((BH::cut::Darren::Darren_wrapper< BH::bubbleD > const *)arg1)->corner_ind(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DWbubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::Darren_wrapper< BH::bubbleD > *arg1 = (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DWbubble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DWbubble" "', argument " "1"" of type '" "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::Darren_wrapper< BH::bubbleD > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DWbubble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_boxDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_boxDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boxDarren" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxDarren_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxDarren_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boxDarren_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxDarren_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxDarren_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxDarren_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boxDarren_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_boxDarren_set_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxDarren_set_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxDarren_set_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_set_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_set_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxDarren_set_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->set_eval(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_set_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_boxDarren_set_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxDarren_set_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boxDarren_set_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::set_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::set_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_boxDarren_is_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boxDarren_is_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxDarren_is_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boxDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boxDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->is_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_is_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_is_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxDarren_is_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (bool)(arg1)->is_eval(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_is_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_boxDarren_is_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boxDarren_is_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boxDarren_is_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::is_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 >::is_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_boxDarren_get_kleg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boxDarren_get_kleg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_get_kleg" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boxDarren_get_kleg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *)arg1)->get_kleg(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_get_masslessleg_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:boxDarren_get_masslessleg_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_get_masslessleg_type" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  result = (int)((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *)arg1)->get_masslessleg_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boxDarren_get_massless_K1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *arg1 = (BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:boxDarren_get_massless_K1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boxDarren_get_massless_K1" "', argument " "1"" of type '" "BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > * >(argp1);
  result = (bool)((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > const *)arg1)->get_massless_K1();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *boxDarren_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_triangleDarren__k1leg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren__k1leg_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k1leg_set" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren__k1leg_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_k1leg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__k1leg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren__k1leg_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k1leg_get" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int) ((arg1)->_k1leg);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__k2leg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren__k2leg_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k2leg_set" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren__k2leg_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_k2leg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__k2leg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren__k2leg_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k2leg_get" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int) ((arg1)->_k2leg);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__k3leg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren__k3leg_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k3leg_set" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren__k3leg_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_k3leg = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__k3leg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren__k3leg_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__k3leg_get" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int) ((arg1)->_k3leg);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__masslessleg_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren__masslessleg_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__masslessleg_type_set" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren__masslessleg_type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_masslessleg_type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__masslessleg_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren__masslessleg_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__masslessleg_type_get" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int) ((arg1)->_masslessleg_type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__reverse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren__reverse_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__reverse_set" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren__reverse_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_reverse = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren__reverse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren__reverse_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren__reverse_get" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int) ((arg1)->_reverse);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_triangleDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_triangleDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_triangleDarren" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleDarren_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleDarren_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_triangleDarren_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleDarren_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg4 = reinterpret_cast< coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp4);
  result = (arg1)->get_sub_terms(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,*arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg4 = reinterpret_cast< coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp4);
  result = (arg1)->get_sub_terms(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,*arg4);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "4"" of type '" "coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg4 = reinterpret_cast< coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp4);
  result = (arg1)->get_sub_terms(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,*arg4);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg3 = reinterpret_cast< coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp3);
  result = (arg1)->get_sub_terms((BH::eval_param< BH::R > const &)*arg2,*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg3 = reinterpret_cast< coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp3);
  result = (arg1)->get_sub_terms((BH::eval_param< BH::RHP > const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_get_sub_terms",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_sub_terms" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_get_sub_terms" "', argument " "3"" of type '" "coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &""'"); 
  }
  arg3 = reinterpret_cast< coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > * >(argp3);
  result = (arg1)->get_sub_terms((BH::eval_param< BH::RVHP > const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_sub_terms(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_get_sub_terms__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_get_sub_terms__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_get_sub_terms__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_triangleDarren_get_sub_terms__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_triangleDarren_get_sub_terms__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_triangleDarren_get_sub_terms__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleDarren_get_sub_terms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &,coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &,coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &,coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::eval_param< BH::R > const &,coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::eval_param< BH::RHP > const &,coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::get_sub_terms(BH::eval_param< BH::RVHP > const &,coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleDarren_set_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_set_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_set_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_set_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_set_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_set_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->set_eval(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_set_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_triangleDarren_set_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_set_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleDarren_set_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::set_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::set_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleDarren_is_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triangleDarren_is_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_is_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triangleDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triangleDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->is_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_is_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_is_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_is_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (bool)(arg1)->is_eval(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_is_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_triangleDarren_is_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_triangleDarren_is_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'triangleDarren_is_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::is_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs >::is_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_kleg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triangleDarren_get_kleg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_kleg" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_get_kleg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > const *)arg1)->get_kleg(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_get_masslessleg_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:triangleDarren_get_masslessleg_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_get_masslessleg_type" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  result = (int)((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > const *)arg1)->get_masslessleg_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triangleDarren_change_klegs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *arg1 = (BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:triangleDarren_change_klegs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triangleDarren_change_klegs" "', argument " "1"" of type '" "BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "triangleDarren_change_klegs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "triangleDarren_change_klegs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "triangleDarren_change_klegs" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->change_klegs(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *triangleDarren_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_bubbleDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bubbleDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bubbleDarren" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleDarren_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleDarren_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bubbleDarren_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleDarren_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleDarren_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleDarren_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bubbleDarren_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_set_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleDarren_set_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleDarren_set_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_set_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_set_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleDarren_set_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_set_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleDarren_set_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->set_eval(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_set_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_bubbleDarren_set_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleDarren_set_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bubbleDarren_set_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::set_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::set_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_is_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  long arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bubbleDarren_is_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleDarren_is_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_is_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->is_eval(arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_is_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bubbleDarren_is_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_is_eval" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bubbleDarren_is_eval" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (bool)(arg1)->is_eval(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_is_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_bubbleDarren_is_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_bubbleDarren_is_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bubbleDarren_is_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::is_eval(long,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs >::is_eval(unsigned long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bubbleDarren_GenIndicesBub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *arg1 = (BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int *,std::allocator< int * > > *arg3 = 0 ;
  std::vector< int *,std::allocator< int * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:bubbleDarren_GenIndicesBub",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bubbleDarren_GenIndicesBub" "', argument " "1"" of type '" "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bubbleDarren_GenIndicesBub" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_GenIndicesBub" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_int_p_std__allocatorT_int_p_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bubbleDarren_GenIndicesBub" "', argument " "3"" of type '" "std::vector< int *,std::allocator< int * > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_GenIndicesBub" "', argument " "3"" of type '" "std::vector< int *,std::allocator< int * > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< int *,std::allocator< int * > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_int_p_std__allocatorT_int_p_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "bubbleDarren_GenIndicesBub" "', argument " "4"" of type '" "std::vector< int *,std::allocator< int * > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bubbleDarren_GenIndicesBub" "', argument " "4"" of type '" "std::vector< int *,std::allocator< int * > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< int *,std::allocator< int * > > * >(argp4);
  (arg1)->GenIndicesBub((std::vector< int,std::allocator< int > > const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *bubbleDarren_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cut_Part_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cut_Part_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cut_Part_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cut_Part_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cut_Part::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Cut_Part::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Cut_Part::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Cut_Part::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Cut_Part::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Cut_Part::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cut_Part_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::boxD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_box" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_box" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::boxD *)(arg1)->box(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__boxD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::triangleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_triangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_triangle" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_triangle" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::triangleD *)(arg1)->triangle(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__triangleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::bubbleD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_bubble" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_bubble" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::bubbleD *)(arg1)->bubble(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__bubbleD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_nbr_boxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_nbr_boxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_nbr_boxes" "', argument " "1"" of type '" "BH::Cut_Part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = ((BH::Cut_Part const *)arg1)->nbr_boxes();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_nbr_triangles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_nbr_triangles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_nbr_triangles" "', argument " "1"" of type '" "BH::Cut_Part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = ((BH::Cut_Part const *)arg1)->nbr_triangles();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_nbr_bubbles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_nbr_bubbles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_nbr_bubbles" "', argument " "1"" of type '" "BH::Cut_Part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = ((BH::Cut_Part const *)arg1)->nbr_bubbles();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::cutD_factory *arg2 = (BH::cutD_factory *) 0 ;
  option *arg3 = (option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cut_Part",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "BH::cutD_factory *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD_factory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_option, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "option *""'"); 
  }
  arg3 = reinterpret_cast< option * >(argp3);
  result = (BH::Cut_Part *)new BH::Cut_Part(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  BH::cutD_factory *arg2 = (BH::cutD_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cut_Part",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "BH::cutD_factory *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD_factory * >(argp2);
  result = (BH::Cut_Part *)new BH::Cut_Part(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cut_Part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = (BH::Cut_Part *)new BH::Cut_Part(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  BH::cutD_factory *arg3 = (BH::cutD_factory *) 0 ;
  option *arg4 = (option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cut_Part",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "BH::cutD_factory *""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD_factory * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part" "', argument " "4"" of type '" "option *""'"); 
  }
  arg4 = reinterpret_cast< option * >(argp4);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  BH::cutD_factory *arg3 = (BH::cutD_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cut_Part",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "BH::cutD_factory *""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD_factory * >(argp3);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cut_Part",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  ordering_constraint *arg3 = 0 ;
  BH::cutD_factory *arg4 = (BH::cutD_factory *) 0 ;
  option *arg5 = (option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Cut_Part",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< ordering_constraint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part" "', argument " "4"" of type '" "BH::cutD_factory *""'"); 
  }
  arg4 = reinterpret_cast< BH::cutD_factory * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_option, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Cut_Part" "', argument " "5"" of type '" "option *""'"); 
  }
  arg5 = reinterpret_cast< option * >(argp5);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,(ordering_constraint const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  ordering_constraint *arg3 = 0 ;
  BH::cutD_factory *arg4 = (BH::cutD_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cut_Part",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< ordering_constraint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__cutD_factory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part" "', argument " "4"" of type '" "BH::cutD_factory *""'"); 
  }
  arg4 = reinterpret_cast< BH::cutD_factory * >(argp4);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,(ordering_constraint const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  ordering_constraint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cut_Part",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "3"" of type '" "ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< ordering_constraint * >(argp3);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,(ordering_constraint const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cut_Part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cut_Part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::Cut_Part *)new BH::Cut_Part((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cut_Part__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cut_Part__SWIG_9(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cut_Part__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cut_Part__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_option, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cut_Part__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ordering_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cut_Part__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cut_Part__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_option, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Cut_Part__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ordering_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Cut_Part__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ordering_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__cutD_factory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_option, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_Cut_Part__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Cut_Part'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cut_Part::Cut_Part(BH::Cut_Part *,BH::cutD_factory *,option *)\n"
    "    BH::Cut_Part::Cut_Part(BH::Cut_Part *,BH::cutD_factory *)\n"
    "    BH::Cut_Part::Cut_Part(BH::Cut_Part *)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::cutD_factory *,option *)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::cutD_factory *)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,ordering_constraint const &,BH::cutD_factory *,option *)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,ordering_constraint const &,BH::cutD_factory *)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,ordering_constraint const &)\n"
    "    BH::Cut_Part::Cut_Part(BH::process const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Cut_Part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cut_Part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cut_Part" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_set_bubble_eval_daughter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  size_t arg2 ;
  BH::computable< std::complex > *arg3 = (BH::computable< std::complex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_set_bubble_eval_daughter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_set_bubble_eval_daughter" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_set_bubble_eval_daughter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_set_bubble_eval_daughter" "', argument " "3"" of type '" "BH::computable< std::complex > *""'"); 
  }
  arg3 = reinterpret_cast< BH::computable< std::complex > * >(argp3);
  (arg1)->set_bubble_eval_daughter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_eval_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::computable< std::complex > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_eval_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_eval_bubble" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_eval_bubble" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::computable< std::complex > *)(arg1)->eval_bubble(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__computableT_std__complex_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_get_accuracy" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_get_conjugate_cut_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_get_conjugate_cut_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_get_conjugate_cut_part" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = (arg1)->get_conjugate_cut_part();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_get_conjugate_cut_part_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_get_conjugate_cut_part_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_get_conjugate_cut_part_HP" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = (arg1)->get_conjugate_cut_part_HP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_get_conjugate_cut_part_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_get_conjugate_cut_part_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_get_conjugate_cut_part_VHP" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  result = (arg1)->get_conjugate_cut_part_VHP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cut_Part_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Cut_Part, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CutPartFactory_new_cut_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut_part_factory< Cut_Part_base > *arg1 = (BH::cut_part_factory< Cut_Part_base > *) 0 ;
  BH::process *arg2 = 0 ;
  BH::color_structure arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::cut_part_factory< Cut_Part_base >::Cut_Part_Type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CutPartFactory_new_cut_part",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CutPartFactory_new_cut_part" "', argument " "1"" of type '" "BH::cut_part_factory< Cut_Part_base > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut_part_factory< Cut_Part_base > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CutPartFactory_new_cut_part" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CutPartFactory_new_cut_part" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CutPartFactory_new_cut_part" "', argument " "3"" of type '" "BH::color_structure""'");
  } 
  arg3 = static_cast< BH::color_structure >(val3);
  result = (BH::cut_part_factory< Cut_Part_base >::Cut_Part_Type *)(arg1)->new_cut_part((BH::process const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CutPartFactory_s_default_cut_part_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cut_part_factory< Cut_Part_base > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CutPartFactory_s_default_cut_part_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CutPartFactory_s_default_cut_part_factory" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CutPartFactory_s_default_cut_part_factory" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::cut_part_factory< Cut_Part_base > *)BH::cut_part_factory< Cut_Part_base >::SWIGTEMPLATEDISAMBIGUATOR s_default_cut_part_factory((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CutPartFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut_part_factory< Cut_Part_base > *arg1 = (BH::cut_part_factory< Cut_Part_base > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CutPartFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CutPartFactory" "', argument " "1"" of type '" "BH::cut_part_factory< Cut_Part_base > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut_part_factory< Cut_Part_base > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CutPartFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Known_cut_part_factory_new_cut_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_cut_part_factory *arg1 = (BH::Known_cut_part_factory *) 0 ;
  BH::process *arg2 = 0 ;
  BH::color_structure arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Cut_Part_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Known_cut_part_factory_new_cut_part",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_cut_part_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_cut_part_factory_new_cut_part" "', argument " "1"" of type '" "BH::Known_cut_part_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_cut_part_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_cut_part_factory_new_cut_part" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_cut_part_factory_new_cut_part" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Known_cut_part_factory_new_cut_part" "', argument " "3"" of type '" "BH::color_structure""'");
  } 
  arg3 = static_cast< BH::color_structure >(val3);
  result = (Cut_Part_base *)(arg1)->new_cut_part((BH::process const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cut_Part_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Known_cut_part_factory_s_default_KCPF_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__Known_cut_part_factory,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Known_cut_part_factory::s_default_KCPF""' of type '""BH::Known_cut_part_factory *""'");
    }
    BH::Known_cut_part_factory::s_default_KCPF = reinterpret_cast< BH::Known_cut_part_factory * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Known_cut_part_factory_s_default_KCPF_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(BH::Known_cut_part_factory::s_default_KCPF), SWIGTYPE_p_BH__Known_cut_part_factory,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Known_cut_part_factory_s_default_KCPF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Known_cut_part_factory_s_default_KCPF_get();
}


SWIGINTERN PyObject *_wrap_Known_cut_part_factory_s_default_KCPF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Known_cut_part_factory_s_default_KCPF_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_delete_Known_cut_part_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_cut_part_factory *arg1 = (BH::Known_cut_part_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_cut_part_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_cut_part_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_cut_part_factory" "', argument " "1"" of type '" "BH::Known_cut_part_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_cut_part_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Known_cut_part_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_cut_part_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Known_cut_part_factory")) SWIG_fail;
  result = (BH::Known_cut_part_factory *)new BH::Known_cut_part_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_cut_part_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_cut_part_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_cut_part_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Rational_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rational_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rational_base" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_base_is_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_base_is_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_base_is_zero" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  result = (bool)(arg1)->is_zero();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_base_get_process(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::process *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_base_get_process",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_base_get_process" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  result = (BH::process *) &(arg1)->get_process();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__process, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_base_dry_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational_base_dry_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_base_dry_run" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational_base_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational_base_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->dry_run((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_base_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_base_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_base_get_accuracy" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_base_getCutPartDDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cut_Part_D_Dims *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_base_getCutPartDDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_base_getCutPartDDim" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  result = (BH::Cut_Part_D_Dims *)BH_Rational_base_getCutPartDDim(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rational_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rational_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RationalFactory_new_rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_factory< BH::Rational_base > *arg1 = (BH::Rational_factory< BH::Rational_base > *) 0 ;
  BH::process *arg2 = 0 ;
  BH::color_structure arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RationalFactory_new_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalFactory_new_rational" "', argument " "1"" of type '" "BH::Rational_factory< BH::Rational_base > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RationalFactory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RationalFactory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RationalFactory_new_rational" "', argument " "3"" of type '" "BH::color_structure""'");
  } 
  arg3 = static_cast< BH::color_structure >(val3);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalFactory_new_rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_factory< BH::Rational_base > *arg1 = (BH::Rational_factory< BH::Rational_base > *) 0 ;
  BH::process *arg2 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg3 = 0 ;
  BH::option *arg4 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RationalFactory_new_rational",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalFactory_new_rational" "', argument " "1"" of type '" "BH::Rational_factory< BH::Rational_base > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RationalFactory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RationalFactory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RationalFactory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RationalFactory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RationalFactory_new_rational" "', argument " "4"" of type '" "BH::option *""'"); 
  }
  arg4 = reinterpret_cast< BH::option * >(argp4);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalFactory_new_rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RationalFactory_new_rational__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__option, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RationalFactory_new_rational__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RationalFactory_new_rational'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Rational_factory< BH::Rational_base >::new_rational(BH::process const &,BH::color_structure)\n"
    "    BH::Rational_factory< BH::Rational_base >::new_rational(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::option *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RationalFactory_default_rational_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_factory< BH::Rational_base > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":RationalFactory_default_rational_factory")) SWIG_fail;
  result = (BH::Rational_factory< BH::Rational_base > *)BH::Rational_factory< BH::Rational_base >::SWIGTEMPLATEDISAMBIGUATOR default_rational_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RationalFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_factory< BH::Rational_base > *arg1 = (BH::Rational_factory< BH::Rational_base > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RationalFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RationalFactory" "', argument " "1"" of type '" "BH::Rational_factory< BH::Rational_base > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RationalFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Known_Rational_factory_new_rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rational_factory *arg1 = (BH::Known_Rational_factory *) 0 ;
  BH::process *arg2 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg3 = 0 ;
  BH::option *arg4 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Known_Rational_factory_new_rational",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rational_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rational_factory_new_rational" "', argument " "1"" of type '" "BH::Known_Rational_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rational_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rational_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rational_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Known_Rational_factory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rational_factory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Known_Rational_factory_new_rational" "', argument " "4"" of type '" "BH::option *""'"); 
  }
  arg4 = reinterpret_cast< BH::option * >(argp4);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rational_factory_new_rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rational_factory *arg1 = (BH::Known_Rational_factory *) 0 ;
  BH::process *arg2 = 0 ;
  BH::color_structure arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Known_Rational_factory_new_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rational_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Known_Rational_factory_new_rational" "', argument " "1"" of type '" "BH::Known_Rational_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rational_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Known_Rational_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Known_Rational_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Known_Rational_factory_new_rational" "', argument " "3"" of type '" "BH::color_structure""'");
  } 
  arg3 = static_cast< BH::color_structure >(val3);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Known_Rational_factory_new_rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rational_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Known_Rational_factory_new_rational__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Known_Rational_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__option, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Known_Rational_factory_new_rational__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Known_Rational_factory_new_rational'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Known_Rational_factory::new_rational(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::option *)\n"
    "    BH::Known_Rational_factory::new_rational(BH::process const &,BH::color_structure)\n");
  return 0;
}


SWIGINTERN int Swig_var_Known_Rational_factory_s_default_KRF_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::Known_Rational_factory::s_default_KRF""' of type '""BH::Rational_factory< BH::Rational_base > *""'");
    }
    BH::Known_Rational_factory::s_default_KRF = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Known_Rational_factory_s_default_KRF_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(BH::Known_Rational_factory::s_default_KRF), SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Known_Rational_factory_s_default_KRF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Known_Rational_factory_s_default_KRF_get();
}


SWIGINTERN PyObject *_wrap_Known_Rational_factory_s_default_KRF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Known_Rational_factory_s_default_KRF_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_Known_Rational_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rational_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Known_Rational_factory")) SWIG_fail;
  result = (BH::Known_Rational_factory *)new BH::Known_Rational_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Known_Rational_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Known_Rational_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Known_Rational_factory *arg1 = (BH::Known_Rational_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Known_Rational_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Known_Rational_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Known_Rational_factory" "', argument " "1"" of type '" "BH::Known_Rational_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::Known_Rational_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Known_Rational_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Known_Rational_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_rational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_rational__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_rational__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_rational__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OneLoopAmplitude_base_get_rational'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::OneLoopAmplitude_base::get_rational(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_rational(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_rational(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_cut__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_cut__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_cut__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_cut(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_cut__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_cut__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_cut__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OneLoopAmplitude_base_get_cut'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::OneLoopAmplitude_base::get_cut(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_cut(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_cut(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OneLoopAmplitude_base_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_tree__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_tree__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneLoopAmplitude_base_get_tree__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OneLoopAmplitude_base_get_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::OneLoopAmplitude_base::get_tree(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_tree(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::OneLoopAmplitude_base::get_tree(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OneLoopAmplitude_base_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_accuracy" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_conjugate_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OneLoopAmplitude_base_get_conjugate_amplitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_conjugate_amplitude" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  result = (arg1)->get_conjugate_amplitude();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_conjugate_amplitude_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OneLoopAmplitude_base_get_conjugate_amplitude_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_conjugate_amplitude_HP" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  result = (arg1)->get_conjugate_amplitude_HP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_get_conjugate_amplitude_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OneLoopAmplitude_base_get_conjugate_amplitude_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_get_conjugate_amplitude_VHP" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  result = (arg1)->get_conjugate_amplitude_VHP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_set_mu_HP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_mu_HP" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneLoopAmplitude_base_set_mu_HP" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu_HP(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_set_mu_VHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_mu_VHP" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneLoopAmplitude_base_set_mu_VHP" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu_VHP(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  BH::R arg2 ;
  BH::RHP arg3 ;
  BH::RVHP arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OneLoopAmplitude_base_set_mu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "2"" of type '" "BH::R""'");
  } 
  arg2 = static_cast< BH::R >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "3"" of type '" "BH::RHP""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "3"" of type '" "BH::RHP""'");
    } else {
      BH::RHP * temp = reinterpret_cast< BH::RHP * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "4"" of type '" "BH::RVHP""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "4"" of type '" "BH::RVHP""'");
    } else {
      BH::RVHP * temp = reinterpret_cast< BH::RVHP * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  (arg1)->set_mu(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  multi_precision_constant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_multi_precision_constant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "2"" of type '" "multi_precision_constant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_set_mu" "', argument " "2"" of type '" "multi_precision_constant const &""'"); 
  }
  arg2 = reinterpret_cast< multi_precision_constant * >(argp2);
  (arg1)->set_mu((multi_precision_constant const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_mu(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_multi_precision_constant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OneLoopAmplitude_base_set_mu__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OneLoopAmplitude_base_set_mu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__OneLoopAmplitude_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_OneLoopAmplitude_base_set_mu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OneLoopAmplitude_base_set_mu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::OneLoopAmplitude_base::set_mu(int)\n"
    "    BH::OneLoopAmplitude_base::set_mu(BH::R,BH::RHP,BH::RVHP)\n"
    "    BH::OneLoopAmplitude_base::set_mu(multi_precision_constant const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_set_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  scheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_set_scheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_set_scheme" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_set_scheme" "', argument " "2"" of type '" "scheme""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_set_scheme" "', argument " "2"" of type '" "scheme""'");
    } else {
      scheme * temp = reinterpret_cast< scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->set_scheme(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_dry_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OneLoopAmplitude_base_dry_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_dry_run" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneLoopAmplitude_base_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneLoopAmplitude_base_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->dry_run((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OneLoopAmplitude_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OneLoopAmplitude_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OneLoopAmplitude_base" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OneLoopAmplitude_base_color_struct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopAmplitude_base *arg1 = (BH::OneLoopAmplitude_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::color_structure result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OneLoopAmplitude_base_color_struct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopAmplitude_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneLoopAmplitude_base_color_struct" "', argument " "1"" of type '" "BH::OneLoopAmplitude_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopAmplitude_base * >(argp1);
  result = (BH::color_structure)(arg1)->color_struct();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OneLoopAmplitude_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__OneLoopAmplitude_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< dd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< dd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< dd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< qd_real > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::momentum_configuration< qd_real > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< qd_real > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'One_Loop_Helicity_Amplitude_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::momentum_configuration< dd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::momentum_configuration< qd_real > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::TREE_TYPE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (BH::TREE_TYPE *)(arg1)->tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_cut_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cut_Part_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_cut_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_cut_part" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (Cut_Part_base *)(arg1)->cut_part();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cut_Part_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_rational_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_rational_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_rational_part" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (BH::Rational_base *)(arg1)->rational_part();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_tree(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_rational(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->get_cut(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_tree((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_tree((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_tree" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_tree((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_tree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_tree__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'One_Loop_Helicity_Amplitude_get_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::eval_param< BH::R > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::eval_param< BH::RHP > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_tree(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_rational((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_rational((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RHP >(static_cast< const std::complex< BH::RHP >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_rational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_rational" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_rational((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::complex< BH::RVHP >(static_cast< const std::complex< BH::RVHP >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_rational__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'One_Loop_Helicity_Amplitude_get_rational'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::eval_param< BH::R > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::eval_param< BH::RHP > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_rational(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->get_cut((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->get_cut((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_get_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_get_cut" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->get_cut((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_cut(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_One_Loop_Helicity_Amplitude_get_cut__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'One_Loop_Helicity_Amplitude_get_cut'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::eval_param< BH::R > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::eval_param< BH::RHP > const &)\n"
    "    BH::One_Loop_Helicity_Amplitude::get_cut(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_One_Loop_Helicity_Amplitude__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  BH::color_structure arg2 ;
  BH::Rational_factory< BH::Rational_base > *arg3 = (BH::Rational_factory< BH::Rational_base > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::One_Loop_Helicity_Amplitude *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_One_Loop_Helicity_Amplitude",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "2"" of type '" "BH::color_structure""'");
  } 
  arg2 = static_cast< BH::color_structure >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "3"" of type '" "BH::Rational_factory< BH::Rational_base > *""'"); 
  }
  arg3 = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp3);
  result = (BH::One_Loop_Helicity_Amplitude *)new BH::One_Loop_Helicity_Amplitude((BH::process const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_One_Loop_Helicity_Amplitude__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  BH::color_structure arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::One_Loop_Helicity_Amplitude *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_One_Loop_Helicity_Amplitude",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "2"" of type '" "BH::color_structure""'");
  } 
  arg2 = static_cast< BH::color_structure >(val2);
  result = (BH::One_Loop_Helicity_Amplitude *)new BH::One_Loop_Helicity_Amplitude((BH::process const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_One_Loop_Helicity_Amplitude__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  BH::color_structure arg2 ;
  BH::Rational_factory< BH::Rational_base > *arg3 = (BH::Rational_factory< BH::Rational_base > *) 0 ;
  BH::cut_part_factory< Cut_Part_base > *arg4 = (BH::cut_part_factory< Cut_Part_base > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::One_Loop_Helicity_Amplitude *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_One_Loop_Helicity_Amplitude",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "2"" of type '" "BH::color_structure""'");
  } 
  arg2 = static_cast< BH::color_structure >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "3"" of type '" "BH::Rational_factory< BH::Rational_base > *""'"); 
  }
  arg3 = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_One_Loop_Helicity_Amplitude" "', argument " "4"" of type '" "BH::cut_part_factory< Cut_Part_base > *""'"); 
  }
  arg4 = reinterpret_cast< BH::cut_part_factory< Cut_Part_base > * >(argp4);
  result = (BH::One_Loop_Helicity_Amplitude *)new BH::One_Loop_Helicity_Amplitude((BH::process const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_One_Loop_Helicity_Amplitude(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_One_Loop_Helicity_Amplitude__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_One_Loop_Helicity_Amplitude__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_One_Loop_Helicity_Amplitude__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_One_Loop_Helicity_Amplitude'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::One_Loop_Helicity_Amplitude(BH::process const &,BH::color_structure,BH::Rational_factory< BH::Rational_base > *)\n"
    "    BH::One_Loop_Helicity_Amplitude::One_Loop_Helicity_Amplitude(BH::process const &,BH::color_structure)\n"
    "    BH::One_Loop_Helicity_Amplitude::One_Loop_Helicity_Amplitude(BH::process const &,BH::color_structure,BH::Rational_factory< BH::Rational_base > *,BH::cut_part_factory< Cut_Part_base > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_One_Loop_Helicity_Amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_One_Loop_Helicity_Amplitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_One_Loop_Helicity_Amplitude" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_dry_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_dry_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_dry_run" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->dry_run((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_set_mu_HP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_mu_HP" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "One_Loop_Helicity_Amplitude_set_mu_HP" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu_HP(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_set_mu_VHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_mu_VHP" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "One_Loop_Helicity_Amplitude_set_mu_VHP" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_mu_VHP(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  BH::R arg2 ;
  BH::RHP arg3 ;
  BH::RVHP arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:One_Loop_Helicity_Amplitude_set_mu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "2"" of type '" "BH::R""'");
  } 
  arg2 = static_cast< BH::R >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "3"" of type '" "BH::RHP""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "3"" of type '" "BH::RHP""'");
    } else {
      BH::RHP * temp = reinterpret_cast< BH::RHP * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "4"" of type '" "BH::RVHP""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "4"" of type '" "BH::RVHP""'");
    } else {
      BH::RVHP * temp = reinterpret_cast< BH::RVHP * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  (arg1)->set_mu(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  multi_precision_constant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_multi_precision_constant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "2"" of type '" "multi_precision_constant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_set_mu" "', argument " "2"" of type '" "multi_precision_constant const &""'"); 
  }
  arg2 = reinterpret_cast< multi_precision_constant * >(argp2);
  (arg1)->set_mu((multi_precision_constant const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_mu(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_multi_precision_constant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dd_real, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_qd_real, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_One_Loop_Helicity_Amplitude_set_mu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'One_Loop_Helicity_Amplitude_set_mu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::One_Loop_Helicity_Amplitude::set_mu(int)\n"
    "    BH::One_Loop_Helicity_Amplitude::set_mu(BH::R,BH::RHP,BH::RVHP)\n"
    "    BH::One_Loop_Helicity_Amplitude::set_mu(multi_precision_constant const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_set_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  scheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:One_Loop_Helicity_Amplitude_set_scheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_set_scheme" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "One_Loop_Helicity_Amplitude_set_scheme" "', argument " "2"" of type '" "scheme""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "One_Loop_Helicity_Amplitude_set_scheme" "', argument " "2"" of type '" "scheme""'");
    } else {
      scheme * temp = reinterpret_cast< scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->set_scheme(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_accuracy" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_get_conjugate_amplitude",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_conjugate_amplitude" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (arg1)->get_conjugate_amplitude();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_get_conjugate_amplitude_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_conjugate_amplitude_HP" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (arg1)->get_conjugate_amplitude_HP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::One_Loop_Helicity_Amplitude *arg1 = (BH::One_Loop_Helicity_Amplitude *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:One_Loop_Helicity_Amplitude_get_conjugate_amplitude_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "One_Loop_Helicity_Amplitude_get_conjugate_amplitude_VHP" "', argument " "1"" of type '" "BH::One_Loop_Helicity_Amplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::One_Loop_Helicity_Amplitude * >(argp1);
  result = (arg1)->get_conjugate_amplitude_VHP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *One_Loop_Helicity_Amplitude_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__One_Loop_Helicity_Amplitude, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_print_tree_graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::OneLoopRawAmplitude *arg1 = (BH::OneLoopRawAmplitude *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:print_tree_graph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__OneLoopRawAmplitude, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_tree_graph" "', argument " "1"" of type '" "BH::OneLoopRawAmplitude *""'"); 
  }
  arg1 = reinterpret_cast< BH::OneLoopRawAmplitude * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_tree_graph" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  BH::print_tree_graph(arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_cut_part_graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_base *arg1 = (BH::Cut_Part_base *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:print_cut_part_graph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_cut_part_graph" "', argument " "1"" of type '" "BH::Cut_Part_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_base * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_cut_part_graph" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  BH::print_cut_part_graph(arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_tree_graph_non_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part *arg1 = (BH::Cut_Part *) 0 ;
  char *arg2 = (char *) 0 ;
  BH::momentum_configuration< double > *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:print_tree_graph_non_zero",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_tree_graph_non_zero" "', argument " "1"" of type '" "BH::Cut_Part *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_tree_graph_non_zero" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "print_tree_graph_non_zero" "', argument " "3"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_tree_graph_non_zero" "', argument " "3"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg3 = reinterpret_cast< BH::momentum_configuration< double > * >(argp3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "print_tree_graph_non_zero" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_tree_graph_non_zero" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  BH::print_tree_graph_non_zero(arg1,(char const *)arg2,*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_cutD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:print_cutD",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_cutD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_cutD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_cutD" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  BH::print_cutD((BH::cutD const &)*arg1,(char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_cutD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:print_cutD",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_cutD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_cutD" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print_cutD" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "print_cutD" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_cutD" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::print_cutD((BH::cutD const &)*arg1,(char const *)arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_cutD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_print_cutD__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_print_cutD__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'print_cutD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::print_cutD(BH::cutD const &,char const *)\n"
    "    BH::print_cutD(BH::cutD const &,char const *,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_display_cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:display_cut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "display_cut" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "display_cut" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  BH::display_cut((BH::cutD const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rational_base *arg1 = (BH::Rational_base *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:infod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "infod" "', argument " "1"" of type '" "BH::Rational_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rational_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::SWIGTEMPLATEDISAMBIGUATOR info< double >(arg1,*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_base *arg1 = (BH::Cut_Part_base *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:infod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "infod" "', argument " "1"" of type '" "BH::Cut_Part_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::SWIGTEMPLATEDISAMBIGUATOR info< double >(arg1,*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Spurious_Pole *arg1 = (BH::Spurious_Pole *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:infod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Spurious_Pole, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "infod" "', argument " "1"" of type '" "BH::Spurious_Pole *""'"); 
  }
  arg1 = reinterpret_cast< BH::Spurious_Pole * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::SWIGTEMPLATEDISAMBIGUATOR info< double >(arg1,*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Spurious_Rational *arg1 = (BH::Spurious_Rational *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:infod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Spurious_Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "infod" "', argument " "1"" of type '" "BH::Spurious_Rational *""'"); 
  }
  arg1 = reinterpret_cast< BH::Spurious_Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::SWIGTEMPLATEDISAMBIGUATOR info< double >(arg1,*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  BH::momentum_configuration< double > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:infod",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "infod" "', argument " "1"" of type '" "BH::Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "2"" of type '" "BH::momentum_configuration< double > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< double > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "infod" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  BH::SWIGTEMPLATEDISAMBIGUATOR info< double >(arg1,*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_infod(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rational_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_infod__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_infod__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Spurious_Pole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_infod__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Spurious_Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_infod__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_infod__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'infod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::info< double >(BH::Rational_base *,BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::info< double >(BH::Cut_Part_base *,BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::info< double >(BH::Spurious_Pole *,BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::info< double >(BH::Spurious_Rational *,BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::info< double >(BH::Rec_Tree *,BH::momentum_configuration< double > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_copy_into_set__set_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::copy_into_set *arg1 = (BH::copy_into_set *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:copy_into_set__set_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__copy_into_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "copy_into_set__set_set" "', argument " "1"" of type '" "BH::copy_into_set *""'"); 
  }
  arg1 = reinterpret_cast< BH::copy_into_set * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "copy_into_set__set_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_set = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_copy_into_set__set_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::copy_into_set *arg1 = (BH::copy_into_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:copy_into_set__set_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__copy_into_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "copy_into_set__set_get" "', argument " "1"" of type '" "BH::copy_into_set *""'"); 
  }
  arg1 = reinterpret_cast< BH::copy_into_set * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *) ((arg1)->_set);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_copy_into_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::copy_into_set *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_copy_into_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_copy_into_set" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_copy_into_set" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::copy_into_set *)new BH::copy_into_set(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__copy_into_set, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_copy_into_set___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::copy_into_set *arg1 = (BH::copy_into_set *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:copy_into_set___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__copy_into_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "copy_into_set___call__" "', argument " "1"" of type '" "BH::copy_into_set *""'"); 
  }
  arg1 = reinterpret_cast< BH::copy_into_set * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "copy_into_set___call__" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "copy_into_set___call__" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->operator ()((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_copy_into_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::copy_into_set *arg1 = (BH::copy_into_set *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_copy_into_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__copy_into_set, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_copy_into_set" "', argument " "1"" of type '" "BH::copy_into_set *""'"); 
  }
  arg1 = reinterpret_cast< BH::copy_into_set * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *copy_into_set_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__copy_into_set, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ordering_constraint_strong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ordering_constraint_strong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_strong_set" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ordering_constraint_strong_set" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
  if (arg1) (arg1)->strong = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint_strong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ordering_constraint_strong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_strong_get" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)& ((arg1)->strong);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint_weak_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ordering_constraint_weak_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_weak_set" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ordering_constraint_weak_set" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
  if (arg1) (arg1)->weak = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint_weak_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ordering_constraint_weak_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_weak_get" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)& ((arg1)->weak);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint_all_ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ordering_constraint_all_ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_all_ordered_set" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ordering_constraint_all_ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->all_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint_all_ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ordering_constraint_all_ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint_all_ordered_get" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->all_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ordering_constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::ordering_constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ordering_constraint",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ordering_constraint" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ordering_constraint" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ordering_constraint" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ordering_constraint" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (BH::ordering_constraint *)new BH::ordering_constraint((std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__ordering_constraint, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ordering_constraint___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ordering_constraint___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ordering_constraint___str__" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  result = BH_ordering_constraint___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ordering_constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = (BH::ordering_constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ordering_constraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ordering_constraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ordering_constraint" "', argument " "1"" of type '" "BH::ordering_constraint *""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ordering_constraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__ordering_constraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  BH::ordering_constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg2 = reinterpret_cast< BH::ordering_constraint * >(argp2);
  result = (std::ostream *) &BH::operator <<(*arg1,(BH::ordering_constraint const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__plabel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__Known_Rec_Tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__Unknown_Rec_Tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__Rec_Tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__pentagonD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_18(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__raw_part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__boxD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_19(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__triangleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_20(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__bubbleD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_21(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_22(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___lshift____SWIG_9(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ordering_constraint *arg1 = 0 ;
  BH::ordering_constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg1 = reinterpret_cast< BH::ordering_constraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg2 = reinterpret_cast< BH::ordering_constraint * >(argp2);
  result = (bool)BH::operator <((BH::ordering_constraint const &)*arg1,(BH::ordering_constraint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__plabel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__plabel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__particle_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__cutD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__raw_part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__raw_part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__part, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__part, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_7(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_get_ordering_constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BH::ordering_constraint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_ordering_constraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_ordering_constraint" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_ordering_constraint" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = BH::ordering::get_ordering_constraint((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj((new BH::ordering_constraint(static_cast< const BH::ordering_constraint& >(result))), SWIGTYPE_p_BH__ordering_constraint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_all_bubble_partitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BH::part,std::allocator< BH::part > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:all_bubble_partitions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_bubble_partitions" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_bubble_partitions" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "all_bubble_partitions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_bubble_partitions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::all_bubble_partitions((BH::process const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BH::part,std::allocator< BH::part > >(static_cast< const std::vector< BH::part,std::allocator< BH::part > >& >(result))), SWIGTYPE_p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_all_bubble_partitions_with_1_leg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BH::part,std::allocator< BH::part > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:all_bubble_partitions_with_1_leg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_bubble_partitions_with_1_leg" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_bubble_partitions_with_1_leg" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "all_bubble_partitions_with_1_leg" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_bubble_partitions_with_1_leg" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::all_bubble_partitions_with_1_leg((BH::process const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BH::part,std::allocator< BH::part > >(static_cast< const std::vector< BH::part,std::allocator< BH::part > >& >(result))), SWIGTYPE_p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_all_raw_bubble_partitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< BH::particle *,std::allocator< BH::particle * > > > arg1 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BH::raw_bubble,std::allocator< BH::raw_bubble > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:all_raw_bubble_partitions",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_raw_bubble_partitions" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_raw_bubble_partitions" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const""'");
    } else {
      std::vector< BH::particle *,std::allocator< BH::particle * > > * temp = reinterpret_cast< std::vector< BH::particle *,std::allocator< BH::particle * > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "all_raw_bubble_partitions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_raw_bubble_partitions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::all_raw_bubble_partitions(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BH::raw_bubble,std::allocator< BH::raw_bubble > >(static_cast< const std::vector< BH::raw_bubble,std::allocator< BH::raw_bubble > >& >(result))), SWIGTYPE_p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_has_strong_ordered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:perm_has_strong_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "perm_has_strong_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_strong_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "perm_has_strong_ordered" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_strong_ordered" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)BH::perm_has_strong_ordered(*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_has_weak_ordered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:perm_has_weak_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "perm_has_weak_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_weak_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "perm_has_weak_ordered" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_weak_ordered" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)BH::perm_has_weak_ordered(*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_has_strong_ordered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:perm_has_strong_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "perm_has_strong_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_strong_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "perm_has_strong_ordered" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_strong_ordered" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)BH::perm_has_strong_ordered(*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_has_strong_ordered(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_perm_has_strong_ordered__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_perm_has_strong_ordered__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'perm_has_strong_ordered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::perm_has_strong_ordered(std::vector< int,std::allocator< int > > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::perm_has_strong_ordered(std::vector< int,std::allocator< int > > &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_perm_has_weak_ordered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:perm_has_weak_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "perm_has_weak_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_weak_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "perm_has_weak_ordered" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_has_weak_ordered" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)BH::perm_has_weak_ordered(*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_has_weak_ordered(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_perm_has_weak_ordered__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_perm_has_weak_ordered__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'perm_has_weak_ordered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::perm_has_weak_ordered(std::vector< int,std::allocator< int > > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::perm_has_weak_ordered(std::vector< int,std::allocator< int > > &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_partially_ordered_vectors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:partially_ordered_vectors",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partially_ordered_vectors" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_vectors" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "partially_ordered_vectors" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_vectors" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::partially_ordered_vectors((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = swig::from(static_cast< std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_perm_is_ordered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  BH::ordering_constraint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:perm_is_ordered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "perm_is_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_is_ordered" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "perm_is_ordered" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "perm_is_ordered" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg2 = reinterpret_cast< BH::ordering_constraint * >(argp2);
  result = (bool)BH::perm_is_ordered(*arg1,(BH::ordering_constraint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_partially_ordered_vectors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  BH::ordering_constraint *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:partially_ordered_vectors",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partially_ordered_vectors" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_vectors" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "partially_ordered_vectors" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_vectors" "', argument " "2"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg2 = reinterpret_cast< BH::ordering_constraint * >(argp2);
  result = BH::partially_ordered_vectors((std::vector< int,std::allocator< int > > const &)*arg1,(BH::ordering_constraint const &)*arg2);
  resultobj = swig::from(static_cast< std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_partially_ordered_vectors(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_partially_ordered_vectors__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_partially_ordered_vectors__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'partially_ordered_vectors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::partially_ordered_vectors(std::vector< int,std::allocator< int > > const &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    BH::partially_ordered_vectors(std::vector< int,std::allocator< int > > const &,BH::ordering_constraint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_partially_ordered_processes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< BH::process,std::allocator< BH::process > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:partially_ordered_processes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partially_ordered_processes" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_processes" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "partially_ordered_processes" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_processes" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::partially_ordered_processes((BH::process const &)*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< BH::process,std::allocator< BH::process > >(static_cast< const std::vector< BH::process,std::allocator< BH::process > >& >(result))), SWIGTYPE_p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_partially_ordered_particles_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle *,std::allocator< BH::particle * > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< BH::particle *,std::allocator< BH::particle * > >,std::allocator< std::vector< BH::particle *,std::allocator< BH::particle * > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:partially_ordered_particles_vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "partially_ordered_particles_vector" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_particles_vector" "', argument " "1"" of type '" "std::vector< BH::particle *,std::allocator< BH::particle * > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle *,std::allocator< BH::particle * > > * >(argp1);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "partially_ordered_particles_vector" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "partially_ordered_particles_vector" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = BH::partially_ordered_particles_vector((std::vector< BH::particle *,std::allocator< BH::particle * > > const &)*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< BH::particle *,std::allocator< BH::particle * > >,std::allocator< std::vector< BH::particle *,std::allocator< BH::particle * > > > >(static_cast< const std::vector< std::vector< BH::particle *,std::allocator< BH::particle * > >,std::allocator< std::vector< BH::particle *,std::allocator< BH::particle * > > > >& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_fn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  BH::cutD *arg2 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_fn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_fn" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_fn" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_fn" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_fn" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp3);
  result = (bool)BH::unordered_compare_fn((BH::cutD const &)*arg1,(BH::cutD const &)*arg2,(std::set< int,std::less< int >,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_fn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = 0 ;
  BH::cutD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_compare_fn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_fn" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_fn" "', argument " "1"" of type '" "BH::cutD const &""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_fn" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_fn" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)BH::unordered_compare_fn((BH::cutD const &)*arg1,(BH::cutD const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_fn(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__cutD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_unordered_compare_fn__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__cutD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__cutD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_unordered_compare_fn__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unordered_compare_fn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::unordered_compare_fn(BH::cutD const &,BH::cutD const &,std::set< int,std::less< int >,std::allocator< int > > const &)\n"
    "    BH::unordered_compare_fn(BH::cutD const &,BH::cutD const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unordered_compare_2__ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_2 *arg1 = (BH::unordered_compare_2 *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_compare_2__ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_2__ordered_set" "', argument " "1"" of type '" "BH::unordered_compare_2 *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_2__ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_2__ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_2 *arg1 = (BH::unordered_compare_2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_compare_2__ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_2__ordered_get" "', argument " "1"" of type '" "BH::unordered_compare_2 *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_2 * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_compare_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_compare_2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_compare_2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_compare_2" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_unordered_compare_2" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::unordered_compare_2 *)new BH::unordered_compare_2((std::set< int,std::less< int >,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_compare_2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_2___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_2 *arg1 = (BH::unordered_compare_2 *) 0 ;
  BH::cutD *arg2 = 0 ;
  BH::cutD *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_2___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_2___call__" "', argument " "1"" of type '" "BH::unordered_compare_2 const *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_2___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_2___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_2___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_2___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)((BH::unordered_compare_2 const *)arg1)->operator ()((BH::cutD const &)*arg2,(BH::cutD const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_compare_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_2 *arg1 = (BH::unordered_compare_2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_compare_2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_compare_2" "', argument " "1"" of type '" "BH::unordered_compare_2 *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_2 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_compare_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_compare_2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unordered_compare_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_compare_3")) SWIG_fail;
  result = (BH::unordered_compare_3 *)new BH::unordered_compare_3();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_compare_3, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_3___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_3 *arg1 = (BH::unordered_compare_3 *) 0 ;
  BH::cutD *arg2 = 0 ;
  BH::cutD *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_3___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_3___call__" "', argument " "1"" of type '" "BH::unordered_compare_3 const *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_3 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_3___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_3___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_3___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_3___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)((BH::unordered_compare_3 const *)arg1)->operator ()((BH::cutD const &)*arg2,(BH::cutD const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_compare_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_3 *arg1 = (BH::unordered_compare_3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_compare_3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_compare_3" "', argument " "1"" of type '" "BH::unordered_compare_3 *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_3 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_compare_3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_compare_3, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_fn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_fn" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_fn" "', argument " "2"" of type '" "BH::cutD const *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)BH::unordered_equal_fn((BH::cutD const *)arg1,(BH::cutD const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal *arg1 = (BH::unordered_equal *) 0 ;
  BH::cutD *arg2 = 0 ;
  BH::cutD *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal___call__" "', argument " "1"" of type '" "BH::unordered_equal *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal___call__" "', argument " "2"" of type '" "BH::cutD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__cutD,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal___call__" "', argument " "3"" of type '" "BH::cutD const &""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)(arg1)->operator ()((BH::cutD const &)*arg2,(BH::cutD const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_equal")) SWIG_fail;
  result = (BH::unordered_equal *)new BH::unordered_equal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal *arg1 = (BH::unordered_equal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal" "', argument " "1"" of type '" "BH::unordered_equal *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_ptr___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_ptr *arg1 = (BH::unordered_equal_ptr *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  BH::cutD *arg3 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_ptr___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_ptr___call__" "', argument " "1"" of type '" "BH::unordered_equal_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_ptr___call__" "', argument " "2"" of type '" "BH::cutD *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_ptr___call__" "', argument " "3"" of type '" "BH::cutD *""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_ptr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_equal_ptr")) SWIG_fail;
  result = (BH::unordered_equal_ptr *)new BH::unordered_equal_ptr();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_ptr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_ptr *arg1 = (BH::unordered_equal_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_ptr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_ptr" "', argument " "1"" of type '" "BH::unordered_equal_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_ptr * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_ptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_ptr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_and_delete_ptr___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_and_delete_ptr *arg1 = (BH::unordered_equal_and_delete_ptr *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  BH::cutD *arg3 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_and_delete_ptr___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_and_delete_ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_and_delete_ptr___call__" "', argument " "1"" of type '" "BH::unordered_equal_and_delete_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_and_delete_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_and_delete_ptr___call__" "', argument " "2"" of type '" "BH::cutD *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_and_delete_ptr___call__" "', argument " "3"" of type '" "BH::cutD *""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_and_delete_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_and_delete_ptr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_equal_and_delete_ptr")) SWIG_fail;
  result = (BH::unordered_equal_and_delete_ptr *)new BH::unordered_equal_and_delete_ptr();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_and_delete_ptr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_and_delete_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_and_delete_ptr *arg1 = (BH::unordered_equal_and_delete_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_and_delete_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_and_delete_ptr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_and_delete_ptr" "', argument " "1"" of type '" "BH::unordered_equal_and_delete_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_and_delete_ptr * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_and_delete_ptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_and_delete_ptr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_to_ptr_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_to_ptr *arg1 = (BH::unordered_equal_to_ptr *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_to_ptr_c2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_to_ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_to_ptr_c2_set" "', argument " "1"" of type '" "BH::unordered_equal_to_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_to_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_to_ptr_c2_set" "', argument " "2"" of type '" "BH::cutD *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  if (arg1) (arg1)->c2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_to_ptr_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_to_ptr *arg1 = (BH::unordered_equal_to_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cutD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_equal_to_ptr_c2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_to_ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_to_ptr_c2_get" "', argument " "1"" of type '" "BH::unordered_equal_to_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_to_ptr * >(argp1);
  result = (BH::cutD *) ((arg1)->c2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cutD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_to_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_equal_to_ptr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_equal_to_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_equal_to_ptr" "', argument " "1"" of type '" "BH::cutD *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  result = (BH::unordered_equal_to_ptr *)new BH::unordered_equal_to_ptr(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_to_ptr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_to_ptr___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_to_ptr *arg1 = (BH::unordered_equal_to_ptr *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_to_ptr___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_to_ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_to_ptr___call__" "', argument " "1"" of type '" "BH::unordered_equal_to_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_to_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_to_ptr___call__" "', argument " "2"" of type '" "BH::cutD *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)(arg1)->operator ()(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_to_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_to_ptr *arg1 = (BH::unordered_equal_to_ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_to_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_to_ptr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_to_ptr" "', argument " "1"" of type '" "BH::unordered_equal_to_ptr *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_to_ptr * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_to_ptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_to_ptr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_compare_part_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_part_fn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_part_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp3);
  result = (bool)BH::unordered_compare_part_fn((BH::part const &)*arg1,(BH::part const &)*arg2,(std::set< int,std::less< int >,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part__ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part *arg1 = (BH::unordered_compare_part *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_compare_part__ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part__ordered_set" "', argument " "1"" of type '" "BH::unordered_compare_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part__ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part__ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part *arg1 = (BH::unordered_compare_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_compare_part__ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part__ordered_get" "', argument " "1"" of type '" "BH::unordered_compare_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_compare_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_compare_part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_compare_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_compare_part" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_unordered_compare_part" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::unordered_compare_part *)new BH::unordered_compare_part((std::set< int,std::less< int >,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_compare_part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part *arg1 = (BH::unordered_compare_part *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_part___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part___call__" "', argument " "1"" of type '" "BH::unordered_compare_part const *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_part___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)((BH::unordered_compare_part const *)arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_compare_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part *arg1 = (BH::unordered_compare_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_compare_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_compare_part" "', argument " "1"" of type '" "BH::unordered_compare_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_compare_part_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_compare_part, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_compare_part_prop_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_part_prop_fn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part_prop_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_prop_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part_prop_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_prop_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_part_prop_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_prop_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp3);
  result = (bool)BH::unordered_compare_part_prop_fn((BH::part const &)*arg1,(BH::part const &)*arg2,(std::set< int,std::less< int >,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part_prop__ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part_prop *arg1 = (BH::unordered_compare_part_prop *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_compare_part_prop__ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part_prop__ordered_set" "', argument " "1"" of type '" "BH::unordered_compare_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part_prop * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part_prop__ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part_prop__ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part_prop *arg1 = (BH::unordered_compare_part_prop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_compare_part_prop__ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part_prop__ordered_get" "', argument " "1"" of type '" "BH::unordered_compare_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part_prop * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_compare_part_prop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_compare_part_prop *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_compare_part_prop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_compare_part_prop" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_unordered_compare_part_prop" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::unordered_compare_part_prop *)new BH::unordered_compare_part_prop((std::set< int,std::less< int >,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_compare_part_prop, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_part_prop___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part_prop *arg1 = (BH::unordered_compare_part_prop *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_part_prop___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_part_prop___call__" "', argument " "1"" of type '" "BH::unordered_compare_part_prop const *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part_prop * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_part_prop___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_prop___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_part_prop___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_part_prop___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)((BH::unordered_compare_part_prop const *)arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_compare_part_prop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_part_prop *arg1 = (BH::unordered_compare_part_prop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_compare_part_prop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_part_prop, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_compare_part_prop" "', argument " "1"" of type '" "BH::unordered_compare_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_part_prop * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_compare_part_prop_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_compare_part_prop, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_compare_current_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_compare_current_fn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_current_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_current_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_current_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_current_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  result = (bool)BH::unordered_compare_current_fn((BH::part const &)*arg1,(BH::part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_compare_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_current *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_compare_current")) SWIG_fail;
  result = (BH::unordered_compare_current *)new BH::unordered_compare_current();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_compare_current, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_compare_current___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_current *arg1 = (BH::unordered_compare_current *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_compare_current___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_current, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_compare_current___call__" "', argument " "1"" of type '" "BH::unordered_compare_current const *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_current * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_compare_current___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_current___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_compare_current___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_compare_current___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)((BH::unordered_compare_current const *)arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_compare_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_compare_current *arg1 = (BH::unordered_compare_current *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_compare_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_compare_current, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_compare_current" "', argument " "1"" of type '" "BH::unordered_compare_current *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_compare_current * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_compare_current_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_compare_current, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_part_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_part_fn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_part_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp3);
  result = (bool)BH::unordered_equal_part_fn((BH::part const &)*arg1,(BH::part const &)*arg2,(std::set< int,std::less< int >,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part__ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part *arg1 = (BH::unordered_equal_part *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_part__ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part__ordered_set" "', argument " "1"" of type '" "BH::unordered_equal_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part__ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part__ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part *arg1 = (BH::unordered_equal_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_equal_part__ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part__ordered_get" "', argument " "1"" of type '" "BH::unordered_equal_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_equal_part *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_equal_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_equal_part" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_unordered_equal_part" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::unordered_equal_part *)new BH::unordered_equal_part((std::set< int,std::less< int >,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_part, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part *arg1 = (BH::unordered_equal_part *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_part___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part___call__" "', argument " "1"" of type '" "BH::unordered_equal_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_part___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)(arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part *arg1 = (BH::unordered_equal_part *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_part" "', argument " "1"" of type '" "BH::unordered_equal_part *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_part_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_part, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_part_prop_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_part_prop_fn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part_prop_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_prop_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part_prop_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_prop_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_part_prop_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_prop_fn" "', argument " "3"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp3);
  result = (bool)BH::unordered_equal_part_prop_fn((BH::part const &)*arg1,(BH::part const &)*arg2,(std::set< int,std::less< int >,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part_prop__ordered_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part_prop *arg1 = (BH::unordered_equal_part_prop *) 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *arg2 = (std::set< int,std::less< int >,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_part_prop__ordered_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part_prop__ordered_set" "', argument " "1"" of type '" "BH::unordered_equal_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part_prop * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part_prop__ordered_set" "', argument " "2"" of type '" "std::set< int,std::less< int >,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->_ordered = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part_prop__ordered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part_prop *arg1 = (BH::unordered_equal_part_prop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< int,std::less< int >,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:unordered_equal_part_prop__ordered_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part_prop__ordered_get" "', argument " "1"" of type '" "BH::unordered_equal_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part_prop * >(argp1);
  result = (std::set< int,std::less< int >,std::allocator< int > > *)& ((arg1)->_ordered);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_part_prop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< int,std::less< int >,std::allocator< int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::unordered_equal_part_prop *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_unordered_equal_part_prop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unordered_equal_part_prop" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_unordered_equal_part_prop" "', argument " "1"" of type '" "std::set< int,std::less< int >,std::allocator< int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::set< int,std::less< int >,std::allocator< int > > * >(argp1);
  result = (BH::unordered_equal_part_prop *)new BH::unordered_equal_part_prop((std::set< int,std::less< int >,std::allocator< int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_part_prop, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_part_prop___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part_prop *arg1 = (BH::unordered_equal_part_prop *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_part_prop___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part_prop, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_part_prop___call__" "', argument " "1"" of type '" "BH::unordered_equal_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part_prop * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_part_prop___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_prop___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_part_prop___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_part_prop___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)(arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_part_prop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_part_prop *arg1 = (BH::unordered_equal_part_prop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_part_prop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_part_prop, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_part_prop" "', argument " "1"" of type '" "BH::unordered_equal_part_prop *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_part_prop * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_part_prop_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_part_prop, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unordered_equal_current_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::part *arg1 = 0 ;
  BH::part *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unordered_equal_current_fn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_current_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_current_fn" "', argument " "1"" of type '" "BH::part const &""'"); 
  }
  arg1 = reinterpret_cast< BH::part * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_current_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_current_fn" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  result = (bool)BH::unordered_equal_current_fn((BH::part const &)*arg1,(BH::part const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unordered_equal_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_current *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unordered_equal_current")) SWIG_fail;
  result = (BH::unordered_equal_current *)new BH::unordered_equal_current();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__unordered_equal_current, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unordered_equal_current___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_current *arg1 = (BH::unordered_equal_current *) 0 ;
  BH::part *arg2 = 0 ;
  BH::part *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unordered_equal_current___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_current, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unordered_equal_current___call__" "', argument " "1"" of type '" "BH::unordered_equal_current *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_current * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unordered_equal_current___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_current___call__" "', argument " "2"" of type '" "BH::part const &""'"); 
  }
  arg2 = reinterpret_cast< BH::part * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__part,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unordered_equal_current___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unordered_equal_current___call__" "', argument " "3"" of type '" "BH::part const &""'"); 
  }
  arg3 = reinterpret_cast< BH::part * >(argp3);
  result = (bool)(arg1)->operator ()((BH::part const &)*arg2,(BH::part const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unordered_equal_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::unordered_equal_current *arg1 = (BH::unordered_equal_current *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unordered_equal_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__unordered_equal_current, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unordered_equal_current" "', argument " "1"" of type '" "BH::unordered_equal_current *""'"); 
  }
  arg1 = reinterpret_cast< BH::unordered_equal_current * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unordered_equal_current_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__unordered_equal_current, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_match_cutD_independent_of_cut_legs_fn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cutD *arg1 = (BH::cutD *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:match_cutD_independent_of_cut_legs_fn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_cutD_independent_of_cut_legs_fn" "', argument " "1"" of type '" "BH::cutD const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cutD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "match_cutD_independent_of_cut_legs_fn" "', argument " "2"" of type '" "BH::cutD const *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  result = (bool)BH::match_cutD_independent_of_cut_legs_fn((BH::cutD const *)arg1,(BH::cutD const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_match_cutD_independent_of_cut_legs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::match_cutD_independent_of_cut_legs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_match_cutD_independent_of_cut_legs")) SWIG_fail;
  result = (BH::match_cutD_independent_of_cut_legs *)new BH::match_cutD_independent_of_cut_legs();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__match_cutD_independent_of_cut_legs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_match_cutD_independent_of_cut_legs___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::match_cutD_independent_of_cut_legs *arg1 = (BH::match_cutD_independent_of_cut_legs *) 0 ;
  BH::cutD *arg2 = (BH::cutD *) 0 ;
  BH::cutD *arg3 = (BH::cutD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:match_cutD_independent_of_cut_legs___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__match_cutD_independent_of_cut_legs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_cutD_independent_of_cut_legs___call__" "', argument " "1"" of type '" "BH::match_cutD_independent_of_cut_legs const *""'"); 
  }
  arg1 = reinterpret_cast< BH::match_cutD_independent_of_cut_legs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "match_cutD_independent_of_cut_legs___call__" "', argument " "2"" of type '" "BH::cutD const *""'"); 
  }
  arg2 = reinterpret_cast< BH::cutD * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_BH__cutD, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "match_cutD_independent_of_cut_legs___call__" "', argument " "3"" of type '" "BH::cutD const *""'"); 
  }
  arg3 = reinterpret_cast< BH::cutD * >(argp3);
  result = (bool)((BH::match_cutD_independent_of_cut_legs const *)arg1)->operator ()((BH::cutD const *)arg2,(BH::cutD const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_match_cutD_independent_of_cut_legs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::match_cutD_independent_of_cut_legs *arg1 = (BH::match_cutD_independent_of_cut_legs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_match_cutD_independent_of_cut_legs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__match_cutD_independent_of_cut_legs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_match_cutD_independent_of_cut_legs" "', argument " "1"" of type '" "BH::match_cutD_independent_of_cut_legs *""'"); 
  }
  arg1 = reinterpret_cast< BH::match_cutD_independent_of_cut_legs * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *match_cutD_independent_of_cut_legs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__match_cutD_independent_of_cut_legs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_standardCutPartDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_standardCutPartDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_standardCutPartDarren" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_standardCutPartDarren" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *)new BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType >((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::Darren_CutD_Factory::BoxType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:standardCutPartDarren_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_box" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "standardCutPartDarren_box" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::cut::Darren_CutD_Factory::BoxType *)(arg1)->box(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::Darren_CutD_Factory::TriangleType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:standardCutPartDarren_triangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_triangle" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "standardCutPartDarren_triangle" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::cut::Darren_CutD_Factory::TriangleType *)(arg1)->triangle(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::Darren_CutD_Factory::BubbleType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:standardCutPartDarren_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_bubble" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "standardCutPartDarren_bubble" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::cut::Darren_CutD_Factory::BubbleType *)(arg1)->bubble(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_nbr_boxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_nbr_boxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_nbr_boxes" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = ((BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *)arg1)->nbr_boxes();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_nbr_triangles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_nbr_triangles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_nbr_triangles" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = ((BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *)arg1)->nbr_triangles();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_nbr_bubbles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_nbr_bubbles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_nbr_bubbles" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = ((BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > const *)arg1)->nbr_bubbles();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_standardCutPartDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_standardCutPartDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_standardCutPartDarren" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_get_accuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_get_accuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_get_accuracy" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = (double)(arg1)->get_accuracy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_get_conjugate_cut_part(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_get_conjugate_cut_part",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_get_conjugate_cut_part" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = (arg1)->get_conjugate_cut_part();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_get_conjugate_cut_part_HP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_get_conjugate_cut_part_HP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_get_conjugate_cut_part_HP" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = (arg1)->get_conjugate_cut_part_HP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_standardCutPartDarren_get_conjugate_cut_part_VHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *arg1 = (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:standardCutPartDarren_get_conjugate_cut_part_VHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standardCutPartDarren_get_conjugate_cut_part_VHP" "', argument " "1"" of type '" "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > * >(argp1);
  result = (arg1)->get_conjugate_cut_part_VHP();
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *standardCutPartDarren_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Darren_CutD_Factory_new_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren_CutD_Factory *arg1 = (BH::cut::Darren_CutD_Factory *) 0 ;
  BH::boxD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::normal_boxDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Darren_CutD_Factory_new_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Darren_CutD_Factory_new_box" "', argument " "1"" of type '" "BH::cut::Darren_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__boxD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Darren_CutD_Factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Darren_CutD_Factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  result = (BH::cut::normal_boxDarren *)(arg1)->new_box((BH::boxD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Darren_CutD_Factory_new_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren_CutD_Factory *arg1 = (BH::cut::Darren_CutD_Factory *) 0 ;
  BH::triangleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::normal_triangleDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Darren_CutD_Factory_new_triangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Darren_CutD_Factory_new_triangle" "', argument " "1"" of type '" "BH::cut::Darren_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__triangleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Darren_CutD_Factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Darren_CutD_Factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  result = (BH::cut::normal_triangleDarren *)(arg1)->new_triangle((BH::triangleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Darren_CutD_Factory_new_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren_CutD_Factory *arg1 = (BH::cut::Darren_CutD_Factory *) 0 ;
  BH::bubbleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::normal_bubbleDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Darren_CutD_Factory_new_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Darren_CutD_Factory_new_bubble" "', argument " "1"" of type '" "BH::cut::Darren_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__bubbleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Darren_CutD_Factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Darren_CutD_Factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::bubbleD * >(argp2);
  result = (BH::cut::normal_bubbleDarren *)(arg1)->new_bubble((BH::bubbleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Darren_CutD_Factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren_CutD_Factory *arg1 = (BH::cut::Darren_CutD_Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Darren_CutD_Factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__Darren_CutD_Factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Darren_CutD_Factory" "', argument " "1"" of type '" "BH::cut::Darren_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::Darren_CutD_Factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Darren_CutD_Factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::Darren_CutD_Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Darren_CutD_Factory")) SWIG_fail;
  result = (BH::cut::Darren_CutD_Factory *)new BH::cut::Darren_CutD_Factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren_CutD_Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Darren_CutD_Factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__Darren_CutD_Factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_higgs_CutD_Factory_new_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::higgs_CutD_Factory *arg1 = (BH::cut::higgs_CutD_Factory *) 0 ;
  BH::boxD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::higgs_boxDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:higgs_CutD_Factory_new_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__higgs_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "higgs_CutD_Factory_new_box" "', argument " "1"" of type '" "BH::cut::higgs_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::higgs_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__boxD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "higgs_CutD_Factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "higgs_CutD_Factory_new_box" "', argument " "2"" of type '" "BH::boxD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::boxD * >(argp2);
  result = (BH::cut::higgs_boxDarren *)(arg1)->new_box((BH::boxD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_higgs_CutD_Factory_new_triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::higgs_CutD_Factory *arg1 = (BH::cut::higgs_CutD_Factory *) 0 ;
  BH::triangleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::higgs_triangleDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:higgs_CutD_Factory_new_triangle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__higgs_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "higgs_CutD_Factory_new_triangle" "', argument " "1"" of type '" "BH::cut::higgs_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::higgs_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__triangleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "higgs_CutD_Factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "higgs_CutD_Factory_new_triangle" "', argument " "2"" of type '" "BH::triangleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::triangleD * >(argp2);
  result = (BH::cut::higgs_triangleDarren *)(arg1)->new_triangle((BH::triangleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_higgs_CutD_Factory_new_bubble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::higgs_CutD_Factory *arg1 = (BH::cut::higgs_CutD_Factory *) 0 ;
  BH::bubbleD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::cut::higgs_bubbleDarren *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:higgs_CutD_Factory_new_bubble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__higgs_CutD_Factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "higgs_CutD_Factory_new_bubble" "', argument " "1"" of type '" "BH::cut::higgs_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::higgs_CutD_Factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__bubbleD,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "higgs_CutD_Factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "higgs_CutD_Factory_new_bubble" "', argument " "2"" of type '" "BH::bubbleD const &""'"); 
  }
  arg2 = reinterpret_cast< BH::bubbleD * >(argp2);
  result = (BH::cut::higgs_bubbleDarren *)(arg1)->new_bubble((BH::bubbleD const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_higgs_CutD_Factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::higgs_CutD_Factory *arg1 = (BH::cut::higgs_CutD_Factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_higgs_CutD_Factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__higgs_CutD_Factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_higgs_CutD_Factory" "', argument " "1"" of type '" "BH::cut::higgs_CutD_Factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::higgs_CutD_Factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_higgs_CutD_Factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::higgs_CutD_Factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_higgs_CutD_Factory")) SWIG_fail;
  result = (BH::cut::higgs_CutD_Factory *)new BH::cut::higgs_CutD_Factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__higgs_CutD_Factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *higgs_CutD_Factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__higgs_CutD_Factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_normalCutPartDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID > *arg2 = 0 ;
  BH::ordering_constraint *arg3 = 0 ;
  BH::option *arg4 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_normalCutPartDarren",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_normalCutPartDarren" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_normalCutPartDarren" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_normalCutPartDarren" "', argument " "2"" of type '" "std::vector< BH::particle_ID > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_normalCutPartDarren" "', argument " "2"" of type '" "std::vector< BH::particle_ID > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_normalCutPartDarren" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_normalCutPartDarren" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< BH::ordering_constraint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_normalCutPartDarren" "', argument " "4"" of type '" "BH::option *""'"); 
  }
  arg4 = reinterpret_cast< BH::option * >(argp4);
  result = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *)new BH::cut::normal_cut_part< cut::Darren_CutD_Factory >((BH::process const &)*arg1,(std::vector< BH::particle_ID > const &)*arg2,(BH::ordering_constraint const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:normalCutPartDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:normalCutPartDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:normalCutPartDarren_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:normalCutPartDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:normalCutPartDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:normalCutPartDarren_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalCutPartDarren_eval" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalCutPartDarren_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalCutPartDarren_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_normalCutPartDarren_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_normalCutPartDarren_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_normalCutPartDarren_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_normalCutPartDarren_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_normalCutPartDarren_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_normalCutPartDarren_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'normalCutPartDarren_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::cut::normal_cut_part< cut::Darren_CutD_Factory >::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_normalCutPartDarren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *arg1 = (BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_normalCutPartDarren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_normalCutPartDarren" "', argument " "1"" of type '" "BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *""'"); 
  }
  arg1 = reinterpret_cast< BH::cut::normal_cut_part< cut::Darren_CutD_Factory > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *normalCutPartDarren_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  BH::mom_conf *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::R > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_D_Dims_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_eval" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::R >(static_cast< const BH::SeriesC< BH::R >& >(result))), SWIGTYPE_p_BH__SeriesCT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  BH::mom_conf_HP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_D_Dims_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_eval" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf_HP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_HP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RHP >(static_cast< const BH::SeriesC< BH::RHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  BH::mom_conf_VHP *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::SeriesC< BH::RVHP > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cut_Part_D_Dims_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_eval" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "2"" of type '" "BH::mom_conf_VHP &""'"); 
  }
  arg2 = reinterpret_cast< BH::mom_conf_VHP * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::SeriesC< BH::RVHP >(static_cast< const BH::SeriesC< BH::RVHP >& >(result))), SWIGTYPE_p_BH__SeriesCT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part_D_Dims, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__R_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_D_Dims_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part_D_Dims, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_D_Dims_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Cut_Part_D_Dims, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_BH__RVHP_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cut_Part_D_Dims_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cut_Part_D_Dims_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cut_Part_D_Dims::eval(BH::mom_conf &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Cut_Part_D_Dims::eval(BH::mom_conf_HP &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Cut_Part_D_Dims::eval(BH::mom_conf_VHP &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_pentagon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::pentagonD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_D_Dims_pentagon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_pentagon" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cut_Part_D_Dims_pentagon" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::pentagonD *)(arg1)->pentagon(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__pentagonD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_nbr_pentagons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cut_Part_D_Dims_nbr_pentagons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_nbr_pentagons" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  result = ((BH::Cut_Part_D_Dims const *)arg1)->nbr_pentagons();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part_D_Dims__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  cutD_D_Dims_factory *arg3 = (cutD_D_Dims_factory *) 0 ;
  BH::option *arg4 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cut_Part_D_Dims *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cut_Part_D_Dims",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_cutD_D_Dims_factory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "cutD_D_Dims_factory *""'"); 
  }
  arg3 = reinterpret_cast< cutD_D_Dims_factory * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part_D_Dims" "', argument " "4"" of type '" "BH::option *""'"); 
  }
  arg4 = reinterpret_cast< BH::option * >(argp4);
  result = (BH::Cut_Part_D_Dims *)new BH::Cut_Part_D_Dims((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part_D_Dims__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  cutD_D_Dims_factory *arg3 = (cutD_D_Dims_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Cut_Part_D_Dims *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cut_Part_D_Dims",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_cutD_D_Dims_factory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "cutD_D_Dims_factory *""'"); 
  }
  arg3 = reinterpret_cast< cutD_D_Dims_factory * >(argp3);
  result = (BH::Cut_Part_D_Dims *)new BH::Cut_Part_D_Dims((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part_D_Dims__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  BH::ordering_constraint *arg3 = 0 ;
  cutD_D_Dims_factory *arg4 = (cutD_D_Dims_factory *) 0 ;
  BH::option *arg5 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Cut_Part_D_Dims *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Cut_Part_D_Dims",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< BH::ordering_constraint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_cutD_D_Dims_factory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part_D_Dims" "', argument " "4"" of type '" "cutD_D_Dims_factory *""'"); 
  }
  arg4 = reinterpret_cast< cutD_D_Dims_factory * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Cut_Part_D_Dims" "', argument " "5"" of type '" "BH::option *""'"); 
  }
  arg5 = reinterpret_cast< BH::option * >(argp5);
  result = (BH::Cut_Part_D_Dims *)new BH::Cut_Part_D_Dims((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,(BH::ordering_constraint const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part_D_Dims__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg2 = 0 ;
  BH::ordering_constraint *arg3 = 0 ;
  cutD_D_Dims_factory *arg4 = (cutD_D_Dims_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cut_Part_D_Dims *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cut_Part_D_Dims",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "2"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__ordering_constraint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cut_Part_D_Dims" "', argument " "3"" of type '" "BH::ordering_constraint const &""'"); 
  }
  arg3 = reinterpret_cast< BH::ordering_constraint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_cutD_D_Dims_factory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cut_Part_D_Dims" "', argument " "4"" of type '" "cutD_D_Dims_factory *""'"); 
  }
  arg4 = reinterpret_cast< cutD_D_Dims_factory * >(argp4);
  result = (BH::Cut_Part_D_Dims *)new BH::Cut_Part_D_Dims((BH::process const &)*arg1,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg2,(BH::ordering_constraint const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cut_Part_D_Dims(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cutD_D_Dims_factory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cut_Part_D_Dims__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cutD_D_Dims_factory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__option, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Cut_Part_D_Dims__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_cutD_D_Dims_factory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Cut_Part_D_Dims__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__ordering_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_cutD_D_Dims_factory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_BH__option, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_Cut_Part_D_Dims__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Cut_Part_D_Dims'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cut_Part_D_Dims::Cut_Part_D_Dims(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,cutD_D_Dims_factory *,BH::option *)\n"
    "    BH::Cut_Part_D_Dims::Cut_Part_D_Dims(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,cutD_D_Dims_factory *)\n"
    "    BH::Cut_Part_D_Dims::Cut_Part_D_Dims(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::ordering_constraint const &,cutD_D_Dims_factory *,BH::option *)\n"
    "    BH::Cut_Part_D_Dims::Cut_Part_D_Dims(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::ordering_constraint const &,cutD_D_Dims_factory *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Cut_Part_D_Dims(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cut_Part_D_Dims",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cut_Part_D_Dims" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cut_Part_D_Dims_dry_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cut_Part_D_Dims *arg1 = (BH::Cut_Part_D_Dims *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cut_Part_D_Dims_dry_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Cut_Part_D_Dims, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cut_Part_D_Dims_dry_run" "', argument " "1"" of type '" "BH::Cut_Part_D_Dims *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cut_Part_D_Dims * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cut_Part_D_Dims_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cut_Part_D_Dims_dry_run" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->dry_run((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *Cut_Part_D_Dims_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Cut_Part_D_Dims, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_normal_ratext_factory_new_rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ratext::normal_ratext_factory *arg1 = (BH::ratext::normal_ratext_factory *) 0 ;
  BH::process *arg2 = 0 ;
  BH::color_structure arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:normal_ratext_factory_new_rational",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ratext__normal_ratext_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normal_ratext_factory_new_rational" "', argument " "1"" of type '" "BH::ratext::normal_ratext_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::ratext::normal_ratext_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normal_ratext_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normal_ratext_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "normal_ratext_factory_new_rational" "', argument " "3"" of type '" "BH::color_structure""'");
  } 
  arg3 = static_cast< BH::color_structure >(val3);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normal_ratext_factory_new_rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ratext::normal_ratext_factory *arg1 = (BH::ratext::normal_ratext_factory *) 0 ;
  BH::process *arg2 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg3 = 0 ;
  BH::option *arg4 = (BH::option *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Rational_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:normal_ratext_factory_new_rational",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ratext__normal_ratext_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normal_ratext_factory_new_rational" "', argument " "1"" of type '" "BH::ratext::normal_ratext_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::ratext::normal_ratext_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normal_ratext_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normal_ratext_factory_new_rational" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "normal_ratext_factory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normal_ratext_factory_new_rational" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_BH__option, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "normal_ratext_factory_new_rational" "', argument " "4"" of type '" "BH::option *""'"); 
  }
  arg4 = reinterpret_cast< BH::option * >(argp4);
  result = (BH::Rational_base *)(arg1)->new_rational((BH::process const &)*arg2,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__Rational_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normal_ratext_factory_new_rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__ratext__normal_ratext_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_normal_ratext_factory_new_rational__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__ratext__normal_ratext_factory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__process, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_BH__option, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_normal_ratext_factory_new_rational__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'normal_ratext_factory_new_rational'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::ratext::normal_ratext_factory::new_rational(BH::process const &,BH::color_structure)\n"
    "    BH::ratext::normal_ratext_factory::new_rational(BH::process const &,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &,BH::option *)\n");
  return 0;
}


SWIGINTERN int Swig_var_normal_ratext_factory_s_default_NRF_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""BH::ratext::normal_ratext_factory::s_default_NRF""' of type '""BH::Rational_factory< BH::Rational_base > *""'");
    }
    BH::ratext::normal_ratext_factory::s_default_NRF = reinterpret_cast< BH::Rational_factory< BH::Rational_base > * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_normal_ratext_factory_s_default_NRF_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(BH::ratext::normal_ratext_factory::s_default_NRF), SWIGTYPE_p_BH__Rational_factoryT_BH__Rational_base_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_normal_ratext_factory_s_default_NRF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_normal_ratext_factory_s_default_NRF_get();
}


SWIGINTERN PyObject *_wrap_normal_ratext_factory_s_default_NRF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_normal_ratext_factory_s_default_NRF_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_normal_ratext_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ratext::normal_ratext_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_normal_ratext_factory")) SWIG_fail;
  result = (BH::ratext::normal_ratext_factory *)new BH::ratext::normal_ratext_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__ratext__normal_ratext_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_normal_ratext_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::ratext::normal_ratext_factory *arg1 = (BH::ratext::normal_ratext_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_normal_ratext_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__ratext__normal_ratext_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_normal_ratext_factory" "', argument " "1"" of type '" "BH::ratext::normal_ratext_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::ratext::normal_ratext_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *normal_ratext_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__ratext__normal_ratext_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "write" "', argument " "1"" of type '" "BH::Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "write" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "write" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "write" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  BH::write(arg1,*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Rec_Tree *arg1 = (BH::Rec_Tree *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Rec_Tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "write" "', argument " "1"" of type '" "BH::Rec_Tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::Rec_Tree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "write" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "write" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  BH::write(arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_write(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_write__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Rec_Tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_write__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::write(BH::Rec_Tree *,std::ostream &,bool)\n"
    "    BH::write(BH::Rec_Tree *,std::ostream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_worker_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree *arg1 = (BH::worker_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_worker_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_worker_tree" "', argument " "1"" of type '" "BH::worker_tree *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_worker_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_worker_tree")) SWIG_fail;
  result = (BH::worker_tree *)new BH::worker_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *worker_tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__worker_tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_worker_tree_known(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::worker_tree_known *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_worker_tree_known",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_worker_tree_known" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_worker_tree_known" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  result = (BH::worker_tree_known *)new BH::worker_tree_known((BH::process const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree_known, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_eval" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'worker_tree_known_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::worker_tree_known::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::worker_tree_known::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::worker_tree_known::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_worker_tree_known(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known *arg1 = (BH::worker_tree_known *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_worker_tree_known",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_worker_tree_known" "', argument " "1"" of type '" "BH::worker_tree_known *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *worker_tree_known_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__worker_tree_known, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_worker_tree_known_offset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::worker_tree_known_offset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_worker_tree_known_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_worker_tree_known_offset" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_worker_tree_known_offset" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = (BH::worker_tree_known_offset *)new BH::worker_tree_known_offset(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree_known_offset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_worker_tree_known_offset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::process *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::worker_tree_known_offset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_worker_tree_known_offset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_worker_tree_known_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_worker_tree_known_offset" "', argument " "1"" of type '" "BH::process const &""'"); 
  }
  arg1 = reinterpret_cast< BH::process * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_worker_tree_known_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::worker_tree_known_offset *)new BH::worker_tree_known_offset((BH::process const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree_known_offset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_worker_tree_known_offset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_worker_tree_known_offset__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__process, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_worker_tree_known_offset__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_worker_tree_known_offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::worker_tree_known_offset::worker_tree_known_offset(std::istream &)\n"
    "    BH::worker_tree_known_offset::worker_tree_known_offset(BH::process const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_offset_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_offset_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_known_offset_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_known_offset_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_known_offset_eval" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_known_offset_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_known_offset_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_offset_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_offset_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_known_offset_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_offset_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_offset_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_known_offset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_known_offset_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'worker_tree_known_offset_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::worker_tree_known_offset::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known_offset::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known_offset::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_known_offset::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::worker_tree_known_offset::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::worker_tree_known_offset::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_worker_tree_known_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_known_offset *arg1 = (BH::worker_tree_known_offset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_worker_tree_known_offset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_known_offset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_worker_tree_known_offset" "', argument " "1"" of type '" "BH::worker_tree_known_offset *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_known_offset * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *worker_tree_known_offset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__worker_tree_known_offset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_worker_tree_unknown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::worker_tree_unknown *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_worker_tree_unknown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_worker_tree_unknown" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_worker_tree_unknown" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = (BH::worker_tree_unknown *)new BH::worker_tree_unknown(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree_unknown, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_unknown_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_unknown_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:worker_tree_unknown_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_unknown_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_unknown_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_unknown_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_unknown_eval" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_unknown_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_unknown_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_unknown_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_unknown_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_worker_tree_unknown_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_unknown_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_unknown_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__worker_tree_unknown, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_worker_tree_unknown_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'worker_tree_unknown_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::worker_tree_unknown::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_unknown::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_unknown::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::worker_tree_unknown::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::worker_tree_unknown::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::worker_tree_unknown::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_worker_tree_unknown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_unknown *arg1 = (BH::worker_tree_unknown *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_worker_tree_unknown",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_unknown, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_worker_tree_unknown" "', argument " "1"" of type '" "BH::worker_tree_unknown *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_unknown * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *worker_tree_unknown_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__worker_tree_unknown, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_indices_struct_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::indices_struct *arg1 = (BH::indices_struct *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:indices_struct_size_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__indices_struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "indices_struct_size_set" "', argument " "1"" of type '" "BH::indices_struct *""'"); 
  }
  arg1 = reinterpret_cast< BH::indices_struct * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "indices_struct_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_indices_struct_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::indices_struct *arg1 = (BH::indices_struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:indices_struct_size_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__indices_struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "indices_struct_size_get" "', argument " "1"" of type '" "BH::indices_struct *""'"); 
  }
  arg1 = reinterpret_cast< BH::indices_struct * >(argp1);
  result = (int) ((arg1)->size);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_indices_struct_indices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::indices_struct *arg1 = (BH::indices_struct *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:indices_struct_indices_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__indices_struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "indices_struct_indices_set" "', argument " "1"" of type '" "BH::indices_struct *""'"); 
  }
  arg1 = reinterpret_cast< BH::indices_struct * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "indices_struct_indices_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->indices = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_indices_struct_indices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::indices_struct *arg1 = (BH::indices_struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:indices_struct_indices_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__indices_struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "indices_struct_indices_get" "', argument " "1"" of type '" "BH::indices_struct *""'"); 
  }
  arg1 = reinterpret_cast< BH::indices_struct * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->indices);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_indices_struct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::indices_struct *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_indices_struct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_indices_struct" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_indices_struct" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_indices_struct" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (BH::indices_struct *)new BH::indices_struct(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__indices_struct, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_indices_struct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::indices_struct *arg1 = (BH::indices_struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_indices_struct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__indices_struct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_indices_struct" "', argument " "1"" of type '" "BH::indices_struct *""'"); 
  }
  arg1 = reinterpret_cast< BH::indices_struct * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *indices_struct_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__indices_struct, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Tree_Pair_base_indshiftl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_indshiftl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_indshiftl_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_indshiftl_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->indshiftl = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_indshiftl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_indshiftl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_indshiftl_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->indshiftl);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_indshiftr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_indshiftr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_indshiftr_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_indshiftr_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->indshiftr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_indshiftr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_indshiftr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_indshiftr_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->indshiftr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_maxl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_maxl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_maxl_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_maxl_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_maxl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_maxl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_maxl_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int) ((arg1)->maxl);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_maxr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_maxr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_maxr_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_maxr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_maxr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_maxr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_maxr_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int) ((arg1)->maxr);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_max_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_max_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_max_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_max_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->max = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_max_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_max_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_max_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int) ((arg1)->max);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_shifted_ind_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_shifted_ind_j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_shifted_ind_j_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_shifted_ind_j_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->shifted_ind_j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_shifted_ind_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_shifted_ind_j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_shifted_ind_j_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int) ((arg1)->shifted_ind_j);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_shifted_ind_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_shifted_ind_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_shifted_ind_i_set" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_shifted_ind_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->shifted_ind_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_shifted_ind_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_shifted_ind_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_shifted_ind_i_get" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int) ((arg1)->shifted_ind_i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_left_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_left_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_left_size" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int)(arg1)->left_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_right_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tree_Pair_base_right_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_right_size" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  result = (int)(arg1)->right_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_left_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_left_ind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_left_ind" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_left_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->left_ind(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_right_ind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_right_ind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_right_ind" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tree_Pair_base_right_ind" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->right_ind(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_right",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_right(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_right",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_right(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_right",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_right(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::R > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_left",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::R > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::R > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_left(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_left",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_left(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::momentum_configuration< BH::RVHP > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tree_Pair_base_eval_left",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::momentum_configuration< BH::RVHP > &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum_configuration< BH::RVHP > * >(argp2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->eval_left(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tree_Pair_base_eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Tree_Pair_base::eval(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval(BH::eval_param< BH::R > const &)\n"
    "    BH::Tree_Pair_base::eval(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Tree_Pair_base::eval(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_right",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval_right((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_right",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval_right((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_right",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_right" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_right" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval_right((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_right(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_right__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_right__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_right__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_right__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_right__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_right__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tree_Pair_base_eval_right'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Tree_Pair_base::eval_right(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_right(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_right(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_right(BH::eval_param< BH::R > const &)\n"
    "    BH::Tree_Pair_base::eval_right(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Tree_Pair_base::eval_right(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::R > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::C result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_left",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::R > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::R > * >(argp2);
  result = (arg1)->eval_left((BH::eval_param< BH::R > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_left",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_dd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::RHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RHP > * >(argp2);
  result = (arg1)->eval_left((BH::eval_param< BH::RHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CHP(static_cast< const BH::CHP& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  BH::eval_param< BH::RVHP > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::CVHP result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tree_Pair_base_eval_left",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tree_Pair_base_eval_left" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__eval_paramT_qd_real_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tree_Pair_base_eval_left" "', argument " "2"" of type '" "BH::eval_param< BH::RVHP > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::eval_param< BH::RVHP > * >(argp2);
  result = (arg1)->eval_left((BH::eval_param< BH::RVHP > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::CVHP(static_cast< const BH::CVHP& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tree_Pair_base_eval_left(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_left__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_left__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__eval_paramT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tree_Pair_base_eval_left__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_left__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_dd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_left__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__Tree_Pair_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BH__momentum_configurationT_qd_real_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Tree_Pair_base_eval_left__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tree_Pair_base_eval_left'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Tree_Pair_base::eval_left(BH::momentum_configuration< BH::R > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_left(BH::momentum_configuration< BH::RHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_left(BH::momentum_configuration< BH::RVHP > &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::Tree_Pair_base::eval_left(BH::eval_param< BH::R > const &)\n"
    "    BH::Tree_Pair_base::eval_left(BH::eval_param< BH::RHP > const &)\n"
    "    BH::Tree_Pair_base::eval_left(BH::eval_param< BH::RVHP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Tree_Pair_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Tree_Pair_base *arg1 = (BH::Tree_Pair_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Tree_Pair_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__Tree_Pair_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tree_Pair_base" "', argument " "1"" of type '" "BH::Tree_Pair_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::Tree_Pair_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tree_Pair_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__Tree_Pair_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_shift_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::shift_base *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_shift_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_shift_base" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_shift_base" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = (BH::shift_base *)new BH::shift_base(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__shift_base, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_shift_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::shift_base *arg1 = (BH::shift_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_shift_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__shift_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_shift_base" "', argument " "1"" of type '" "BH::shift_base *""'"); 
  }
  arg1 = reinterpret_cast< BH::shift_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *shift_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__shift_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_create_worker_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::worker_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:create_worker_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_worker_tree" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_worker_tree" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = (BH::worker_tree *)BH::create_worker_tree(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_worker_tree_factory_new_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_factory *arg1 = (BH::worker_tree_factory *) 0 ;
  BH::process *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::worker_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:worker_tree_factory_new_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_factory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "worker_tree_factory_new_tree" "', argument " "1"" of type '" "BH::worker_tree_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_factory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__process,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "worker_tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "worker_tree_factory_new_tree" "', argument " "2"" of type '" "BH::process const &""'"); 
  }
  arg2 = reinterpret_cast< BH::process * >(argp2);
  result = (BH::worker_tree *)(arg1)->new_tree((BH::process const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_worker_tree_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_factory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_worker_tree_factory")) SWIG_fail;
  result = (BH::worker_tree_factory *)new BH::worker_tree_factory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__worker_tree_factory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_worker_tree_factory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::worker_tree_factory *arg1 = (BH::worker_tree_factory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_worker_tree_factory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__worker_tree_factory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_worker_tree_factory" "', argument " "1"" of type '" "BH::worker_tree_factory *""'"); 
  }
  arg1 = reinterpret_cast< BH::worker_tree_factory * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *worker_tree_factory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__worker_tree_factory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_C__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_C",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_C" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_C" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_C__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_C",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_C" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_C__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_C")) SWIG_fail;
  result = (std::complex< double > *)new std::complex< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_C(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_C__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_C__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_C__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_C'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_C_real__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:C_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_real" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  result = (double *) &(arg1)->real();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_real__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:C_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_real" "', argument " "1"" of type '" "std::complex< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  result = (double *) &((std::complex< double > const *)arg1)->real();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_imag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:C_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_imag" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  result = (double *) &(arg1)->imag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_imag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:C_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_imag" "', argument " "1"" of type '" "std::complex< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  result = (double *) &((std::complex< double > const *)arg1)->imag();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_real__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C_real",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_real" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C_real" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->real(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_real(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_C_real__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_C_real__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_C_real__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'C_real'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real()\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_C_imag__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C_imag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_imag" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C_imag" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->imag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C_imag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_C_imag__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_C_imag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_C_imag__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'C_imag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag()\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_C___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C___iadd__" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C___iadd__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::complex< double > *) &(arg1)->operator +=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C___isub__" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C___isub__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::complex< double > *) &(arg1)->operator -=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C___imul__" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C___imul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::complex< double > *) &(arg1)->operator *=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:C___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C___idiv__" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "C___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::complex< double > *) &(arg1)->operator /=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_C___rep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:C___rep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C___rep" "', argument " "1"" of type '" "std::complex< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  result = ((std::complex< double > const *)arg1)->__rep();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_C(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_C",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *C_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__complexT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dd_real *arg1 = 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  arg1 = reinterpret_cast< dd_real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CHP" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CHP" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (std::complex< dd_real > *)new std::complex< dd_real >((dd_real const &)*arg1,(dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dd_real *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CHP" "', argument " "1"" of type '" "dd_real const &""'"); 
  }
  arg1 = reinterpret_cast< dd_real * >(argp1);
  result = (std::complex< dd_real > *)new std::complex< dd_real >((dd_real const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CHP")) SWIG_fail;
  result = (std::complex< dd_real > *)new std::complex< dd_real >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CHP__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CHP__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CHP__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< dd_real >::complex(dd_real const &,dd_real const &)\n"
    "    std::complex< dd_real >::complex(dd_real const &)\n"
    "    std::complex< dd_real >::complex()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CHP_real__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CHP_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_real" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  result = (dd_real *) &(arg1)->real();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_real__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CHP_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_real" "', argument " "1"" of type '" "std::complex< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  result = (dd_real *) &((std::complex< dd_real > const *)arg1)->real();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_imag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CHP_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_imag" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  result = (dd_real *) &(arg1)->imag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_imag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  dd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CHP_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_imag" "', argument " "1"" of type '" "std::complex< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  result = (dd_real *) &((std::complex< dd_real > const *)arg1)->imag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_real__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP_real",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_real" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP_real" "', argument " "2"" of type '" "dd_real""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP_real" "', argument " "2"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->real(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_real(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CHP_real__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CHP_real__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CHP_real__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CHP_real'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< dd_real >::real()\n"
    "    std::complex< dd_real >::real() const\n"
    "    std::complex< dd_real >::real(dd_real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CHP_imag__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP_imag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP_imag" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP_imag" "', argument " "2"" of type '" "dd_real""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP_imag" "', argument " "2"" of type '" "dd_real""'");
    } else {
      dd_real * temp = reinterpret_cast< dd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->imag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP_imag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CHP_imag__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CHP_imag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_dd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CHP_imag__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CHP_imag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< dd_real >::imag()\n"
    "    std::complex< dd_real >::imag() const\n"
    "    std::complex< dd_real >::imag(dd_real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CHP___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP___iadd__" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP___iadd__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP___iadd__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (std::complex< dd_real > *) &(arg1)->operator +=((dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP___isub__" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP___isub__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP___isub__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (std::complex< dd_real > *) &(arg1)->operator -=((dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP___imul__" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP___imul__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP___imul__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (std::complex< dd_real > *) &(arg1)->operator *=((dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  dd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< dd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CHP___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP___idiv__" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHP___idiv__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHP___idiv__" "', argument " "2"" of type '" "dd_real const &""'"); 
  }
  arg2 = reinterpret_cast< dd_real * >(argp2);
  result = (std::complex< dd_real > *) &(arg1)->operator /=((dd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHP___rep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< dd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CHP___rep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHP___rep" "', argument " "1"" of type '" "std::complex< dd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  result = ((std::complex< dd_real > const *)arg1)->__rep();
  resultobj = SWIG_NewPointerObj((new std::complex< dd_real >(static_cast< const std::complex< dd_real >& >(result))), SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< dd_real > *arg1 = (std::complex< dd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_dd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CHP" "', argument " "1"" of type '" "std::complex< dd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< dd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__complexT_dd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CVHP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qd_real *arg1 = 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CVHP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  arg1 = reinterpret_cast< qd_real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CVHP" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CVHP" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (std::complex< qd_real > *)new std::complex< qd_real >((qd_real const &)*arg1,(qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVHP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  qd_real *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CVHP" "', argument " "1"" of type '" "qd_real const &""'"); 
  }
  arg1 = reinterpret_cast< qd_real * >(argp1);
  result = (std::complex< qd_real > *)new std::complex< qd_real >((qd_real const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVHP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CVHP")) SWIG_fail;
  result = (std::complex< qd_real > *)new std::complex< qd_real >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CVHP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CVHP__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CVHP__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_qd_real, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CVHP__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CVHP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< qd_real >::complex(qd_real const &,qd_real const &)\n"
    "    std::complex< qd_real >::complex(qd_real const &)\n"
    "    std::complex< qd_real >::complex()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CVHP_real__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  qd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CVHP_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_real" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  result = (qd_real *) &(arg1)->real();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_real__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  qd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CVHP_real",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_real" "', argument " "1"" of type '" "std::complex< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  result = (qd_real *) &((std::complex< qd_real > const *)arg1)->real();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_imag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  qd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CVHP_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_imag" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  result = (qd_real *) &(arg1)->imag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_imag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  qd_real *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CVHP_imag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_imag" "', argument " "1"" of type '" "std::complex< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  result = (qd_real *) &((std::complex< qd_real > const *)arg1)->imag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qd_real, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_real__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP_real",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_real" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP_real" "', argument " "2"" of type '" "qd_real""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP_real" "', argument " "2"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->real(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_real(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CVHP_real__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CVHP_real__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CVHP_real__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CVHP_real'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< qd_real >::real()\n"
    "    std::complex< qd_real >::real() const\n"
    "    std::complex< qd_real >::real(qd_real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CVHP_imag__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP_imag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP_imag" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP_imag" "', argument " "2"" of type '" "qd_real""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP_imag" "', argument " "2"" of type '" "qd_real""'");
    } else {
      qd_real * temp = reinterpret_cast< qd_real * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->imag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP_imag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CVHP_imag__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CVHP_imag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_qd_real_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_qd_real, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CVHP_imag__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CVHP_imag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< qd_real >::imag()\n"
    "    std::complex< qd_real >::imag() const\n"
    "    std::complex< qd_real >::imag(qd_real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CVHP___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP___iadd__" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP___iadd__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP___iadd__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (std::complex< qd_real > *) &(arg1)->operator +=((qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP___isub__" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP___isub__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP___isub__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (std::complex< qd_real > *) &(arg1)->operator -=((qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP___imul__" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP___imul__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP___imul__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (std::complex< qd_real > *) &(arg1)->operator *=((qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  qd_real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< qd_real > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CVHP___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP___idiv__" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_qd_real,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CVHP___idiv__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CVHP___idiv__" "', argument " "2"" of type '" "qd_real const &""'"); 
  }
  arg2 = reinterpret_cast< qd_real * >(argp2);
  result = (std::complex< qd_real > *) &(arg1)->operator /=((qd_real const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CVHP___rep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< qd_real > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CVHP___rep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CVHP___rep" "', argument " "1"" of type '" "std::complex< qd_real > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  result = ((std::complex< qd_real > const *)arg1)->__rep();
  resultobj = SWIG_NewPointerObj((new std::complex< qd_real >(static_cast< const std::complex< qd_real >& >(result))), SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CVHP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< qd_real > *arg1 = (std::complex< qd_real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CVHP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_qd_real_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CVHP" "', argument " "1"" of type '" "std::complex< qd_real > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< qd_real > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CVHP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__complexT_qd_real_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorpID_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_iterator" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_BH_particle_ID_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___nonzero__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (bool)std_vector_Sl_BH_particle_ID_Sg____nonzero__((std::vector< BH::particle_ID > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___bool__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (bool)std_vector_Sl_BH_particle_ID_Sg____bool__((std::vector< BH::particle_ID > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___len__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = std_vector_Sl_BH_particle_ID_Sg____len__((std::vector< BH::particle_ID > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_pop" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  try {
    result = std_vector_Sl_BH_particle_ID_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< BH::particle_ID >::value_type(static_cast< const std::vector< BH::particle_ID >::value_type& >(result))), SWIGTYPE_p_BH__particle_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  std::vector< BH::particle_ID >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___getslice__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___getslice__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpID___getslice__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BH::particle_ID >::difference_type >(val3);
  try {
    result = (std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *)std_vector_Sl_BH_particle_ID_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  std::vector< BH::particle_ID >::difference_type arg3 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorpID___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___setslice__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___setslice__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpID___setslice__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BH::particle_ID >::difference_type >(val3);
  {
    std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *ptr = (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorpID___setslice__" "', argument " "4"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID___setslice__" "', argument " "4"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_BH_particle_ID_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  std::vector< BH::particle_ID >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___setslice__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___setslice__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpID___setslice__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BH::particle_ID >::difference_type >(val3);
  try {
    std_vector_Sl_BH_particle_ID_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorpID___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorpID___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::__setslice__(std::vector< BH::particle_ID >::difference_type,std::vector< BH::particle_ID >::difference_type,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    std::vector< BH::particle_ID >::__setslice__(std::vector< BH::particle_ID >::difference_type,std::vector< BH::particle_ID >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  std::vector< BH::particle_ID >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___delslice__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___delslice__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpID___delslice__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< BH::particle_ID >::difference_type >(val3);
  try {
    std_vector_Sl_BH_particle_ID_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___delitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___delitem__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  try {
    std_vector_Sl_BH_particle_ID_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___getitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *)std_vector_Sl_BH_particle_ID_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___setitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *ptr = (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpID___setitem__" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID___setitem__" "', argument " "3"" of type '" "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___setitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___delitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_BH_particle_ID_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorpID___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpID___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::__delitem__(std::vector< BH::particle_ID >::difference_type)\n"
    "    std::vector< BH::particle_ID >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle_ID >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___getitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___getitem__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  try {
    result = (std::vector< BH::particle_ID >::value_type *) &std_vector_Sl_BH_particle_ID_Sg____getitem____SWIG_1((std::vector< BH::particle_ID > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorpID___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpID___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::__getitem__(PySliceObject *)\n"
    "    std::vector< BH::particle_ID >::__getitem__(std::vector< BH::particle_ID >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::difference_type arg2 ;
  std::vector< BH::particle_ID >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID___setitem__" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID___setitem__" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpID___setitem__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID___setitem__" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp3);
  try {
    std_vector_Sl_BH_particle_ID_Sg____setitem____SWIG_2(arg1,arg2,(BH::particle_ID const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorpID___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpID___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpID___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::__setitem__(PySliceObject *,std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > const &)\n"
    "    std::vector< BH::particle_ID >::__setitem__(PySliceObject *)\n"
    "    std::vector< BH::particle_ID >::__setitem__(std::vector< BH::particle_ID >::difference_type,std::vector< BH::particle_ID >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_append" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpID_append" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_append" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp2);
  std_vector_Sl_BH_particle_ID_Sg__append(arg1,(BH::particle_ID const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorpID")) SWIG_fail;
  result = (std::vector< BH::particle_ID > *)new std::vector< BH::particle_ID >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorpID",&obj0)) SWIG_fail;
  {
    std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *ptr = (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorpID" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorpID" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< BH::particle_ID > *)new std::vector< BH::particle_ID >((std::vector< BH::particle_ID > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_empty" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (bool)((std::vector< BH::particle_ID > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_size" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = ((std::vector< BH::particle_ID > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_clear" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_swap" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpID_swap" "', argument " "2"" of type '" "std::vector< BH::particle_ID > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_swap" "', argument " "2"" of type '" "std::vector< BH::particle_ID > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< BH::particle_ID > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_get_allocator" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = ((std::vector< BH::particle_ID > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< BH::particle_ID >::allocator_type(static_cast< const std::vector< BH::particle_ID >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_BH__particle_ID_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_begin" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_end" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_rbegin" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_rend" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpID__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorpID",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorpID" "', argument " "1"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg1 = static_cast< std::vector< BH::particle_ID >::size_type >(val1);
  result = (std::vector< BH::particle_ID > *)new std::vector< BH::particle_ID >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_pop_back" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_resize" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID_resize" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle_ID >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_erase" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::iterator arg2 ;
  std::vector< BH::particle_ID >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BH::particle_ID >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_erase" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_erase" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorpID_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorpID_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::erase(std::vector< BH::particle_ID >::iterator)\n"
    "    std::vector< BH::particle_ID >::erase(std::vector< BH::particle_ID >::iterator,std::vector< BH::particle_ID >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorpID__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID >::size_type arg1 ;
  std::vector< BH::particle_ID >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< BH::particle_ID > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorpID",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorpID" "', argument " "1"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg1 = static_cast< std::vector< BH::particle_ID >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorpID" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorpID" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp2);
  result = (std::vector< BH::particle_ID > *)new std::vector< BH::particle_ID >(arg1,(std::vector< BH::particle_ID >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorpID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorpID__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorpID__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorpID__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__particle_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorpID__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorpID'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::vector()\n"
    "    std::vector< BH::particle_ID >::vector(std::vector< BH::particle_ID > const &)\n"
    "    std::vector< BH::particle_ID >::vector(std::vector< BH::particle_ID >::size_type)\n"
    "    std::vector< BH::particle_ID >::vector(std::vector< BH::particle_ID >::size_type,std::vector< BH::particle_ID >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_push_back" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorpID_push_back" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_push_back" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp2);
  (arg1)->push_back((std::vector< BH::particle_ID >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_front" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (std::vector< BH::particle_ID >::value_type *) &((std::vector< BH::particle_ID > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_back" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = (std::vector< BH::particle_ID >::value_type *) &((std::vector< BH::particle_ID > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__particle_ID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::size_type arg2 ;
  std::vector< BH::particle_ID >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_assign" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID_assign" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpID_assign" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_assign" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< BH::particle_ID >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::size_type arg2 ;
  std::vector< BH::particle_ID >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_resize" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID_resize" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpID_resize" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_resize" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< BH::particle_ID >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorpID_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpID_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::resize(std::vector< BH::particle_ID >::size_type)\n"
    "    std::vector< BH::particle_ID >::resize(std::vector< BH::particle_ID >::size_type,std::vector< BH::particle_ID >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::iterator arg2 ;
  std::vector< BH::particle_ID >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< BH::particle_ID >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorpID_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_insert" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_insert" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_insert" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorpID_insert" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_insert" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< BH::particle_ID >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< BH::particle_ID >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::iterator arg2 ;
  std::vector< BH::particle_ID >::size_type arg3 ;
  std::vector< BH::particle_ID >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorpID_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_insert" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_insert" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorpID_insert" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorpID_insert" "', argument " "3"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg3 = static_cast< std::vector< BH::particle_ID >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__particle_ID,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorpID_insert" "', argument " "4"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorpID_insert" "', argument " "4"" of type '" "std::vector< BH::particle_ID >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< BH::particle_ID >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< BH::particle_ID >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__particle_ID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorpID_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<BH::particle_ID,std::allocator< BH::particle_ID > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< BH::particle_ID >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__particle_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorpID_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorpID_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< BH::particle_ID >::insert(std::vector< BH::particle_ID >::iterator,std::vector< BH::particle_ID >::value_type const &)\n"
    "    std::vector< BH::particle_ID >::insert(std::vector< BH::particle_ID >::iterator,std::vector< BH::particle_ID >::size_type,std::vector< BH::particle_ID >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorpID_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  std::vector< BH::particle_ID >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorpID_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_reserve" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorpID_reserve" "', argument " "2"" of type '" "std::vector< BH::particle_ID >::size_type""'");
  } 
  arg2 = static_cast< std::vector< BH::particle_ID >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorpID_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< BH::particle_ID >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorpID_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorpID_capacity" "', argument " "1"" of type '" "std::vector< BH::particle_ID > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  result = ((std::vector< BH::particle_ID > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorpID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::particle_ID > *arg1 = (std::vector< BH::particle_ID > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorpID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorpID" "', argument " "1"" of type '" "std::vector< BH::particle_ID > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::particle_ID > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorpID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cmomd_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::momentum< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_P",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_P" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = (BH::momentum< std::complex< double > > *) &((BH::Cmom< double > const *)arg1)->P();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_E",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_E" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = ((BH::Cmom< double > const *)arg1)->E();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_X(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_X",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_X" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = ((BH::Cmom< double > const *)arg1)->X();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_Y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_Y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_Y" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = ((BH::Cmom< double > const *)arg1)->Y();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_Z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_Z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_Z" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = ((BH::Cmom< double > const *)arg1)->Z();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_L(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_L",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_L" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = (BH::lambda< double > *) &((BH::Cmom< double > const *)arg1)->L();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_Lt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_Lt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_Lt" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = (BH::lambdat< double > *) &((BH::Cmom< double > const *)arg1)->Lt();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::momentum_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_type" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = (BH::momentum_type)((BH::Cmom< double > const *)arg1)->type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_Sm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BH::smatrix< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd_Sm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_Sm" "', argument " "1"" of type '" "BH::Cmom< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = ((BH::Cmom< double > const *)arg1)->Sm();
  resultobj = SWIG_NewPointerObj((new BH::smatrix< double >(static_cast< const BH::smatrix< double >& >(result))), SWIGTYPE_p_BH__smatrixT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Cmomd")) SWIG_fail;
  result = (BH::Cmom< double > *)new BH::Cmom< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  BH::momentum_type arg5 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Cmomd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cmomd" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Cmomd" "', argument " "5"" of type '" "BH::momentum_type""'");
  } 
  arg5 = static_cast< BH::momentum_type >(val5);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cmomd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cmomd" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  result = (BH::Cmom< double > *)new BH::Cmom< double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > *arg3 = 0 ;
  std::complex< double > *arg4 = 0 ;
  BH::momentum_type arg5 ;
  std::complex< double > temp1 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  std::complex< double > temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > temp4 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Cmomd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  temp1 = static_cast< std::complex< double > >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  temp3 = static_cast< std::complex< double > >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cmomd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  temp4 = static_cast< std::complex< double > >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Cmomd" "', argument " "5"" of type '" "BH::momentum_type""'");
  } 
  arg5 = static_cast< BH::momentum_type >(val5);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2,(std::complex< double > const &)*arg3,(std::complex< double > const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > *arg3 = 0 ;
  std::complex< double > *arg4 = 0 ;
  std::complex< double > temp1 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  std::complex< double > temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  std::complex< double > temp4 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cmomd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  temp1 = static_cast< std::complex< double > >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  temp3 = static_cast< std::complex< double > >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cmomd" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  temp4 = static_cast< std::complex< double > >(val4);
  arg4 = &temp4;
  result = (BH::Cmom< double > *)new BH::Cmom< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2,(std::complex< double > const &)*arg3,(std::complex< double > const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< double > *arg1 = 0 ;
  BH::momentum_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cmomd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::momentum_type""'");
  } 
  arg2 = static_cast< BH::momentum_type >(val2);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< double > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cmomd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< double > * >(argp1);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  BH::momentum_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cmomd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::momentum_type""'");
  } 
  arg2 = static_cast< BH::momentum_type >(val2);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< std::complex< double > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cmomd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< std::complex< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambdat< double > *arg1 = 0 ;
  BH::lambda< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cmomd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::lambdat< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambda< double > * >(argp2);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::lambdat< double > const &)*arg1,(BH::lambda< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::lambda< double > *arg1 = 0 ;
  BH::lambdat< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cmomd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::lambda< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambdat< double > * >(argp2);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::lambda< double > const &)*arg1,(BH::lambdat< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  BH::lambda< double > *arg2 = 0 ;
  BH::lambdat< double > *arg3 = 0 ;
  BH::momentum_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cmomd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambda< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambdat< double > * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Cmomd" "', argument " "4"" of type '" "BH::momentum_type""'");
  } 
  arg4 = static_cast< BH::momentum_type >(val4);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< std::complex< double > > const &)*arg1,(BH::lambda< double > const &)*arg2,(BH::lambdat< double > const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum< std::complex< double > > *arg1 = 0 ;
  BH::lambda< double > *arg2 = 0 ;
  BH::lambdat< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cmomd",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "1"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambda< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cmomd" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cmomd" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambdat< double > * >(argp3);
  result = (BH::Cmom< double > *)new BH::Cmom< double >((BH::momentum< std::complex< double > > const &)*arg1,(BH::lambda< double > const &)*arg2,(BH::lambdat< double > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmomd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Cmomd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cmomd__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cmomd__SWIG_8(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Cmomd__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Cmomd__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cmomd__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cmomd__SWIG_10(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cmomd__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Cmomd__SWIG_11(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Cmomd__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Cmomd__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Cmomd__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Cmomd__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Cmomd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cmom< double >::Cmom()\n"
    "    BH::Cmom< double >::Cmom(double const &,double const &,double const &,double const &,BH::momentum_type)\n"
    "    BH::Cmom< double >::Cmom(double const &,double const &,double const &,double const &)\n"
    "    BH::Cmom< double >::Cmom(std::complex< double > const &,std::complex< double > const &,std::complex< double > const &,std::complex< double > const &,BH::momentum_type)\n"
    "    BH::Cmom< double >::Cmom(std::complex< double > const &,std::complex< double > const &,std::complex< double > const &,std::complex< double > const &)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< double > const &,BH::momentum_type)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< double > const &)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< std::complex< double > > const &,BH::momentum_type)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< std::complex< double > > const &)\n"
    "    BH::Cmom< double >::Cmom(BH::lambdat< double > const &,BH::lambda< double > const &)\n"
    "    BH::Cmom< double >::Cmom(BH::lambda< double > const &,BH::lambdat< double > const &)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< std::complex< double > > const &,BH::lambda< double > const &,BH::lambdat< double > const &,BH::momentum_type)\n"
    "    BH::Cmom< double >::Cmom(BH::momentum< std::complex< double > > const &,BH::lambda< double > const &,BH::lambdat< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cmomd___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___iadd__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd___iadd__" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd___iadd__" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  result = (arg1)->operator +=((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___isub__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd___isub__" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd___isub__" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  result = (arg1)->operator -=((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___imul__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd___imul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (arg1)->operator *=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___imul__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd___imul__" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  result = (arg1)->operator *=((std::complex< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cmomd___imul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cmomd___imul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cmomd___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cmom< double >::operator *=(double const &)\n"
    "    BH::Cmom< double >::operator *=(std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cmomd___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___idiv__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (arg1)->operator /=((double const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___idiv__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd___idiv__" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  result = (arg1)->operator /=((std::complex< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new BH::Cmom< double >(static_cast< const BH::Cmom< double >& >(result))), SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cmomd___idiv____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cmomd___idiv____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cmomd___idiv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cmom< double >::operator /=(double const &)\n"
    "    BH::Cmom< double >::operator /=(std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cmomd_add_to_M(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_add_to_M",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_add_to_M" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_add_to_M" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_add_to_M" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  (arg1)->add_to_M((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_add_to_U(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_add_to_U",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_add_to_U" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_add_to_U" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_add_to_U" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  (arg1)->add_to_U((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_set_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_set_to" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  (arg1)->set_to((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to_M(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::momentum< std::complex< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_set_to_M",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_set_to_M" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_set_to_M" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to_M" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp2);
  (arg1)->set_to_M((BH::momentum< std::complex< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to_U(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::momentum< std::complex< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_set_to_U",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_set_to_U" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_set_to_U" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to_U" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp2);
  (arg1)->set_to_U((BH::momentum< std::complex< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::lambdat< double > *arg2 = 0 ;
  BH::lambda< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cmomd_set_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_set_to" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambdat< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cmomd_set_to" "', argument " "3"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to" "', argument " "3"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambda< double > * >(argp3);
  (arg1)->set_to((BH::lambdat< double > const &)*arg2,(BH::lambda< double > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  BH::lambda< double > *arg2 = 0 ;
  BH::lambdat< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cmomd_set_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_set_to" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambda< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cmomd_set_to" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cmomd_set_to" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambdat< double > * >(argp3);
  (arg1)->set_to((BH::lambda< double > const &)*arg2,(BH::lambdat< double > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_set_to(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cmomd_set_to__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cmomd_set_to__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cmomd_set_to__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cmomd_set_to'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::Cmom< double >::set_to(BH::Cmom< double > const &)\n"
    "    BH::Cmom< double >::set_to(BH::lambdat< double > const &,BH::lambda< double > const &)\n"
    "    BH::Cmom< double >::set_to(BH::lambda< double > const &,BH::lambdat< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cmomd_mult_by_M(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_mult_by_M",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_mult_by_M" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd_mult_by_M" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  (arg1)->mult_by_M((std::complex< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd_mult_by_U(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cmomd_mult_by_U",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd_mult_by_U" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmomd_mult_by_U" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  temp2 = static_cast< std::complex< double > >(val2);
  arg2 = &temp2;
  (arg1)->mult_by_U((std::complex< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmomd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmomd___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmomd___str__" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = BH_Cmom_Sl_double_Sg____str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cmomd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = (BH::Cmom< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cmomd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__CmomT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cmomd" "', argument " "1"" of type '" "BH::Cmom< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cmomd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__CmomT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_mcd_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mcd_n",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_n" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  result = (arg1)->n();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_p",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_p" "', argument " "1"" of type '" "BH::momentum_configuration< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_p" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::Cmom< double > *) &((BH::momentum_configuration< double > const *)arg1)->p(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::momentum< std::complex< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_mom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_mom" "', argument " "1"" of type '" "BH::momentum_configuration< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_mom" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::momentum< std::complex< double > > *) &((BH::momentum_configuration< double > const *)arg1)->mom(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::Cmom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd___call__" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd___call__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::Cmom< double > *) &(arg1)->operator ()(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__CmomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mcd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mcd" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_mcd")) SWIG_fail;
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mcd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > * >(argp1);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mcd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_mcd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_mcd",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_mcd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  BH::Cmom< double > *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg8 = reinterpret_cast< BH::Cmom< double > * >(argp8);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7,(BH::Cmom< double > const &)*arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  BH::Cmom< double > *arg8 = 0 ;
  BH::Cmom< double > *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg8 = reinterpret_cast< BH::Cmom< double > * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg9 = reinterpret_cast< BH::Cmom< double > * >(argp9);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7,(BH::Cmom< double > const &)*arg8,(BH::Cmom< double > const &)*arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  BH::Cmom< double > *arg8 = 0 ;
  BH::Cmom< double > *arg9 = 0 ;
  BH::Cmom< double > *arg10 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg8 = reinterpret_cast< BH::Cmom< double > * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg9 = reinterpret_cast< BH::Cmom< double > * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg10 = reinterpret_cast< BH::Cmom< double > * >(argp10);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7,(BH::Cmom< double > const &)*arg8,(BH::Cmom< double > const &)*arg9,(BH::Cmom< double > const &)*arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  BH::Cmom< double > *arg8 = 0 ;
  BH::Cmom< double > *arg9 = 0 ;
  BH::Cmom< double > *arg10 = 0 ;
  BH::Cmom< double > *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg8 = reinterpret_cast< BH::Cmom< double > * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg9 = reinterpret_cast< BH::Cmom< double > * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg10 = reinterpret_cast< BH::Cmom< double > * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_mcd" "', argument " "11"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "11"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg11 = reinterpret_cast< BH::Cmom< double > * >(argp11);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7,(BH::Cmom< double > const &)*arg8,(BH::Cmom< double > const &)*arg9,(BH::Cmom< double > const &)*arg10,(BH::Cmom< double > const &)*arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::Cmom< double > *arg1 = 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::Cmom< double > *arg3 = 0 ;
  BH::Cmom< double > *arg4 = 0 ;
  BH::Cmom< double > *arg5 = 0 ;
  BH::Cmom< double > *arg6 = 0 ;
  BH::Cmom< double > *arg7 = 0 ;
  BH::Cmom< double > *arg8 = 0 ;
  BH::Cmom< double > *arg9 = 0 ;
  BH::Cmom< double > *arg10 = 0 ;
  BH::Cmom< double > *arg11 = 0 ;
  BH::Cmom< double > *arg12 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  BH::momentum_configuration< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:new_mcd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "1"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg1 = reinterpret_cast< BH::Cmom< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "3"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::Cmom< double > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "4"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg4 = reinterpret_cast< BH::Cmom< double > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "5"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg5 = reinterpret_cast< BH::Cmom< double > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "6"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg6 = reinterpret_cast< BH::Cmom< double > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "7"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg7 = reinterpret_cast< BH::Cmom< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "8"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg8 = reinterpret_cast< BH::Cmom< double > * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "9"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg9 = reinterpret_cast< BH::Cmom< double > * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "10"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg10 = reinterpret_cast< BH::Cmom< double > * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_mcd" "', argument " "11"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "11"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg11 = reinterpret_cast< BH::Cmom< double > * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "new_mcd" "', argument " "12"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp12) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mcd" "', argument " "12"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg12 = reinterpret_cast< BH::Cmom< double > * >(argp12);
  result = (BH::momentum_configuration< double > *)new BH::momentum_configuration< double >((BH::Cmom< double > const &)*arg1,(BH::Cmom< double > const &)*arg2,(BH::Cmom< double > const &)*arg3,(BH::Cmom< double > const &)*arg4,(BH::Cmom< double > const &)*arg5,(BH::Cmom< double > const &)*arg6,(BH::Cmom< double > const &)*arg7,(BH::Cmom< double > const &)*arg8,(BH::Cmom< double > const &)*arg9,(BH::Cmom< double > const &)*arg10,(BH::Cmom< double > const &)*arg11,(BH::Cmom< double > const &)*arg12);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mcd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[13];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 12) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_mcd__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mcd__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mcd__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_mcd__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_mcd__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_mcd__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_mcd__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_mcd__SWIG_7(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_mcd__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_mcd__SWIG_9(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_mcd__SWIG_10(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_mcd__SWIG_11(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_mcd__SWIG_12(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_mcd__SWIG_13(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = SWIG_ConvertPtr(argv[9], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        int res = SWIG_ConvertPtr(argv[10], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          int res = SWIG_ConvertPtr(argv[11], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
                          _v = SWIG_CheckState(res);
                          if (_v) {
                            return _wrap_new_mcd__SWIG_14(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mcd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::momentum_configuration(size_t)\n"
    "    BH::momentum_configuration< double >::momentum_configuration()\n"
    "    BH::momentum_configuration< double >::momentum_configuration(std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::momentum_configuration(BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &,BH::Cmom< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  result = (int)(arg1)->insert((BH::Cmom< double > const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::Cmom< double > *arg2 = 0 ;
  BH::momentum_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__CmomT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::Cmom< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::Cmom< double > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::momentum_type""'");
  } 
  arg3 = static_cast< BH::momentum_type >(val3);
  result = (int)(arg1)->insert((BH::Cmom< double > const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::momentum< std::complex< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp2);
  result = (int)(arg1)->insert((BH::momentum< std::complex< double > > const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::momentum< std::complex< double > > *arg2 = 0 ;
  BH::momentum_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::momentum< std::complex< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::momentum< std::complex< double > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::momentum_type""'");
  } 
  arg3 = static_cast< BH::momentum_type >(val3);
  result = (int)(arg1)->insert((BH::momentum< std::complex< double > > const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::lambda< double > *arg2 = 0 ;
  BH::lambdat< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambda< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambdat< double > * >(argp3);
  result = (int)(arg1)->insert((BH::lambda< double > const &)*arg2,(BH::lambdat< double > const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  BH::lambdat< double > *arg2 = 0 ;
  BH::lambda< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_insert" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BH__lambdatT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "2"" of type '" "BH::lambdat< double > const &""'"); 
  }
  arg2 = reinterpret_cast< BH::lambdat< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_BH__lambdaT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::lambda< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_insert" "', argument " "3"" of type '" "BH::lambda< double > const &""'"); 
  }
  arg3 = reinterpret_cast< BH::lambda< double > * >(argp3);
  result = (int)(arg1)->insert((BH::lambdat< double > const &)*arg2,(BH::lambda< double > const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_insert__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_insert__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__CmomT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mcd_insert__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__momentumT_std__complexT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mcd_insert__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_insert__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_BH__lambdatT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_BH__lambdaT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_insert__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::insert(BH::Cmom< double > const &)\n"
    "    BH::momentum_configuration< double >::insert(BH::Cmom< double > const &,BH::momentum_type)\n"
    "    BH::momentum_configuration< double >::insert(BH::momentum< std::complex< double > > const &)\n"
    "    BH::momentum_configuration< double >::insert(BH::momentum< std::complex< double > > const &,BH::momentum_type)\n"
    "    BH::momentum_configuration< double >::insert(BH::lambda< double > const &,BH::lambdat< double > const &)\n"
    "    BH::momentum_configuration< double >::insert(BH::lambdat< double > const &,BH::lambda< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_lance_print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mcd_lance_print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_lance_print" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  (arg1)->lance_print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_spa",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spa" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->spa(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_spb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spb" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->spb(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spab__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spab" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spab(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spba__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spba" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spba(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spab__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spab" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_spab" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_spab" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spab(arg2,(std::vector< int,std::allocator< int > > const &)*arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spba__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spba" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_spba" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_spba" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spba(arg2,(std::vector< int,std::allocator< int > > const &)*arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spab__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spab",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spab" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_spab" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_spab" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spab(arg2,(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spba__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_spba",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spba" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_spba" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_spba" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->spba(arg2,(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spaa__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:mcd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spaa" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->spaa(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spbb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:mcd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spbb" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->spbb(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spab__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:mcd_spab",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spab" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spab" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spab" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spab" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spab" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_spab" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (arg1)->spab(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spab(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spab__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spab__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spab__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mcd_spab__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_spab'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::spab(int,int,int)\n"
    "    BH::momentum_configuration< double >::spab(int,std::vector< int,std::allocator< int > > const &,int)\n"
    "    BH::momentum_configuration< double >::spab(int,std::vector< BH::plabel,std::allocator< BH::plabel > > const &,int)\n"
    "    BH::momentum_configuration< double >::spab(int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_spba__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:mcd_spba",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spba" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spba" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spba" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spba" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spba" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_spba" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (arg1)->spba(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spba(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spba__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spba__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_spba__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mcd_spba__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_spba'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::spba(int,int,int)\n"
    "    BH::momentum_configuration< double >::spba(int,std::vector< int,std::allocator< int > > const &,int)\n"
    "    BH::momentum_configuration< double >::spba(int,std::vector< BH::plabel,std::allocator< BH::plabel > > const &,int)\n"
    "    BH::momentum_configuration< double >::spba(int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_spaa__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mcd_spaa",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spaa" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spaa" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spaa" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spaa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spaa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_spaa" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "mcd_spaa" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (arg1)->spaa(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spaa(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mcd_spaa__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_mcd_spaa__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_spaa'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::spaa(int,int,int,int)\n"
    "    BH::momentum_configuration< double >::spaa(int,int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_spbb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mcd_spbb",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_spbb" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_spbb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_spbb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_spbb" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_spbb" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_spbb" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "mcd_spbb" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (arg1)->spbb(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_spbb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mcd_spbb__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_mcd_spbb__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_spbb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::spbb(int,int,int,int)\n"
    "    BH::momentum_configuration< double >::spbb(int,int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_s",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->s((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_s",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp2);
  result = (arg1)->s((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_s" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->s((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg2 = 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_s" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_s" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp3);
  result = (arg1)->s((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg2,(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_s",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->s(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_s",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->s(arg2,arg3,arg4);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:mcd_s",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->s(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:mcd_s",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_s" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_s" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_s" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_s" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_s" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (arg1)->s(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_s(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_s__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_s__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_s__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mcd_s__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_s__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_s__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mcd_s__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mcd_s__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_s'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::s(std::vector< int,std::allocator< int > > const &)\n"
    "    BH::momentum_configuration< double >::s(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)\n"
    "    BH::momentum_configuration< double >::s(std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::momentum_configuration< double >::s(std::vector< BH::plabel,std::allocator< BH::plabel > > const &,std::vector< BH::plabel,std::allocator< BH::plabel > > const &)\n"
    "    BH::momentum_configuration< double >::s(int,int)\n"
    "    BH::momentum_configuration< double >::s(int,int,int)\n"
    "    BH::momentum_configuration< double >::s(int,int,int,int)\n"
    "    BH::momentum_configuration< double >::s(int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_sp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_sp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_sp" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_sp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_sp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->sp(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_m2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_m2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_m2" "', argument " "1"" of type '" "BH::momentum_configuration< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_m2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((BH::momentum_configuration< double > const *)arg1)->m2(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_L(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambda< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_L",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_L" "', argument " "1"" of type '" "BH::momentum_configuration< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_L" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::lambda< double > *) &((BH::momentum_configuration< double > const *)arg1)->L(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdaT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Lt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::lambdat< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_Lt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Lt" "', argument " "1"" of type '" "BH::momentum_configuration< double > const *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Lt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (BH::lambdat< double > *) &((BH::momentum_configuration< double > const *)arg1)->Lt(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__lambdatT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< BH::smatrix< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_Sm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sm" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Sm(arg2);
  resultobj = SWIG_NewPointerObj((new BH::smatrix< double >(static_cast< const BH::smatrix< double >& >(result))), SWIGTYPE_p_BH__smatrixT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_Sum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp2);
  result = (int)(arg1)->Sum((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcd_Sum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->Sum((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg2 = 0 ;
  std::vector< BH::plabel,std::allocator< BH::plabel > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_Sum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "3"" of type '" "std::vector< BH::plabel,std::allocator< BH::plabel > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< BH::plabel,std::allocator< BH::plabel > > * >(argp3);
  result = (int)(arg1)->Sum((std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg2,(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_Sum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_Sum" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->Sum((std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_Sum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->Sum(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mcd_Sum",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_Sum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)(arg1)->Sum(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:mcd_Sum",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_Sum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_Sum" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (int)(arg1)->Sum(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:mcd_Sum",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_Sum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_Sum" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_Sum" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (int)(arg1)->Sum(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:mcd_Sum",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_Sum" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcd_Sum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_Sum" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_Sum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_Sum" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mcd_Sum" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "mcd_Sum" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (int)(arg1)->Sum(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_Sum(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_Sum__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mcd_Sum__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_Sum__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mcd_Sum__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mcd_Sum__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mcd_Sum__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mcd_Sum__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mcd_Sum__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BH__momentum_configurationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_mcd_Sum__SWIG_8(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mcd_Sum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BH::momentum_configuration< double >::Sum(std::vector< BH::plabel,std::allocator< BH::plabel > > const &)\n"
    "    BH::momentum_configuration< double >::Sum(std::vector< int,std::allocator< int > > const &)\n"
    "    BH::momentum_configuration< double >::Sum(std::vector< BH::plabel,std::allocator< BH::plabel > > const &,std::vector< BH::plabel,std::allocator< BH::plabel > > const &)\n"
    "    BH::momentum_configuration< double >::Sum(std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    BH::momentum_configuration< double >::Sum(int,int)\n"
    "    BH::momentum_configuration< double >::Sum(int,int,int)\n"
    "    BH::momentum_configuration< double >::Sum(int,int,int,int)\n"
    "    BH::momentum_configuration< double >::Sum(int,int,int,int,int)\n"
    "    BH::momentum_configuration< double >::Sum(int,int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mcd_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mcd_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_clear" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_put_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::complex< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_put_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_put_value" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_put_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_put_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_put_value" "', argument " "3"" of type '" "std::complex< double > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_put_value" "', argument " "3"" of type '" "std::complex< double > &""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > * >(argp3);
  (arg1)->put_value((std::string const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_get_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::complex< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_get_value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_get_value" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_get_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_get_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__complexT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_get_value" "', argument " "3"" of type '" "std::complex< double > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_get_value" "', argument " "3"" of type '" "std::complex< double > &""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > * >(argp3);
  result = (bool)(arg1)->get_value((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_put_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::string *arg2 = 0 ;
  size_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_put_label",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_put_label" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_put_label" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_put_label" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_size_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_put_label" "', argument " "3"" of type '" "size_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_put_label" "', argument " "3"" of type '" "size_t &""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  (arg1)->put_label((std::string const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::string *arg2 = 0 ;
  size_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcd_get_label",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_get_label" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_get_label" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_get_label" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_size_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mcd_get_label" "', argument " "3"" of type '" "size_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_get_label" "', argument " "3"" of type '" "size_t &""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  result = (bool)(arg1)->get_label((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcd_shiftBA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  std::complex< double > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::complex< double > temp5 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:mcd_shiftBA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcd_shiftBA" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcd_shiftBA" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcd_shiftBA" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcd_shiftBA" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mcd_shiftBA" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mcd_shiftBA" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  temp5 = static_cast< std::complex< double > >(val5);
  arg5 = &temp5;
  result = (arg1)->shiftBA((std::vector< int,std::allocator< int > > const &)*arg2,arg3,arg4,(std::complex< double > const &)*arg5);
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mcd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::momentum_configuration< double > *arg1 = (BH::momentum_configuration< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mcd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mcd" "', argument " "1"" of type '" "BH::momentum_configuration< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::momentum_configuration< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mcd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__momentum_configurationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mcrd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  BH::mom_conf_reader< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_mcrd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mcrd" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_mcrd" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (BH::mom_conf_reader< double > *)new BH::mom_conf_reader< double >((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BH__mom_conf_readerT_double_t, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcrd_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader< double > *arg1 = (BH::mom_conf_reader< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mcrd_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_readerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcrd_next" "', argument " "1"" of type '" "BH::mom_conf_reader< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader< double > * >(argp1);
  result = (bool)(arg1)->next();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcrd_go_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader< double > *arg1 = (BH::mom_conf_reader< double > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mcrd_go_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_readerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcrd_go_to" "', argument " "1"" of type '" "BH::mom_conf_reader< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mcrd_go_to" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (bool)(arg1)->go_to(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mcrd_go_to_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader< double > *arg1 = (BH::mom_conf_reader< double > *) 0 ;
  std::ios::pos_type arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mcrd_go_to_pos",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_readerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mcrd_go_to_pos" "', argument " "1"" of type '" "BH::mom_conf_reader< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ios__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mcrd_go_to_pos" "', argument " "2"" of type '" "std::ios::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mcrd_go_to_pos" "', argument " "2"" of type '" "std::ios::pos_type""'");
    } else {
      std::ios::pos_type * temp = reinterpret_cast< std::ios::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mcrd_go_to_pos" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (bool)(arg1)->go_to_pos(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mcrd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BH::mom_conf_reader< double > *arg1 = (BH::mom_conf_reader< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mcrd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BH__mom_conf_readerT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mcrd" "', argument " "1"" of type '" "BH::mom_conf_reader< double > *""'"); 
  }
  arg1 = reinterpret_cast< BH::mom_conf_reader< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mcrd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BH__mom_conf_readerT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectori_iterator", _wrap_vectori_iterator, METH_VARARGS, NULL},
	 { (char *)"vectori___nonzero__", _wrap_vectori___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectori___bool__", _wrap_vectori___bool__, METH_VARARGS, NULL},
	 { (char *)"vectori___len__", _wrap_vectori___len__, METH_VARARGS, NULL},
	 { (char *)"vectori_pop", _wrap_vectori_pop, METH_VARARGS, NULL},
	 { (char *)"vectori___getslice__", _wrap_vectori___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___setslice__", _wrap_vectori___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delslice__", _wrap_vectori___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delitem__", _wrap_vectori___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___getitem__", _wrap_vectori___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___setitem__", _wrap_vectori___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectori_append", _wrap_vectori_append, METH_VARARGS, NULL},
	 { (char *)"vectori_empty", _wrap_vectori_empty, METH_VARARGS, NULL},
	 { (char *)"vectori_size", _wrap_vectori_size, METH_VARARGS, NULL},
	 { (char *)"vectori_clear", _wrap_vectori_clear, METH_VARARGS, NULL},
	 { (char *)"vectori_swap", _wrap_vectori_swap, METH_VARARGS, NULL},
	 { (char *)"vectori_get_allocator", _wrap_vectori_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectori_begin", _wrap_vectori_begin, METH_VARARGS, NULL},
	 { (char *)"vectori_end", _wrap_vectori_end, METH_VARARGS, NULL},
	 { (char *)"vectori_rbegin", _wrap_vectori_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectori_rend", _wrap_vectori_rend, METH_VARARGS, NULL},
	 { (char *)"vectori_pop_back", _wrap_vectori_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectori_erase", _wrap_vectori_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectori", _wrap_new_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_push_back", _wrap_vectori_push_back, METH_VARARGS, NULL},
	 { (char *)"vectori_front", _wrap_vectori_front, METH_VARARGS, NULL},
	 { (char *)"vectori_back", _wrap_vectori_back, METH_VARARGS, NULL},
	 { (char *)"vectori_assign", _wrap_vectori_assign, METH_VARARGS, NULL},
	 { (char *)"vectori_resize", _wrap_vectori_resize, METH_VARARGS, NULL},
	 { (char *)"vectori_insert", _wrap_vectori_insert, METH_VARARGS, NULL},
	 { (char *)"vectori_reserve", _wrap_vectori_reserve, METH_VARARGS, NULL},
	 { (char *)"vectori_capacity", _wrap_vectori_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectori", _wrap_delete_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_swigregister", vectori_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectord_iterator", _wrap_vectord_iterator, METH_VARARGS, NULL},
	 { (char *)"vectord___nonzero__", _wrap_vectord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectord___bool__", _wrap_vectord___bool__, METH_VARARGS, NULL},
	 { (char *)"vectord___len__", _wrap_vectord___len__, METH_VARARGS, NULL},
	 { (char *)"vectord_pop", _wrap_vectord_pop, METH_VARARGS, NULL},
	 { (char *)"vectord___getslice__", _wrap_vectord___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___setslice__", _wrap_vectord___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delslice__", _wrap_vectord___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delitem__", _wrap_vectord___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___getitem__", _wrap_vectord___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___setitem__", _wrap_vectord___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectord_append", _wrap_vectord_append, METH_VARARGS, NULL},
	 { (char *)"vectord_empty", _wrap_vectord_empty, METH_VARARGS, NULL},
	 { (char *)"vectord_size", _wrap_vectord_size, METH_VARARGS, NULL},
	 { (char *)"vectord_clear", _wrap_vectord_clear, METH_VARARGS, NULL},
	 { (char *)"vectord_swap", _wrap_vectord_swap, METH_VARARGS, NULL},
	 { (char *)"vectord_get_allocator", _wrap_vectord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectord_begin", _wrap_vectord_begin, METH_VARARGS, NULL},
	 { (char *)"vectord_end", _wrap_vectord_end, METH_VARARGS, NULL},
	 { (char *)"vectord_rbegin", _wrap_vectord_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectord_rend", _wrap_vectord_rend, METH_VARARGS, NULL},
	 { (char *)"vectord_pop_back", _wrap_vectord_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectord_erase", _wrap_vectord_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectord", _wrap_new_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_push_back", _wrap_vectord_push_back, METH_VARARGS, NULL},
	 { (char *)"vectord_front", _wrap_vectord_front, METH_VARARGS, NULL},
	 { (char *)"vectord_back", _wrap_vectord_back, METH_VARARGS, NULL},
	 { (char *)"vectord_assign", _wrap_vectord_assign, METH_VARARGS, NULL},
	 { (char *)"vectord_resize", _wrap_vectord_resize, METH_VARARGS, NULL},
	 { (char *)"vectord_insert", _wrap_vectord_insert, METH_VARARGS, NULL},
	 { (char *)"vectord_reserve", _wrap_vectord_reserve, METH_VARARGS, NULL},
	 { (char *)"vectord_capacity", _wrap_vectord_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectord", _wrap_delete_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_swigregister", vectord_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorm_iterator", _wrap_vectorm_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorm___nonzero__", _wrap_vectorm___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorm___bool__", _wrap_vectorm___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorm___len__", _wrap_vectorm___len__, METH_VARARGS, NULL},
	 { (char *)"vectorm_pop", _wrap_vectorm_pop, METH_VARARGS, NULL},
	 { (char *)"vectorm___getslice__", _wrap_vectorm___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorm___setslice__", _wrap_vectorm___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorm___delslice__", _wrap_vectorm___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorm___delitem__", _wrap_vectorm___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorm___getitem__", _wrap_vectorm___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorm___setitem__", _wrap_vectorm___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorm_append", _wrap_vectorm_append, METH_VARARGS, NULL},
	 { (char *)"vectorm_empty", _wrap_vectorm_empty, METH_VARARGS, NULL},
	 { (char *)"vectorm_size", _wrap_vectorm_size, METH_VARARGS, NULL},
	 { (char *)"vectorm_clear", _wrap_vectorm_clear, METH_VARARGS, NULL},
	 { (char *)"vectorm_swap", _wrap_vectorm_swap, METH_VARARGS, NULL},
	 { (char *)"vectorm_get_allocator", _wrap_vectorm_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorm_begin", _wrap_vectorm_begin, METH_VARARGS, NULL},
	 { (char *)"vectorm_end", _wrap_vectorm_end, METH_VARARGS, NULL},
	 { (char *)"vectorm_rbegin", _wrap_vectorm_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorm_rend", _wrap_vectorm_rend, METH_VARARGS, NULL},
	 { (char *)"vectorm_pop_back", _wrap_vectorm_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorm_erase", _wrap_vectorm_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorm", _wrap_new_vectorm, METH_VARARGS, NULL},
	 { (char *)"vectorm_push_back", _wrap_vectorm_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorm_front", _wrap_vectorm_front, METH_VARARGS, NULL},
	 { (char *)"vectorm_back", _wrap_vectorm_back, METH_VARARGS, NULL},
	 { (char *)"vectorm_assign", _wrap_vectorm_assign, METH_VARARGS, NULL},
	 { (char *)"vectorm_resize", _wrap_vectorm_resize, METH_VARARGS, NULL},
	 { (char *)"vectorm_insert", _wrap_vectorm_insert, METH_VARARGS, NULL},
	 { (char *)"vectorm_reserve", _wrap_vectorm_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorm_capacity", _wrap_vectorm_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorm", _wrap_delete_vectorm, METH_VARARGS, NULL},
	 { (char *)"vectorm_swigregister", vectorm_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorvi_iterator", _wrap_vectorvi_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorvi___nonzero__", _wrap_vectorvi___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___bool__", _wrap_vectorvi___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___len__", _wrap_vectorvi___len__, METH_VARARGS, NULL},
	 { (char *)"vectorvi_pop", _wrap_vectorvi_pop, METH_VARARGS, NULL},
	 { (char *)"vectorvi___getslice__", _wrap_vectorvi___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___setslice__", _wrap_vectorvi___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___delslice__", _wrap_vectorvi___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___delitem__", _wrap_vectorvi___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___getitem__", _wrap_vectorvi___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorvi___setitem__", _wrap_vectorvi___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorvi_append", _wrap_vectorvi_append, METH_VARARGS, NULL},
	 { (char *)"vectorvi_empty", _wrap_vectorvi_empty, METH_VARARGS, NULL},
	 { (char *)"vectorvi_size", _wrap_vectorvi_size, METH_VARARGS, NULL},
	 { (char *)"vectorvi_clear", _wrap_vectorvi_clear, METH_VARARGS, NULL},
	 { (char *)"vectorvi_swap", _wrap_vectorvi_swap, METH_VARARGS, NULL},
	 { (char *)"vectorvi_get_allocator", _wrap_vectorvi_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorvi_begin", _wrap_vectorvi_begin, METH_VARARGS, NULL},
	 { (char *)"vectorvi_end", _wrap_vectorvi_end, METH_VARARGS, NULL},
	 { (char *)"vectorvi_rbegin", _wrap_vectorvi_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorvi_rend", _wrap_vectorvi_rend, METH_VARARGS, NULL},
	 { (char *)"vectorvi_pop_back", _wrap_vectorvi_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorvi_erase", _wrap_vectorvi_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorvi", _wrap_new_vectorvi, METH_VARARGS, NULL},
	 { (char *)"vectorvi_push_back", _wrap_vectorvi_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorvi_front", _wrap_vectorvi_front, METH_VARARGS, NULL},
	 { (char *)"vectorvi_back", _wrap_vectorvi_back, METH_VARARGS, NULL},
	 { (char *)"vectorvi_assign", _wrap_vectorvi_assign, METH_VARARGS, NULL},
	 { (char *)"vectorvi_resize", _wrap_vectorvi_resize, METH_VARARGS, NULL},
	 { (char *)"vectorvi_insert", _wrap_vectorvi_insert, METH_VARARGS, NULL},
	 { (char *)"vectorvi_reserve", _wrap_vectorvi_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorvi_capacity", _wrap_vectorvi_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorvi", _wrap_delete_vectorvi, METH_VARARGS, NULL},
	 { (char *)"vectorvi_swigregister", vectorvi_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_seti", _wrap_new_seti, METH_VARARGS, NULL},
	 { (char *)"seti___str__", _wrap_seti___str__, METH_VARARGS, NULL},
	 { (char *)"seti_key_comp", _wrap_seti_key_comp, METH_VARARGS, NULL},
	 { (char *)"seti_value_comp", _wrap_seti_value_comp, METH_VARARGS, NULL},
	 { (char *)"seti_get_allocator", _wrap_seti_get_allocator, METH_VARARGS, NULL},
	 { (char *)"seti_begin", _wrap_seti_begin, METH_VARARGS, NULL},
	 { (char *)"seti_end", _wrap_seti_end, METH_VARARGS, NULL},
	 { (char *)"seti_rbegin", _wrap_seti_rbegin, METH_VARARGS, NULL},
	 { (char *)"seti_rend", _wrap_seti_rend, METH_VARARGS, NULL},
	 { (char *)"seti_empty", _wrap_seti_empty, METH_VARARGS, NULL},
	 { (char *)"seti_size", _wrap_seti_size, METH_VARARGS, NULL},
	 { (char *)"seti_max_size", _wrap_seti_max_size, METH_VARARGS, NULL},
	 { (char *)"seti_swap", _wrap_seti_swap, METH_VARARGS, NULL},
	 { (char *)"seti_insert", _wrap_seti_insert, METH_VARARGS, NULL},
	 { (char *)"seti_erase", _wrap_seti_erase, METH_VARARGS, NULL},
	 { (char *)"seti_clear", _wrap_seti_clear, METH_VARARGS, NULL},
	 { (char *)"seti_count", _wrap_seti_count, METH_VARARGS, NULL},
	 { (char *)"seti_find", _wrap_seti_find, METH_VARARGS, NULL},
	 { (char *)"seti_lower_bound", _wrap_seti_lower_bound, METH_VARARGS, NULL},
	 { (char *)"seti_upper_bound", _wrap_seti_upper_bound, METH_VARARGS, NULL},
	 { (char *)"seti_equal_range", _wrap_seti_equal_range, METH_VARARGS, NULL},
	 { (char *)"delete_seti", _wrap_delete_seti, METH_VARARGS, NULL},
	 { (char *)"seti_swigregister", seti_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_particle", _wrap_new_particle, METH_VARARGS, NULL},
	 { (char *)"particle_m", _wrap_particle_m, METH_VARARGS, NULL},
	 { (char *)"particle_name", _wrap_particle_name, METH_VARARGS, NULL},
	 { (char *)"particle_stat", _wrap_particle_stat, METH_VARARGS, NULL},
	 { (char *)"particle_pdg_code", _wrap_particle_pdg_code, METH_VARARGS, NULL},
	 { (char *)"particle_get_ordered", _wrap_particle_get_ordered, METH_VARARGS, NULL},
	 { (char *)"particle_get_mass_index", _wrap_particle_get_mass_index, METH_VARARGS, NULL},
	 { (char *)"particle_set_mass_index", _wrap_particle_set_mass_index, METH_VARARGS, NULL},
	 { (char *)"particle_ordered", _wrap_particle_ordered, METH_VARARGS, NULL},
	 { (char *)"delete_particle", _wrap_delete_particle, METH_VARARGS, NULL},
	 { (char *)"particle_swigregister", particle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_particle_ID", _wrap_new_particle_ID, METH_VARARGS, NULL},
	 { (char *)"particle_ID_name", _wrap_particle_ID_name, METH_VARARGS, NULL},
	 { (char *)"particle_ID_type", _wrap_particle_ID_type, METH_VARARGS, NULL},
	 { (char *)"particle_ID_helicity", _wrap_particle_ID_helicity, METH_VARARGS, NULL},
	 { (char *)"particle_ID_flavor", _wrap_particle_ID_flavor, METH_VARARGS, NULL},
	 { (char *)"particle_ID_is_anti_particle", _wrap_particle_ID_is_anti_particle, METH_VARARGS, NULL},
	 { (char *)"particle_ID_is_a", _wrap_particle_ID_is_a, METH_VARARGS, NULL},
	 { (char *)"particle_ID_is_not_a", _wrap_particle_ID_is_not_a, METH_VARARGS, NULL},
	 { (char *)"particle_ID_is_fermion", _wrap_particle_ID_is_fermion, METH_VARARGS, NULL},
	 { (char *)"particle_ID_get_ordered", _wrap_particle_ID_get_ordered, METH_VARARGS, NULL},
	 { (char *)"particle_ID_ordered", _wrap_particle_ID_ordered, METH_VARARGS, NULL},
	 { (char *)"particle_ID_mass_label", _wrap_particle_ID_mass_label, METH_VARARGS, NULL},
	 { (char *)"particle_ID_mass", _wrap_particle_ID_mass, METH_VARARGS, NULL},
	 { (char *)"particle_ID_mass2", _wrap_particle_ID_mass2, METH_VARARGS, NULL},
	 { (char *)"particle_ID_conjugate", _wrap_particle_ID_conjugate, METH_VARARGS, NULL},
	 { (char *)"particle_ID_helicity_conjugate", _wrap_particle_ID_helicity_conjugate, METH_VARARGS, NULL},
	 { (char *)"particle_ID_set_helicity", _wrap_particle_ID_set_helicity, METH_VARARGS, NULL},
	 { (char *)"particle_ID_set_flavor", _wrap_particle_ID_set_flavor, METH_VARARGS, NULL},
	 { (char *)"particle_ID_set_is_antiparticle", _wrap_particle_ID_set_is_antiparticle, METH_VARARGS, NULL},
	 { (char *)"particle_ID___eq__", _wrap_particle_ID___eq__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___ne__", _wrap_particle_ID___ne__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___lt__", _wrap_particle_ID___lt__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___gt__", _wrap_particle_ID___gt__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___le__", _wrap_particle_ID___le__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___ge__", _wrap_particle_ID___ge__, METH_VARARGS, NULL},
	 { (char *)"particle_ID___str__", _wrap_particle_ID___str__, METH_VARARGS, NULL},
	 { (char *)"delete_particle_ID", _wrap_delete_particle_ID, METH_VARARGS, NULL},
	 { (char *)"particle_ID_swigregister", particle_ID_swigregister, METH_VARARGS, NULL},
	 { (char *)"plabel_ind", _wrap_plabel_ind, METH_VARARGS, NULL},
	 { (char *)"new_plabel", _wrap_new_plabel, METH_VARARGS, NULL},
	 { (char *)"delete_plabel", _wrap_delete_plabel, METH_VARARGS, NULL},
	 { (char *)"plabel_swigregister", plabel_swigregister, METH_VARARGS, NULL},
	 { (char *)"__ne__", _wrap___ne__, METH_VARARGS, NULL},
	 { (char *)"__gt__", _wrap___gt__, METH_VARARGS, NULL},
	 { (char *)"Indices", _wrap_Indices, METH_VARARGS, NULL},
	 { (char *)"setable_set", _wrap_setable_set, METH_VARARGS, NULL},
	 { (char *)"delete_setable", _wrap_delete_setable, METH_VARARGS, NULL},
	 { (char *)"setable_swigregister", setable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BH_interface", _wrap_new_BH_interface, METH_VARARGS, NULL},
	 { (char *)"delete_BH_interface", _wrap_delete_BH_interface, METH_VARARGS, NULL},
	 { (char *)"BH_interface_new_ampl", _wrap_BH_interface_new_ampl, METH_VARARGS, NULL},
	 { (char *)"BH_interface_new_tree_ampl", _wrap_BH_interface_new_tree_ampl, METH_VARARGS, NULL},
	 { (char *)"BH_interface_set", _wrap_BH_interface_set, METH_VARARGS, NULL},
	 { (char *)"BH_interface_print_settings", _wrap_BH_interface_print_settings, METH_VARARGS, NULL},
	 { (char *)"BH_interface___call__", _wrap_BH_interface___call__, METH_VARARGS, NULL},
	 { (char *)"BH_interface_print_banner", _wrap_BH_interface_print_banner, METH_VARARGS, NULL},
	 { (char *)"BH_interface_swigregister", BH_interface_swigregister, METH_VARARGS, NULL},
	 { (char *)"BHinput_m_momenta_set", _wrap_BHinput_m_momenta_set, METH_VARARGS, NULL},
	 { (char *)"BHinput_m_momenta_get", _wrap_BHinput_m_momenta_get, METH_VARARGS, NULL},
	 { (char *)"BHinput_m_mu_set", _wrap_BHinput_m_mu_set, METH_VARARGS, NULL},
	 { (char *)"BHinput_m_mu_get", _wrap_BHinput_m_mu_get, METH_VARARGS, NULL},
	 { (char *)"new_BHinput", _wrap_new_BHinput, METH_VARARGS, NULL},
	 { (char *)"delete_BHinput", _wrap_delete_BHinput, METH_VARARGS, NULL},
	 { (char *)"BHinput_swigregister", BHinput_swigregister, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl___call__", _wrap_BH_Ampl___call__, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_single_pole", _wrap_BH_Ampl_get_single_pole, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_double_pole", _wrap_BH_Ampl_get_double_pole, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_finite", _wrap_BH_Ampl_get_finite, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_born", _wrap_BH_Ampl_get_born, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_single_pole_HP", _wrap_BH_Ampl_get_single_pole_HP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_double_pole_HP", _wrap_BH_Ampl_get_double_pole_HP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_finite_HP", _wrap_BH_Ampl_get_finite_HP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_born_HP", _wrap_BH_Ampl_get_born_HP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_single_pole_VHP", _wrap_BH_Ampl_get_single_pole_VHP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_double_pole_VHP", _wrap_BH_Ampl_get_double_pole_VHP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_finite_VHP", _wrap_BH_Ampl_get_finite_VHP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_born_VHP", _wrap_BH_Ampl_get_born_VHP, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_set_partial_born", _wrap_BH_Ampl_set_partial_born, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_map", _wrap_BH_Ampl_get_map, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_vals", _wrap_BH_Ampl_get_vals, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_order_qcd", _wrap_BH_Ampl_get_order_qcd, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_get_order_qed", _wrap_BH_Ampl_get_order_qed, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_getScaleVariationCoefficient", _wrap_BH_Ampl_getScaleVariationCoefficient, METH_VARARGS, NULL},
	 { (char *)"delete_BH_Ampl", _wrap_delete_BH_Ampl, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_dry_run", _wrap_BH_Ampl_dry_run, METH_VARARGS, NULL},
	 { (char *)"new_BH_Ampl", _wrap_new_BH_Ampl, METH_VARARGS, NULL},
	 { (char *)"BH_Ampl_swigregister", BH_Ampl_swigregister, METH_VARARGS, NULL},
	 { (char *)"spinorR_a1_set", _wrap_spinorR_a1_set, METH_VARARGS, NULL},
	 { (char *)"spinorR_a1_get", _wrap_spinorR_a1_get, METH_VARARGS, NULL},
	 { (char *)"spinorR_a2_set", _wrap_spinorR_a2_set, METH_VARARGS, NULL},
	 { (char *)"spinorR_a2_get", _wrap_spinorR_a2_get, METH_VARARGS, NULL},
	 { (char *)"new_spinorR", _wrap_new_spinorR, METH_VARARGS, NULL},
	 { (char *)"spinorR_conjugate", _wrap_spinorR_conjugate, METH_VARARGS, NULL},
	 { (char *)"delete_spinorR", _wrap_delete_spinorR, METH_VARARGS, NULL},
	 { (char *)"spinorR_add_to", _wrap_spinorR_add_to, METH_VARARGS, NULL},
	 { (char *)"spinorR_set_to", _wrap_spinorR_set_to, METH_VARARGS, NULL},
	 { (char *)"spinorR_mult_by", _wrap_spinorR_mult_by, METH_VARARGS, NULL},
	 { (char *)"spinorR_swigregister", spinorR_swigregister, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_a1_set", _wrap_spinorRHP_a1_set, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_a1_get", _wrap_spinorRHP_a1_get, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_a2_set", _wrap_spinorRHP_a2_set, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_a2_get", _wrap_spinorRHP_a2_get, METH_VARARGS, NULL},
	 { (char *)"new_spinorRHP", _wrap_new_spinorRHP, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_conjugate", _wrap_spinorRHP_conjugate, METH_VARARGS, NULL},
	 { (char *)"delete_spinorRHP", _wrap_delete_spinorRHP, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_add_to", _wrap_spinorRHP_add_to, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_set_to", _wrap_spinorRHP_set_to, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_mult_by", _wrap_spinorRHP_mult_by, METH_VARARGS, NULL},
	 { (char *)"spinorRHP_swigregister", spinorRHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_a1_set", _wrap_spinorRVHP_a1_set, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_a1_get", _wrap_spinorRVHP_a1_get, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_a2_set", _wrap_spinorRVHP_a2_set, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_a2_get", _wrap_spinorRVHP_a2_get, METH_VARARGS, NULL},
	 { (char *)"new_spinorRVHP", _wrap_new_spinorRVHP, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_conjugate", _wrap_spinorRVHP_conjugate, METH_VARARGS, NULL},
	 { (char *)"delete_spinorRVHP", _wrap_delete_spinorRVHP, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_add_to", _wrap_spinorRVHP_add_to, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_set_to", _wrap_spinorRVHP_set_to, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_mult_by", _wrap_spinorRVHP_mult_by, METH_VARARGS, NULL},
	 { (char *)"spinorRVHP_swigregister", spinorRVHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdaR", _wrap_new_LambdaR, METH_VARARGS, NULL},
	 { (char *)"delete_LambdaR", _wrap_delete_LambdaR, METH_VARARGS, NULL},
	 { (char *)"LambdaR_swigregister", LambdaR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdaRHP", _wrap_new_LambdaRHP, METH_VARARGS, NULL},
	 { (char *)"delete_LambdaRHP", _wrap_delete_LambdaRHP, METH_VARARGS, NULL},
	 { (char *)"LambdaRHP_swigregister", LambdaRHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdaRVHP", _wrap_new_LambdaRVHP, METH_VARARGS, NULL},
	 { (char *)"delete_LambdaRVHP", _wrap_delete_LambdaRVHP, METH_VARARGS, NULL},
	 { (char *)"LambdaRVHP_swigregister", LambdaRVHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdatR", _wrap_new_LambdatR, METH_VARARGS, NULL},
	 { (char *)"delete_LambdatR", _wrap_delete_LambdatR, METH_VARARGS, NULL},
	 { (char *)"LambdatR_swigregister", LambdatR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdatRHP", _wrap_new_LambdatRHP, METH_VARARGS, NULL},
	 { (char *)"delete_LambdatRHP", _wrap_delete_LambdatRHP, METH_VARARGS, NULL},
	 { (char *)"LambdatRHP_swigregister", LambdatRHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LambdatRVHP", _wrap_new_LambdatRVHP, METH_VARARGS, NULL},
	 { (char *)"delete_LambdatRVHP", _wrap_delete_LambdatRVHP, METH_VARARGS, NULL},
	 { (char *)"LambdatRVHP_swigregister", LambdatRVHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"momentum_configuration_base_get_ID", _wrap_momentum_configuration_base_get_ID, METH_VARARGS, NULL},
	 { (char *)"momentum_configuration_base_renew_ID", _wrap_momentum_configuration_base_renew_ID, METH_VARARGS, NULL},
	 { (char *)"new_momentum_configuration_base", _wrap_new_momentum_configuration_base, METH_VARARGS, NULL},
	 { (char *)"delete_momentum_configuration_base", _wrap_delete_momentum_configuration_base, METH_VARARGS, NULL},
	 { (char *)"momentum_configuration_base_swigregister", momentum_configuration_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"GenKey", _wrap_GenKey, METH_VARARGS, NULL},
	 { (char *)"mom_conf_reader_base_next", _wrap_mom_conf_reader_base_next, METH_VARARGS, NULL},
	 { (char *)"mom_conf_reader_base_go_to", _wrap_mom_conf_reader_base_go_to, METH_VARARGS, NULL},
	 { (char *)"mom_conf_reader_base_go_to_pos", _wrap_mom_conf_reader_base_go_to_pos, METH_VARARGS, NULL},
	 { (char *)"delete_mom_conf_reader_base", _wrap_delete_mom_conf_reader_base, METH_VARARGS, NULL},
	 { (char *)"mom_conf_reader_base_swigregister", mom_conf_reader_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mass_param", _wrap_new_mass_param, METH_VARARGS, NULL},
	 { (char *)"delete_mass_param", _wrap_delete_mass_param, METH_VARARGS, NULL},
	 { (char *)"mass_param_set_dynamic", _wrap_mass_param_set_dynamic, METH_VARARGS, NULL},
	 { (char *)"mass_param_set_dynamic2", _wrap_mass_param_set_dynamic2, METH_VARARGS, NULL},
	 { (char *)"mass_param_orig_mass", _wrap_mass_param_orig_mass, METH_VARARGS, NULL},
	 { (char *)"mass_param_orig_mass2", _wrap_mass_param_orig_mass2, METH_VARARGS, NULL},
	 { (char *)"mass_param_mass", _wrap_mass_param_mass, METH_VARARGS, NULL},
	 { (char *)"mass_param_mass2", _wrap_mass_param_mass2, METH_VARARGS, NULL},
	 { (char *)"mass_param_reset", _wrap_mass_param_reset, METH_VARARGS, NULL},
	 { (char *)"mass_param_label", _wrap_mass_param_label, METH_VARARGS, NULL},
	 { (char *)"mass_param_set_next_mass_label", _wrap_mass_param_set_next_mass_label, METH_VARARGS, NULL},
	 { (char *)"mass_param_get_next_mass_label", _wrap_mass_param_get_next_mass_label, METH_VARARGS, NULL},
	 { (char *)"mass_param_swigregister", mass_param_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mass_param_library", _wrap_new_mass_param_library, METH_VARARGS, NULL},
	 { (char *)"delete_mass_param_library", _wrap_delete_mass_param_library, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_set_dynamic", _wrap_mass_param_library_set_dynamic, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_set_dynamic2", _wrap_mass_param_library_set_dynamic2, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_orig_mass", _wrap_mass_param_library_orig_mass, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_orig_mass2", _wrap_mass_param_library_orig_mass2, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_mass", _wrap_mass_param_library_mass, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_mass2", _wrap_mass_param_library_mass2, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_add", _wrap_mass_param_library_add, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_p", _wrap_mass_param_library_p, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_size", _wrap_mass_param_library_size, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_reset", _wrap_mass_param_library_reset, METH_VARARGS, NULL},
	 { (char *)"mass_param_library_swigregister", mass_param_library_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mass_param_coll", _wrap_new_mass_param_coll, METH_VARARGS, NULL},
	 { (char *)"delete_mass_param_coll", _wrap_delete_mass_param_coll, METH_VARARGS, NULL},
	 { (char *)"mass_param_coll_p", _wrap_mass_param_coll_p, METH_VARARGS, NULL},
	 { (char *)"mass_param_coll_set", _wrap_mass_param_coll_set, METH_VARARGS, NULL},
	 { (char *)"mass_param_coll_size", _wrap_mass_param_coll_size, METH_VARARGS, NULL},
	 { (char *)"mass_param_coll_swigregister", mass_param_coll_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_eval_param_state", _wrap_new_eval_param_state, METH_VARARGS, NULL},
	 { (char *)"delete_eval_param_state", _wrap_delete_eval_param_state, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_renew_ID", _wrap_eval_param_state_renew_ID, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_set_leg_EPS", _wrap_eval_param_state_set_leg_EPS, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_get_leg_EPS", _wrap_eval_param_state_get_leg_EPS, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_get_state", _wrap_eval_param_state_get_state, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_toggle_state", _wrap_eval_param_state_toggle_state, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_get_full_state", _wrap_eval_param_state_get_full_state, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_is_match", _wrap_eval_param_state_is_match, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_get_ID", _wrap_eval_param_state_get_ID, METH_VARARGS, NULL},
	 { (char *)"eval_param_state_swigregister", eval_param_state_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ep", _wrap_new_ep, METH_VARARGS, NULL},
	 { (char *)"delete_ep", _wrap_delete_ep, METH_VARARGS, NULL},
	 { (char *)"ep_update", _wrap_ep_update, METH_VARARGS, NULL},
	 { (char *)"ep_is_state_match", _wrap_ep_is_state_match, METH_VARARGS, NULL},
	 { (char *)"ep_get_state", _wrap_ep_get_state, METH_VARARGS, NULL},
	 { (char *)"ep_get_leg_state", _wrap_ep_get_leg_state, METH_VARARGS, NULL},
	 { (char *)"ep_changed", _wrap_ep_changed, METH_VARARGS, NULL},
	 { (char *)"ep_get_ID", _wrap_ep_get_ID, METH_VARARGS, NULL},
	 { (char *)"ep_renew_ID", _wrap_ep_renew_ID, METH_VARARGS, NULL},
	 { (char *)"ep_p", _wrap_ep_p, METH_VARARGS, NULL},
	 { (char *)"ep_cmom", _wrap_ep_cmom, METH_VARARGS, NULL},
	 { (char *)"ep_mom", _wrap_ep_mom, METH_VARARGS, NULL},
	 { (char *)"ep_size", _wrap_ep_size, METH_VARARGS, NULL},
	 { (char *)"ep_begin", _wrap_ep_begin, METH_VARARGS, NULL},
	 { (char *)"ep_back", _wrap_ep_back, METH_VARARGS, NULL},
	 { (char *)"ep_ref", _wrap_ep_ref, METH_VARARGS, NULL},
	 { (char *)"ep_set", _wrap_ep_set, METH_VARARGS, NULL},
	 { (char *)"ep_set_ref", _wrap_ep_set_ref, METH_VARARGS, NULL},
	 { (char *)"ep_get_default_ref", _wrap_ep_get_default_ref, METH_VARARGS, NULL},
	 { (char *)"ep_spa", _wrap_ep_spa, METH_VARARGS, NULL},
	 { (char *)"ep_spb", _wrap_ep_spb, METH_VARARGS, NULL},
	 { (char *)"ep_spab", _wrap_ep_spab, METH_VARARGS, NULL},
	 { (char *)"ep_spba", _wrap_ep_spba, METH_VARARGS, NULL},
	 { (char *)"ep_spaa", _wrap_ep_spaa, METH_VARARGS, NULL},
	 { (char *)"ep_spbb", _wrap_ep_spbb, METH_VARARGS, NULL},
	 { (char *)"ep_s", _wrap_ep_s, METH_VARARGS, NULL},
	 { (char *)"ep_sp", _wrap_ep_sp, METH_VARARGS, NULL},
	 { (char *)"ep_modify_mass_param", _wrap_ep_modify_mass_param, METH_VARARGS, NULL},
	 { (char *)"ep_get_mass_param", _wrap_ep_get_mass_param, METH_VARARGS, NULL},
	 { (char *)"ep_orig_mass", _wrap_ep_orig_mass, METH_VARARGS, NULL},
	 { (char *)"ep_orig_mass2", _wrap_ep_orig_mass2, METH_VARARGS, NULL},
	 { (char *)"ep_mass", _wrap_ep_mass, METH_VARARGS, NULL},
	 { (char *)"ep_mass2", _wrap_ep_mass2, METH_VARARGS, NULL},
	 { (char *)"ep_set_dynamic", _wrap_ep_set_dynamic, METH_VARARGS, NULL},
	 { (char *)"ep_set_dynamic2", _wrap_ep_set_dynamic2, METH_VARARGS, NULL},
	 { (char *)"ep_nbr_masses", _wrap_ep_nbr_masses, METH_VARARGS, NULL},
	 { (char *)"ep_add", _wrap_ep_add, METH_VARARGS, NULL},
	 { (char *)"ep_swigregister", ep_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_epdd", _wrap_new_epdd, METH_VARARGS, NULL},
	 { (char *)"delete_epdd", _wrap_delete_epdd, METH_VARARGS, NULL},
	 { (char *)"epdd_update", _wrap_epdd_update, METH_VARARGS, NULL},
	 { (char *)"epdd_is_state_match", _wrap_epdd_is_state_match, METH_VARARGS, NULL},
	 { (char *)"epdd_get_state", _wrap_epdd_get_state, METH_VARARGS, NULL},
	 { (char *)"epdd_get_leg_state", _wrap_epdd_get_leg_state, METH_VARARGS, NULL},
	 { (char *)"epdd_changed", _wrap_epdd_changed, METH_VARARGS, NULL},
	 { (char *)"epdd_get_ID", _wrap_epdd_get_ID, METH_VARARGS, NULL},
	 { (char *)"epdd_renew_ID", _wrap_epdd_renew_ID, METH_VARARGS, NULL},
	 { (char *)"epdd_p", _wrap_epdd_p, METH_VARARGS, NULL},
	 { (char *)"epdd_cmom", _wrap_epdd_cmom, METH_VARARGS, NULL},
	 { (char *)"epdd_mom", _wrap_epdd_mom, METH_VARARGS, NULL},
	 { (char *)"epdd_size", _wrap_epdd_size, METH_VARARGS, NULL},
	 { (char *)"epdd_begin", _wrap_epdd_begin, METH_VARARGS, NULL},
	 { (char *)"epdd_back", _wrap_epdd_back, METH_VARARGS, NULL},
	 { (char *)"epdd_ref", _wrap_epdd_ref, METH_VARARGS, NULL},
	 { (char *)"epdd_set", _wrap_epdd_set, METH_VARARGS, NULL},
	 { (char *)"epdd_set_ref", _wrap_epdd_set_ref, METH_VARARGS, NULL},
	 { (char *)"epdd_get_default_ref", _wrap_epdd_get_default_ref, METH_VARARGS, NULL},
	 { (char *)"epdd_spa", _wrap_epdd_spa, METH_VARARGS, NULL},
	 { (char *)"epdd_spb", _wrap_epdd_spb, METH_VARARGS, NULL},
	 { (char *)"epdd_spab", _wrap_epdd_spab, METH_VARARGS, NULL},
	 { (char *)"epdd_spba", _wrap_epdd_spba, METH_VARARGS, NULL},
	 { (char *)"epdd_spaa", _wrap_epdd_spaa, METH_VARARGS, NULL},
	 { (char *)"epdd_spbb", _wrap_epdd_spbb, METH_VARARGS, NULL},
	 { (char *)"epdd_s", _wrap_epdd_s, METH_VARARGS, NULL},
	 { (char *)"epdd_sp", _wrap_epdd_sp, METH_VARARGS, NULL},
	 { (char *)"epdd_modify_mass_param", _wrap_epdd_modify_mass_param, METH_VARARGS, NULL},
	 { (char *)"epdd_get_mass_param", _wrap_epdd_get_mass_param, METH_VARARGS, NULL},
	 { (char *)"epdd_orig_mass", _wrap_epdd_orig_mass, METH_VARARGS, NULL},
	 { (char *)"epdd_orig_mass2", _wrap_epdd_orig_mass2, METH_VARARGS, NULL},
	 { (char *)"epdd_mass", _wrap_epdd_mass, METH_VARARGS, NULL},
	 { (char *)"epdd_mass2", _wrap_epdd_mass2, METH_VARARGS, NULL},
	 { (char *)"epdd_set_dynamic", _wrap_epdd_set_dynamic, METH_VARARGS, NULL},
	 { (char *)"epdd_set_dynamic2", _wrap_epdd_set_dynamic2, METH_VARARGS, NULL},
	 { (char *)"epdd_nbr_masses", _wrap_epdd_nbr_masses, METH_VARARGS, NULL},
	 { (char *)"epdd_add", _wrap_epdd_add, METH_VARARGS, NULL},
	 { (char *)"epdd_swigregister", epdd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_epqd", _wrap_new_epqd, METH_VARARGS, NULL},
	 { (char *)"delete_epqd", _wrap_delete_epqd, METH_VARARGS, NULL},
	 { (char *)"epqd_update", _wrap_epqd_update, METH_VARARGS, NULL},
	 { (char *)"epqd_is_state_match", _wrap_epqd_is_state_match, METH_VARARGS, NULL},
	 { (char *)"epqd_get_state", _wrap_epqd_get_state, METH_VARARGS, NULL},
	 { (char *)"epqd_get_leg_state", _wrap_epqd_get_leg_state, METH_VARARGS, NULL},
	 { (char *)"epqd_changed", _wrap_epqd_changed, METH_VARARGS, NULL},
	 { (char *)"epqd_get_ID", _wrap_epqd_get_ID, METH_VARARGS, NULL},
	 { (char *)"epqd_renew_ID", _wrap_epqd_renew_ID, METH_VARARGS, NULL},
	 { (char *)"epqd_p", _wrap_epqd_p, METH_VARARGS, NULL},
	 { (char *)"epqd_cmom", _wrap_epqd_cmom, METH_VARARGS, NULL},
	 { (char *)"epqd_mom", _wrap_epqd_mom, METH_VARARGS, NULL},
	 { (char *)"epqd_size", _wrap_epqd_size, METH_VARARGS, NULL},
	 { (char *)"epqd_begin", _wrap_epqd_begin, METH_VARARGS, NULL},
	 { (char *)"epqd_back", _wrap_epqd_back, METH_VARARGS, NULL},
	 { (char *)"epqd_ref", _wrap_epqd_ref, METH_VARARGS, NULL},
	 { (char *)"epqd_set", _wrap_epqd_set, METH_VARARGS, NULL},
	 { (char *)"epqd_set_ref", _wrap_epqd_set_ref, METH_VARARGS, NULL},
	 { (char *)"epqd_get_default_ref", _wrap_epqd_get_default_ref, METH_VARARGS, NULL},
	 { (char *)"epqd_spa", _wrap_epqd_spa, METH_VARARGS, NULL},
	 { (char *)"epqd_spb", _wrap_epqd_spb, METH_VARARGS, NULL},
	 { (char *)"epqd_spab", _wrap_epqd_spab, METH_VARARGS, NULL},
	 { (char *)"epqd_spba", _wrap_epqd_spba, METH_VARARGS, NULL},
	 { (char *)"epqd_spaa", _wrap_epqd_spaa, METH_VARARGS, NULL},
	 { (char *)"epqd_spbb", _wrap_epqd_spbb, METH_VARARGS, NULL},
	 { (char *)"epqd_s", _wrap_epqd_s, METH_VARARGS, NULL},
	 { (char *)"epqd_sp", _wrap_epqd_sp, METH_VARARGS, NULL},
	 { (char *)"epqd_modify_mass_param", _wrap_epqd_modify_mass_param, METH_VARARGS, NULL},
	 { (char *)"epqd_get_mass_param", _wrap_epqd_get_mass_param, METH_VARARGS, NULL},
	 { (char *)"epqd_orig_mass", _wrap_epqd_orig_mass, METH_VARARGS, NULL},
	 { (char *)"epqd_orig_mass2", _wrap_epqd_orig_mass2, METH_VARARGS, NULL},
	 { (char *)"epqd_mass", _wrap_epqd_mass, METH_VARARGS, NULL},
	 { (char *)"epqd_mass2", _wrap_epqd_mass2, METH_VARARGS, NULL},
	 { (char *)"epqd_set_dynamic", _wrap_epqd_set_dynamic, METH_VARARGS, NULL},
	 { (char *)"epqd_set_dynamic2", _wrap_epqd_set_dynamic2, METH_VARARGS, NULL},
	 { (char *)"epqd_nbr_masses", _wrap_epqd_nbr_masses, METH_VARARGS, NULL},
	 { (char *)"epqd_add", _wrap_epqd_add, METH_VARARGS, NULL},
	 { (char *)"epqd_swigregister", epqd_swigregister, METH_VARARGS, NULL},
	 { (char *)"read_settings_from_file", _wrap_read_settings_from_file, METH_VARARGS, NULL},
	 { (char *)"use_setting", _wrap_use_setting, METH_VARARGS, NULL},
	 { (char *)"process_n", _wrap_process_n, METH_VARARGS, NULL},
	 { (char *)"process_p", _wrap_process_p, METH_VARARGS, NULL},
	 { (char *)"process_particle_IDs", _wrap_process_particle_IDs, METH_VARARGS, NULL},
	 { (char *)"process_begin", _wrap_process_begin, METH_VARARGS, NULL},
	 { (char *)"process_end", _wrap_process_end, METH_VARARGS, NULL},
	 { (char *)"process___len__", _wrap_process___len__, METH_VARARGS, NULL},
	 { (char *)"process_pcode", _wrap_process_pcode, METH_VARARGS, NULL},
	 { (char *)"process___getitem__", _wrap_process___getitem__, METH_VARARGS, NULL},
	 { (char *)"process_front", _wrap_process_front, METH_VARARGS, NULL},
	 { (char *)"process_back", _wrap_process_back, METH_VARARGS, NULL},
	 { (char *)"new_process", _wrap_new_process, METH_VARARGS, NULL},
	 { (char *)"process___str__", _wrap_process___str__, METH_VARARGS, NULL},
	 { (char *)"delete_process", _wrap_delete_process, METH_VARARGS, NULL},
	 { (char *)"process_swigregister", process_swigregister, METH_VARARGS, NULL},
	 { (char *)"Tree_is_zero", _wrap_Tree_is_zero, METH_VARARGS, NULL},
	 { (char *)"HelAmpl_display", _wrap_HelAmpl_display, METH_VARARGS, NULL},
	 { (char *)"HelAmpl_is_zero", _wrap_HelAmpl_is_zero, METH_VARARGS, NULL},
	 { (char *)"HelAmpl_is_split_helicity", _wrap_HelAmpl_is_split_helicity, METH_VARARGS, NULL},
	 { (char *)"new_HelAmpl", _wrap_new_HelAmpl, METH_VARARGS, NULL},
	 { (char *)"delete_HelAmpl", _wrap_delete_HelAmpl, METH_VARARGS, NULL},
	 { (char *)"HelAmpl_get_process", _wrap_HelAmpl_get_process, METH_VARARGS, NULL},
	 { (char *)"HelAmpl_swigregister", HelAmpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"TreeHelAmpl_eval", _wrap_TreeHelAmpl_eval, METH_VARARGS, NULL},
	 { (char *)"TreeHelAmpl_is_zero", _wrap_TreeHelAmpl_is_zero, METH_VARARGS, NULL},
	 { (char *)"new_TreeHelAmpl", _wrap_new_TreeHelAmpl, METH_VARARGS, NULL},
	 { (char *)"delete_TreeHelAmpl", _wrap_delete_TreeHelAmpl, METH_VARARGS, NULL},
	 { (char *)"TreeHelAmpl_pointee", _wrap_TreeHelAmpl_pointee, METH_VARARGS, NULL},
	 { (char *)"TreeHelAmpl_swigregister", TreeHelAmpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_seriesComplexd", _wrap_new_seriesComplexd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd___call__", _wrap_seriesComplexd___call__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd_leading", _wrap_seriesComplexd_leading, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd_last", _wrap_seriesComplexd_last, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd_get_term", _wrap_seriesComplexd_get_term, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd___getitem__", _wrap_seriesComplexd___getitem__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd___repr__", _wrap_seriesComplexd___repr__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd___str__", _wrap_seriesComplexd___str__, METH_VARARGS, NULL},
	 { (char *)"delete_seriesComplexd", _wrap_delete_seriesComplexd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexd_swigregister", seriesComplexd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_seriesComplexdd", _wrap_new_seriesComplexdd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd___call__", _wrap_seriesComplexdd___call__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd_leading", _wrap_seriesComplexdd_leading, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd_last", _wrap_seriesComplexdd_last, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd_get_term", _wrap_seriesComplexdd_get_term, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd___getitem__", _wrap_seriesComplexdd___getitem__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd___repr__", _wrap_seriesComplexdd___repr__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd___str__", _wrap_seriesComplexdd___str__, METH_VARARGS, NULL},
	 { (char *)"delete_seriesComplexdd", _wrap_delete_seriesComplexdd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexdd_swigregister", seriesComplexdd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_seriesComplexqd", _wrap_new_seriesComplexqd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd___call__", _wrap_seriesComplexqd___call__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd_leading", _wrap_seriesComplexqd_leading, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd_last", _wrap_seriesComplexqd_last, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd_get_term", _wrap_seriesComplexqd_get_term, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd___getitem__", _wrap_seriesComplexqd___getitem__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd___repr__", _wrap_seriesComplexqd___repr__, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd___str__", _wrap_seriesComplexqd___str__, METH_VARARGS, NULL},
	 { (char *)"delete_seriesComplexqd", _wrap_delete_seriesComplexqd, METH_VARARGS, NULL},
	 { (char *)"seriesComplexqd_swigregister", seriesComplexqd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCd", _wrap_new_SCd, METH_VARARGS, NULL},
	 { (char *)"delete_SCd", _wrap_delete_SCd, METH_VARARGS, NULL},
	 { (char *)"SCd_swigregister", SCd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCdd", _wrap_new_SCdd, METH_VARARGS, NULL},
	 { (char *)"delete_SCdd", _wrap_delete_SCdd, METH_VARARGS, NULL},
	 { (char *)"SCdd_swigregister", SCdd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCqd", _wrap_new_SCqd, METH_VARARGS, NULL},
	 { (char *)"delete_SCqd", _wrap_delete_SCqd, METH_VARARGS, NULL},
	 { (char *)"SCqd_swigregister", SCqd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Ccomputable", _wrap_new_Ccomputable, METH_VARARGS, NULL},
	 { (char *)"Ccomputable_get_value", _wrap_Ccomputable_get_value, METH_VARARGS, NULL},
	 { (char *)"Ccomputable_eval", _wrap_Ccomputable_eval, METH_VARARGS, NULL},
	 { (char *)"delete_Ccomputable", _wrap_delete_Ccomputable, METH_VARARGS, NULL},
	 { (char *)"Ccomputable_swigregister", Ccomputable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCcomputable", _wrap_new_SCcomputable, METH_VARARGS, NULL},
	 { (char *)"SCcomputable_get_value", _wrap_SCcomputable_get_value, METH_VARARGS, NULL},
	 { (char *)"SCcomputable_eval", _wrap_SCcomputable_eval, METH_VARARGS, NULL},
	 { (char *)"delete_SCcomputable", _wrap_delete_SCcomputable, METH_VARARGS, NULL},
	 { (char *)"SCcomputable_swigregister", SCcomputable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rec_BB", _wrap_new_Rec_BB, METH_VARARGS, NULL},
	 { (char *)"Rec_BB_get_daughter", _wrap_Rec_BB_get_daughter, METH_VARARGS, NULL},
	 { (char *)"Rec_BB_set_daughter", _wrap_Rec_BB_set_daughter, METH_VARARGS, NULL},
	 { (char *)"Rec_BB_nbr_daughters", _wrap_Rec_BB_nbr_daughters, METH_VARARGS, NULL},
	 { (char *)"delete_Rec_BB", _wrap_delete_Rec_BB, METH_VARARGS, NULL},
	 { (char *)"Rec_BB_swigregister", Rec_BB_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rec_Tree", _wrap_new_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_get_process", _wrap_Rec_Tree_get_process, METH_VARARGS, NULL},
	 { (char *)"delete_Rec_Tree", _wrap_delete_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_swigregister", Rec_Tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Known_Rec_Tree_base", _wrap_new_Known_Rec_Tree_base, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_base_eval", _wrap_Known_Rec_Tree_base_eval, METH_VARARGS, NULL},
	 { (char *)"delete_Known_Rec_Tree_base", _wrap_delete_Known_Rec_Tree_base, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_base_swigregister", Known_Rec_Tree_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Known_Rec_Tree", _wrap_new_Known_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"delete_Known_Rec_Tree", _wrap_delete_Known_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_swigregister", Known_Rec_Tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Known_Rec_Tree_offset", _wrap_new_Known_Rec_Tree_offset, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_offset_eval", _wrap_Known_Rec_Tree_offset_eval, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_offset_get_offset", _wrap_Known_Rec_Tree_offset_get_offset, METH_VARARGS, NULL},
	 { (char *)"delete_Known_Rec_Tree_offset", _wrap_delete_Known_Rec_Tree_offset, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_offset_swigregister", Known_Rec_Tree_offset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Known_Rec_Tree_permutation", _wrap_new_Known_Rec_Tree_permutation, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_permutation_eval", _wrap_Known_Rec_Tree_permutation_eval, METH_VARARGS, NULL},
	 { (char *)"delete_Known_Rec_Tree_permutation", _wrap_delete_Known_Rec_Tree_permutation, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_permutation_get_perm_ind", _wrap_Known_Rec_Tree_permutation_get_perm_ind, METH_VARARGS, NULL},
	 { (char *)"Known_Rec_Tree_permutation_swigregister", Known_Rec_Tree_permutation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Unknown_Rec_Tree", _wrap_new_Unknown_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"delete_Unknown_Rec_Tree", _wrap_delete_Unknown_Rec_Tree, METH_VARARGS, NULL},
	 { (char *)"Unknown_Rec_Tree_eval", _wrap_Unknown_Rec_Tree_eval, METH_VARARGS, NULL},
	 { (char *)"Unknown_Rec_Tree_get_shifted_legs", _wrap_Unknown_Rec_Tree_get_shifted_legs, METH_VARARGS, NULL},
	 { (char *)"Unknown_Rec_Tree_get_i", _wrap_Unknown_Rec_Tree_get_i, METH_VARARGS, NULL},
	 { (char *)"Unknown_Rec_Tree_get_j", _wrap_Unknown_Rec_Tree_get_j, METH_VARARGS, NULL},
	 { (char *)"Unknown_Rec_Tree_swigregister", Unknown_Rec_Tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"Tree_factory_new_tree", _wrap_Tree_factory_new_tree, METH_VARARGS, NULL},
	 { (char *)"new_Tree_factory", _wrap_new_Tree_factory, METH_VARARGS, NULL},
	 { (char *)"delete_Tree_factory", _wrap_delete_Tree_factory, METH_VARARGS, NULL},
	 { (char *)"Tree_factory_swigregister", Tree_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rec_Tree_WC", _wrap_new_Rec_Tree_WC, METH_VARARGS, NULL},
	 { (char *)"delete_Rec_Tree_WC", _wrap_delete_Rec_Tree_WC, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_WC_eval", _wrap_Rec_Tree_WC_eval, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_WC_get_value", _wrap_Rec_Tree_WC_get_value, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_WC_swigregister", Rec_Tree_WC_swigregister, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_WC_factory_new_tree", _wrap_Rec_Tree_WC_factory_new_tree, METH_VARARGS, NULL},
	 { (char *)"new_Rec_Tree_WC_factory", _wrap_new_Rec_Tree_WC_factory, METH_VARARGS, NULL},
	 { (char *)"delete_Rec_Tree_WC_factory", _wrap_delete_Rec_Tree_WC_factory, METH_VARARGS, NULL},
	 { (char *)"Rec_Tree_WC_factory_swigregister", Rec_Tree_WC_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BHerror", _wrap_new_BHerror, METH_VARARGS, NULL},
	 { (char *)"BHerror_display", _wrap_BHerror_display, METH_VARARGS, NULL},
	 { (char *)"BHerror_set_descr", _wrap_BHerror_set_descr, METH_VARARGS, NULL},
	 { (char *)"delete_BHerror", _wrap_delete_BHerror, METH_VARARGS, NULL},
	 { (char *)"BHerror_swigregister", BHerror_swigregister, METH_VARARGS, NULL},
	 { (char *)"part_add", _wrap_part_add, METH_VARARGS, NULL},
	 { (char *)"part_np", _wrap_part_np, METH_VARARGS, NULL},
	 { (char *)"part_nc", _wrap_part_nc, METH_VARARGS, NULL},
	 { (char *)"part_corner_size", _wrap_part_corner_size, METH_VARARGS, NULL},
	 { (char *)"part_corner_ind", _wrap_part_corner_ind, METH_VARARGS, NULL},
	 { (char *)"part_c", _wrap_part_c, METH_VARARGS, NULL},
	 { (char *)"part_set_corner", _wrap_part_set_corner, METH_VARARGS, NULL},
	 { (char *)"part_set_code", _wrap_part_set_code, METH_VARARGS, NULL},
	 { (char *)"part_get_code", _wrap_part_get_code, METH_VARARGS, NULL},
	 { (char *)"part_extern_process", _wrap_part_extern_process, METH_VARARGS, NULL},
	 { (char *)"new_part", _wrap_new_part, METH_VARARGS, NULL},
	 { (char *)"delete_part", _wrap_delete_part, METH_VARARGS, NULL},
	 { (char *)"part_begin", _wrap_part_begin, METH_VARARGS, NULL},
	 { (char *)"part_end", _wrap_part_end, METH_VARARGS, NULL},
	 { (char *)"part_size", _wrap_part_size, METH_VARARGS, NULL},
	 { (char *)"part___getitem__", _wrap_part___getitem__, METH_VARARGS, NULL},
	 { (char *)"part_swigregister", part_swigregister, METH_VARARGS, NULL},
	 { (char *)"splits4", _wrap_splits4, METH_VARARGS, NULL},
	 { (char *)"splits2", _wrap_splits2, METH_VARARGS, NULL},
	 { (char *)"splits1", _wrap_splits1, METH_VARARGS, NULL},
	 { (char *)"raw_part_add", _wrap_raw_part_add, METH_VARARGS, NULL},
	 { (char *)"raw_part_np", _wrap_raw_part_np, METH_VARARGS, NULL},
	 { (char *)"raw_part_nc", _wrap_raw_part_nc, METH_VARARGS, NULL},
	 { (char *)"raw_part_c", _wrap_raw_part_c, METH_VARARGS, NULL},
	 { (char *)"raw_part_corner", _wrap_raw_part_corner, METH_VARARGS, NULL},
	 { (char *)"raw_part_ind", _wrap_raw_part_ind, METH_VARARGS, NULL},
	 { (char *)"raw_part_indices", _wrap_raw_part_indices, METH_VARARGS, NULL},
	 { (char *)"raw_part_open", _wrap_raw_part_open, METH_VARARGS, NULL},
	 { (char *)"raw_part_set_code", _wrap_raw_part_set_code, METH_VARARGS, NULL},
	 { (char *)"raw_part_get_code", _wrap_raw_part_get_code, METH_VARARGS, NULL},
	 { (char *)"new_raw_part", _wrap_new_raw_part, METH_VARARGS, NULL},
	 { (char *)"raw_part_add_hel_cut", _wrap_raw_part_add_hel_cut, METH_VARARGS, NULL},
	 { (char *)"raw_part_nbr_hel_cuts", _wrap_raw_part_nbr_hel_cuts, METH_VARARGS, NULL},
	 { (char *)"raw_part_hel_cut", _wrap_raw_part_hel_cut, METH_VARARGS, NULL},
	 { (char *)"delete_raw_part", _wrap_delete_raw_part, METH_VARARGS, NULL},
	 { (char *)"raw_part_swigregister", raw_part_swigregister, METH_VARARGS, NULL},
	 { (char *)"raw_box_add_parent", _wrap_raw_box_add_parent, METH_VARARGS, NULL},
	 { (char *)"raw_box_get_parent", _wrap_raw_box_get_parent, METH_VARARGS, NULL},
	 { (char *)"raw_box_get_closed_corner", _wrap_raw_box_get_closed_corner, METH_VARARGS, NULL},
	 { (char *)"raw_box_parents_nbr", _wrap_raw_box_parents_nbr, METH_VARARGS, NULL},
	 { (char *)"new_raw_box", _wrap_new_raw_box, METH_VARARGS, NULL},
	 { (char *)"delete_raw_box", _wrap_delete_raw_box, METH_VARARGS, NULL},
	 { (char *)"raw_box_swigregister", raw_box_swigregister, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_add_daughter", _wrap_raw_triangle_add_daughter, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_add_parent", _wrap_raw_triangle_add_parent, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_get_daughter", _wrap_raw_triangle_get_daughter, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_get_parent", _wrap_raw_triangle_get_parent, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_get_opened_corner", _wrap_raw_triangle_get_opened_corner, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_get_closed_corner", _wrap_raw_triangle_get_closed_corner, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_daughters_nbr", _wrap_raw_triangle_daughters_nbr, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_parents_nbr", _wrap_raw_triangle_parents_nbr, METH_VARARGS, NULL},
	 { (char *)"new_raw_triangle", _wrap_new_raw_triangle, METH_VARARGS, NULL},
	 { (char *)"delete_raw_triangle", _wrap_delete_raw_triangle, METH_VARARGS, NULL},
	 { (char *)"raw_triangle_swigregister", raw_triangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"raw_bubble_add_daughter", _wrap_raw_bubble_add_daughter, METH_VARARGS, NULL},
	 { (char *)"raw_bubble_get_daughter", _wrap_raw_bubble_get_daughter, METH_VARARGS, NULL},
	 { (char *)"raw_bubble_get_opened_corner", _wrap_raw_bubble_get_opened_corner, METH_VARARGS, NULL},
	 { (char *)"raw_bubble_daughters_nbr", _wrap_raw_bubble_daughters_nbr, METH_VARARGS, NULL},
	 { (char *)"new_raw_bubble", _wrap_new_raw_bubble, METH_VARARGS, NULL},
	 { (char *)"delete_raw_bubble", _wrap_delete_raw_bubble, METH_VARARGS, NULL},
	 { (char *)"raw_bubble_swigregister", raw_bubble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_symmetry_factor", _wrap_new_symmetry_factor, METH_VARARGS, NULL},
	 { (char *)"symmetry_factor_get_num", _wrap_symmetry_factor_get_num, METH_VARARGS, NULL},
	 { (char *)"symmetry_factor_get_den", _wrap_symmetry_factor_get_den, METH_VARARGS, NULL},
	 { (char *)"delete_symmetry_factor", _wrap_delete_symmetry_factor, METH_VARARGS, NULL},
	 { (char *)"symmetry_factor_swigregister", symmetry_factor_swigregister, METH_VARARGS, NULL},
	 { (char *)"cutD_l", _wrap_cutD_l, METH_VARARGS, NULL},
	 { (char *)"cutD_open", _wrap_cutD_open, METH_VARARGS, NULL},
	 { (char *)"new_cutD", _wrap_new_cutD, METH_VARARGS, NULL},
	 { (char *)"cutD_is_zero", _wrap_cutD_is_zero, METH_VARARGS, NULL},
	 { (char *)"cutD_c_type", _wrap_cutD_c_type, METH_VARARGS, NULL},
	 { (char *)"cutD_get_process", _wrap_cutD_get_process, METH_VARARGS, NULL},
	 { (char *)"cutD_get_process_code", _wrap_cutD_get_process_code, METH_VARARGS, NULL},
	 { (char *)"cutD_get_raw_partition", _wrap_cutD_get_raw_partition, METH_VARARGS, NULL},
	 { (char *)"cutD_set_raw_partition", _wrap_cutD_set_raw_partition, METH_VARARGS, NULL},
	 { (char *)"cutD_nbr_props", _wrap_cutD_nbr_props, METH_VARARGS, NULL},
	 { (char *)"delete_cutD", _wrap_delete_cutD, METH_VARARGS, NULL},
	 { (char *)"cutD_get_ID", _wrap_cutD_get_ID, METH_VARARGS, NULL},
	 { (char *)"cutD_get_symmetry_factor_no_eval", _wrap_cutD_get_symmetry_factor_no_eval, METH_VARARGS, NULL},
	 { (char *)"cutD_swigregister", cutD_swigregister, METH_VARARGS, NULL},
	 { (char *)"pentagonD_add_parent", _wrap_pentagonD_add_parent, METH_VARARGS, NULL},
	 { (char *)"pentagonD_clear_parents", _wrap_pentagonD_clear_parents, METH_VARARGS, NULL},
	 { (char *)"pentagonD_get_parent", _wrap_pentagonD_get_parent, METH_VARARGS, NULL},
	 { (char *)"pentagonD_get_closed_corner", _wrap_pentagonD_get_closed_corner, METH_VARARGS, NULL},
	 { (char *)"pentagonD_set_closed_corner", _wrap_pentagonD_set_closed_corner, METH_VARARGS, NULL},
	 { (char *)"pentagonD_parents_nbr", _wrap_pentagonD_parents_nbr, METH_VARARGS, NULL},
	 { (char *)"new_pentagonD", _wrap_new_pentagonD, METH_VARARGS, NULL},
	 { (char *)"pentagonD_eval", _wrap_pentagonD_eval, METH_VARARGS, NULL},
	 { (char *)"delete_pentagonD", _wrap_delete_pentagonD, METH_VARARGS, NULL},
	 { (char *)"pentagonD_swigregister", pentagonD_swigregister, METH_VARARGS, NULL},
	 { (char *)"boxD_add_parent", _wrap_boxD_add_parent, METH_VARARGS, NULL},
	 { (char *)"boxD_clear_parents", _wrap_boxD_clear_parents, METH_VARARGS, NULL},
	 { (char *)"boxD_get_parent", _wrap_boxD_get_parent, METH_VARARGS, NULL},
	 { (char *)"boxD_get_closed_corner", _wrap_boxD_get_closed_corner, METH_VARARGS, NULL},
	 { (char *)"boxD_set_closed_corner", _wrap_boxD_set_closed_corner, METH_VARARGS, NULL},
	 { (char *)"boxD_parents_nbr", _wrap_boxD_parents_nbr, METH_VARARGS, NULL},
	 { (char *)"new_boxD", _wrap_new_boxD, METH_VARARGS, NULL},
	 { (char *)"boxD_eval", _wrap_boxD_eval, METH_VARARGS, NULL},
	 { (char *)"delete_boxD", _wrap_delete_boxD, METH_VARARGS, NULL},
	 { (char *)"boxD_swigregister", boxD_swigregister, METH_VARARGS, NULL},
	 { (char *)"triangleD_add_parent", _wrap_triangleD_add_parent, METH_VARARGS, NULL},
	 { (char *)"triangleD_clear_parents", _wrap_triangleD_clear_parents, METH_VARARGS, NULL},
	 { (char *)"triangleD_add_daughter", _wrap_triangleD_add_daughter, METH_VARARGS, NULL},
	 { (char *)"triangleD_clear_daughters", _wrap_triangleD_clear_daughters, METH_VARARGS, NULL},
	 { (char *)"triangleD_get_parent", _wrap_triangleD_get_parent, METH_VARARGS, NULL},
	 { (char *)"triangleD_get_daughter", _wrap_triangleD_get_daughter, METH_VARARGS, NULL},
	 { (char *)"triangleD_parents_nbr", _wrap_triangleD_parents_nbr, METH_VARARGS, NULL},
	 { (char *)"triangleD_daughters_nbr", _wrap_triangleD_daughters_nbr, METH_VARARGS, NULL},
	 { (char *)"triangleD_eval", _wrap_triangleD_eval, METH_VARARGS, NULL},
	 { (char *)"triangleD_get_opened_corner", _wrap_triangleD_get_opened_corner, METH_VARARGS, NULL},
	 { (char *)"triangleD_get_closed_corner", _wrap_triangleD_get_closed_corner, METH_VARARGS, NULL},
	 { (char *)"triangleD_set_opened_corner", _wrap_triangleD_set_opened_corner, METH_VARARGS, NULL},
	 { (char *)"triangleD_set_closed_corner", _wrap_triangleD_set_closed_corner, METH_VARARGS, NULL},
	 { (char *)"new_triangleD", _wrap_new_triangleD, METH_VARARGS, NULL},
	 { (char *)"delete_triangleD", _wrap_delete_triangleD, METH_VARARGS, NULL},
	 { (char *)"triangleD_swigregister", triangleD_swigregister, METH_VARARGS, NULL},
	 { (char *)"bubbleD_add_daughter", _wrap_bubbleD_add_daughter, METH_VARARGS, NULL},
	 { (char *)"bubbleD_clear_daughters", _wrap_bubbleD_clear_daughters, METH_VARARGS, NULL},
	 { (char *)"bubbleD_get_daughter", _wrap_bubbleD_get_daughter, METH_VARARGS, NULL},
	 { (char *)"bubbleD_daughters_nbr", _wrap_bubbleD_daughters_nbr, METH_VARARGS, NULL},
	 { (char *)"bubbleD_get_opened_corner", _wrap_bubbleD_get_opened_corner, METH_VARARGS, NULL},
	 { (char *)"bubbleD_set_opened_corner", _wrap_bubbleD_set_opened_corner, METH_VARARGS, NULL},
	 { (char *)"new_bubbleD", _wrap_new_bubbleD, METH_VARARGS, NULL},
	 { (char *)"bubbleD_eval", _wrap_bubbleD_eval, METH_VARARGS, NULL},
	 { (char *)"delete_bubbleD", _wrap_delete_bubbleD, METH_VARARGS, NULL},
	 { (char *)"bubbleD_get_accuracy", _wrap_bubbleD_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"bubbleD_swigregister", bubbleD_swigregister, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_new_box", _wrap_cutD_factory_new_box, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_new_triangle", _wrap_cutD_factory_new_triangle, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_new_bubble", _wrap_cutD_factory_new_bubble, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_default_CF_get", _wrap_cutD_factory_default_CF_get, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_default_CF_set", _wrap_cutD_factory_default_CF_set, METH_VARARGS, NULL},
	 { (char *)"delete_cutD_factory", _wrap_delete_cutD_factory, METH_VARARGS, NULL},
	 { (char *)"cutD_factory_swigregister", cutD_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DWbox", _wrap_new_DWbox, METH_VARARGS, NULL},
	 { (char *)"DWbox_eval_tree", _wrap_DWbox_eval_tree, METH_VARARGS, NULL},
	 { (char *)"DWbox_corner_size", _wrap_DWbox_corner_size, METH_VARARGS, NULL},
	 { (char *)"DWbox_corner_ind", _wrap_DWbox_corner_ind, METH_VARARGS, NULL},
	 { (char *)"delete_DWbox", _wrap_delete_DWbox, METH_VARARGS, NULL},
	 { (char *)"DWbox_swigregister", DWbox_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DWtriangle", _wrap_new_DWtriangle, METH_VARARGS, NULL},
	 { (char *)"DWtriangle_eval_tree", _wrap_DWtriangle_eval_tree, METH_VARARGS, NULL},
	 { (char *)"DWtriangle_corner_size", _wrap_DWtriangle_corner_size, METH_VARARGS, NULL},
	 { (char *)"DWtriangle_corner_ind", _wrap_DWtriangle_corner_ind, METH_VARARGS, NULL},
	 { (char *)"delete_DWtriangle", _wrap_delete_DWtriangle, METH_VARARGS, NULL},
	 { (char *)"DWtriangle_swigregister", DWtriangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DWbubble", _wrap_new_DWbubble, METH_VARARGS, NULL},
	 { (char *)"DWbubble_eval_tree", _wrap_DWbubble_eval_tree, METH_VARARGS, NULL},
	 { (char *)"DWbubble_corner_size", _wrap_DWbubble_corner_size, METH_VARARGS, NULL},
	 { (char *)"DWbubble_corner_ind", _wrap_DWbubble_corner_ind, METH_VARARGS, NULL},
	 { (char *)"delete_DWbubble", _wrap_delete_DWbubble, METH_VARARGS, NULL},
	 { (char *)"DWbubble_swigregister", DWbubble_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_boxDarren", _wrap_delete_boxDarren, METH_VARARGS, NULL},
	 { (char *)"boxDarren_eval", _wrap_boxDarren_eval, METH_VARARGS, NULL},
	 { (char *)"boxDarren_set_eval", _wrap_boxDarren_set_eval, METH_VARARGS, NULL},
	 { (char *)"boxDarren_is_eval", _wrap_boxDarren_is_eval, METH_VARARGS, NULL},
	 { (char *)"boxDarren_get_kleg", _wrap_boxDarren_get_kleg, METH_VARARGS, NULL},
	 { (char *)"boxDarren_get_masslessleg_type", _wrap_boxDarren_get_masslessleg_type, METH_VARARGS, NULL},
	 { (char *)"boxDarren_get_massless_K1", _wrap_boxDarren_get_massless_K1, METH_VARARGS, NULL},
	 { (char *)"boxDarren_swigregister", boxDarren_swigregister, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k1leg_set", _wrap_triangleDarren__k1leg_set, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k1leg_get", _wrap_triangleDarren__k1leg_get, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k2leg_set", _wrap_triangleDarren__k2leg_set, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k2leg_get", _wrap_triangleDarren__k2leg_get, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k3leg_set", _wrap_triangleDarren__k3leg_set, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__k3leg_get", _wrap_triangleDarren__k3leg_get, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__masslessleg_type_set", _wrap_triangleDarren__masslessleg_type_set, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__masslessleg_type_get", _wrap_triangleDarren__masslessleg_type_get, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__reverse_set", _wrap_triangleDarren__reverse_set, METH_VARARGS, NULL},
	 { (char *)"triangleDarren__reverse_get", _wrap_triangleDarren__reverse_get, METH_VARARGS, NULL},
	 { (char *)"delete_triangleDarren", _wrap_delete_triangleDarren, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_eval", _wrap_triangleDarren_eval, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_get_sub_terms", _wrap_triangleDarren_get_sub_terms, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_set_eval", _wrap_triangleDarren_set_eval, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_is_eval", _wrap_triangleDarren_is_eval, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_get_kleg", _wrap_triangleDarren_get_kleg, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_get_masslessleg_type", _wrap_triangleDarren_get_masslessleg_type, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_change_klegs", _wrap_triangleDarren_change_klegs, METH_VARARGS, NULL},
	 { (char *)"triangleDarren_swigregister", triangleDarren_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_bubbleDarren", _wrap_delete_bubbleDarren, METH_VARARGS, NULL},
	 { (char *)"bubbleDarren_eval", _wrap_bubbleDarren_eval, METH_VARARGS, NULL},
	 { (char *)"bubbleDarren_set_eval", _wrap_bubbleDarren_set_eval, METH_VARARGS, NULL},
	 { (char *)"bubbleDarren_is_eval", _wrap_bubbleDarren_is_eval, METH_VARARGS, NULL},
	 { (char *)"bubbleDarren_GenIndicesBub", _wrap_bubbleDarren_GenIndicesBub, METH_VARARGS, NULL},
	 { (char *)"bubbleDarren_swigregister", bubbleDarren_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_eval", _wrap_Cut_Part_eval, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_box", _wrap_Cut_Part_box, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_triangle", _wrap_Cut_Part_triangle, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_bubble", _wrap_Cut_Part_bubble, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_nbr_boxes", _wrap_Cut_Part_nbr_boxes, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_nbr_triangles", _wrap_Cut_Part_nbr_triangles, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_nbr_bubbles", _wrap_Cut_Part_nbr_bubbles, METH_VARARGS, NULL},
	 { (char *)"new_Cut_Part", _wrap_new_Cut_Part, METH_VARARGS, NULL},
	 { (char *)"delete_Cut_Part", _wrap_delete_Cut_Part, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_set_bubble_eval_daughter", _wrap_Cut_Part_set_bubble_eval_daughter, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_eval_bubble", _wrap_Cut_Part_eval_bubble, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_get_accuracy", _wrap_Cut_Part_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_get_conjugate_cut_part", _wrap_Cut_Part_get_conjugate_cut_part, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_get_conjugate_cut_part_HP", _wrap_Cut_Part_get_conjugate_cut_part_HP, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_get_conjugate_cut_part_VHP", _wrap_Cut_Part_get_conjugate_cut_part_VHP, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_swigregister", Cut_Part_swigregister, METH_VARARGS, NULL},
	 { (char *)"CutPartFactory_new_cut_part", _wrap_CutPartFactory_new_cut_part, METH_VARARGS, NULL},
	 { (char *)"CutPartFactory_s_default_cut_part_factory", _wrap_CutPartFactory_s_default_cut_part_factory, METH_VARARGS, NULL},
	 { (char *)"delete_CutPartFactory", _wrap_delete_CutPartFactory, METH_VARARGS, NULL},
	 { (char *)"CutPartFactory_swigregister", CutPartFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"Known_cut_part_factory_new_cut_part", _wrap_Known_cut_part_factory_new_cut_part, METH_VARARGS, NULL},
	 { (char *)"Known_cut_part_factory_s_default_KCPF_get", _wrap_Known_cut_part_factory_s_default_KCPF_get, METH_VARARGS, NULL},
	 { (char *)"Known_cut_part_factory_s_default_KCPF_set", _wrap_Known_cut_part_factory_s_default_KCPF_set, METH_VARARGS, NULL},
	 { (char *)"delete_Known_cut_part_factory", _wrap_delete_Known_cut_part_factory, METH_VARARGS, NULL},
	 { (char *)"new_Known_cut_part_factory", _wrap_new_Known_cut_part_factory, METH_VARARGS, NULL},
	 { (char *)"Known_cut_part_factory_swigregister", Known_cut_part_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Rational_base", _wrap_delete_Rational_base, METH_VARARGS, NULL},
	 { (char *)"Rational_base_is_zero", _wrap_Rational_base_is_zero, METH_VARARGS, NULL},
	 { (char *)"Rational_base_get_process", _wrap_Rational_base_get_process, METH_VARARGS, NULL},
	 { (char *)"Rational_base_dry_run", _wrap_Rational_base_dry_run, METH_VARARGS, NULL},
	 { (char *)"Rational_base_get_accuracy", _wrap_Rational_base_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"Rational_base_getCutPartDDim", _wrap_Rational_base_getCutPartDDim, METH_VARARGS, NULL},
	 { (char *)"Rational_base_swigregister", Rational_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"RationalFactory_new_rational", _wrap_RationalFactory_new_rational, METH_VARARGS, NULL},
	 { (char *)"RationalFactory_default_rational_factory", _wrap_RationalFactory_default_rational_factory, METH_VARARGS, NULL},
	 { (char *)"delete_RationalFactory", _wrap_delete_RationalFactory, METH_VARARGS, NULL},
	 { (char *)"RationalFactory_swigregister", RationalFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"Known_Rational_factory_new_rational", _wrap_Known_Rational_factory_new_rational, METH_VARARGS, NULL},
	 { (char *)"Known_Rational_factory_s_default_KRF_get", _wrap_Known_Rational_factory_s_default_KRF_get, METH_VARARGS, NULL},
	 { (char *)"Known_Rational_factory_s_default_KRF_set", _wrap_Known_Rational_factory_s_default_KRF_set, METH_VARARGS, NULL},
	 { (char *)"new_Known_Rational_factory", _wrap_new_Known_Rational_factory, METH_VARARGS, NULL},
	 { (char *)"delete_Known_Rational_factory", _wrap_delete_Known_Rational_factory, METH_VARARGS, NULL},
	 { (char *)"Known_Rational_factory_swigregister", Known_Rational_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_rational", _wrap_OneLoopAmplitude_base_get_rational, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_cut", _wrap_OneLoopAmplitude_base_get_cut, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_tree", _wrap_OneLoopAmplitude_base_get_tree, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_accuracy", _wrap_OneLoopAmplitude_base_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_conjugate_amplitude", _wrap_OneLoopAmplitude_base_get_conjugate_amplitude, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_conjugate_amplitude_HP", _wrap_OneLoopAmplitude_base_get_conjugate_amplitude_HP, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_get_conjugate_amplitude_VHP", _wrap_OneLoopAmplitude_base_get_conjugate_amplitude_VHP, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_set_mu_HP", _wrap_OneLoopAmplitude_base_set_mu_HP, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_set_mu_VHP", _wrap_OneLoopAmplitude_base_set_mu_VHP, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_set_mu", _wrap_OneLoopAmplitude_base_set_mu, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_set_scheme", _wrap_OneLoopAmplitude_base_set_scheme, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_dry_run", _wrap_OneLoopAmplitude_base_dry_run, METH_VARARGS, NULL},
	 { (char *)"delete_OneLoopAmplitude_base", _wrap_delete_OneLoopAmplitude_base, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_color_struct", _wrap_OneLoopAmplitude_base_color_struct, METH_VARARGS, NULL},
	 { (char *)"OneLoopAmplitude_base_swigregister", OneLoopAmplitude_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_eval", _wrap_One_Loop_Helicity_Amplitude_eval, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_tree", _wrap_One_Loop_Helicity_Amplitude_tree, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_cut_part", _wrap_One_Loop_Helicity_Amplitude_cut_part, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_rational_part", _wrap_One_Loop_Helicity_Amplitude_rational_part, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_tree", _wrap_One_Loop_Helicity_Amplitude_get_tree, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_rational", _wrap_One_Loop_Helicity_Amplitude_get_rational, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_cut", _wrap_One_Loop_Helicity_Amplitude_get_cut, METH_VARARGS, NULL},
	 { (char *)"new_One_Loop_Helicity_Amplitude", _wrap_new_One_Loop_Helicity_Amplitude, METH_VARARGS, NULL},
	 { (char *)"delete_One_Loop_Helicity_Amplitude", _wrap_delete_One_Loop_Helicity_Amplitude, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_dry_run", _wrap_One_Loop_Helicity_Amplitude_dry_run, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_set_mu_HP", _wrap_One_Loop_Helicity_Amplitude_set_mu_HP, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_set_mu_VHP", _wrap_One_Loop_Helicity_Amplitude_set_mu_VHP, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_set_mu", _wrap_One_Loop_Helicity_Amplitude_set_mu, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_set_scheme", _wrap_One_Loop_Helicity_Amplitude_set_scheme, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_accuracy", _wrap_One_Loop_Helicity_Amplitude_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_conjugate_amplitude", _wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_conjugate_amplitude_HP", _wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude_HP, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_get_conjugate_amplitude_VHP", _wrap_One_Loop_Helicity_Amplitude_get_conjugate_amplitude_VHP, METH_VARARGS, NULL},
	 { (char *)"One_Loop_Helicity_Amplitude_swigregister", One_Loop_Helicity_Amplitude_swigregister, METH_VARARGS, NULL},
	 { (char *)"print_tree_graph", _wrap_print_tree_graph, METH_VARARGS, NULL},
	 { (char *)"print_cut_part_graph", _wrap_print_cut_part_graph, METH_VARARGS, NULL},
	 { (char *)"print_tree_graph_non_zero", _wrap_print_tree_graph_non_zero, METH_VARARGS, NULL},
	 { (char *)"print_cutD", _wrap_print_cutD, METH_VARARGS, NULL},
	 { (char *)"display_cut", _wrap_display_cut, METH_VARARGS, NULL},
	 { (char *)"infod", _wrap_infod, METH_VARARGS, NULL},
	 { (char *)"copy_into_set__set_set", _wrap_copy_into_set__set_set, METH_VARARGS, NULL},
	 { (char *)"copy_into_set__set_get", _wrap_copy_into_set__set_get, METH_VARARGS, NULL},
	 { (char *)"new_copy_into_set", _wrap_new_copy_into_set, METH_VARARGS, NULL},
	 { (char *)"copy_into_set___call__", _wrap_copy_into_set___call__, METH_VARARGS, NULL},
	 { (char *)"delete_copy_into_set", _wrap_delete_copy_into_set, METH_VARARGS, NULL},
	 { (char *)"copy_into_set_swigregister", copy_into_set_swigregister, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_strong_set", _wrap_ordering_constraint_strong_set, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_strong_get", _wrap_ordering_constraint_strong_get, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_weak_set", _wrap_ordering_constraint_weak_set, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_weak_get", _wrap_ordering_constraint_weak_get, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_all_ordered_set", _wrap_ordering_constraint_all_ordered_set, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_all_ordered_get", _wrap_ordering_constraint_all_ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_ordering_constraint", _wrap_new_ordering_constraint, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint___str__", _wrap_ordering_constraint___str__, METH_VARARGS, NULL},
	 { (char *)"delete_ordering_constraint", _wrap_delete_ordering_constraint, METH_VARARGS, NULL},
	 { (char *)"ordering_constraint_swigregister", ordering_constraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"__lt__", _wrap___lt__, METH_VARARGS, NULL},
	 { (char *)"get_ordering_constraint", _wrap_get_ordering_constraint, METH_VARARGS, NULL},
	 { (char *)"all_bubble_partitions", _wrap_all_bubble_partitions, METH_VARARGS, NULL},
	 { (char *)"all_bubble_partitions_with_1_leg", _wrap_all_bubble_partitions_with_1_leg, METH_VARARGS, NULL},
	 { (char *)"all_raw_bubble_partitions", _wrap_all_raw_bubble_partitions, METH_VARARGS, NULL},
	 { (char *)"perm_has_strong_ordered", _wrap_perm_has_strong_ordered, METH_VARARGS, NULL},
	 { (char *)"perm_has_weak_ordered", _wrap_perm_has_weak_ordered, METH_VARARGS, NULL},
	 { (char *)"perm_is_ordered", _wrap_perm_is_ordered, METH_VARARGS, NULL},
	 { (char *)"partially_ordered_vectors", _wrap_partially_ordered_vectors, METH_VARARGS, NULL},
	 { (char *)"partially_ordered_processes", _wrap_partially_ordered_processes, METH_VARARGS, NULL},
	 { (char *)"partially_ordered_particles_vector", _wrap_partially_ordered_particles_vector, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_fn", _wrap_unordered_compare_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_2__ordered_set", _wrap_unordered_compare_2__ordered_set, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_2__ordered_get", _wrap_unordered_compare_2__ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_compare_2", _wrap_new_unordered_compare_2, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_2___call__", _wrap_unordered_compare_2___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_compare_2", _wrap_delete_unordered_compare_2, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_2_swigregister", unordered_compare_2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unordered_compare_3", _wrap_new_unordered_compare_3, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_3___call__", _wrap_unordered_compare_3___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_compare_3", _wrap_delete_unordered_compare_3, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_3_swigregister", unordered_compare_3_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_fn", _wrap_unordered_equal_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_equal___call__", _wrap_unordered_equal___call__, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal", _wrap_new_unordered_equal, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal", _wrap_delete_unordered_equal, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_swigregister", unordered_equal_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_ptr___call__", _wrap_unordered_equal_ptr___call__, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_ptr", _wrap_new_unordered_equal_ptr, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_ptr", _wrap_delete_unordered_equal_ptr, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_ptr_swigregister", unordered_equal_ptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_and_delete_ptr___call__", _wrap_unordered_equal_and_delete_ptr___call__, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_and_delete_ptr", _wrap_new_unordered_equal_and_delete_ptr, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_and_delete_ptr", _wrap_delete_unordered_equal_and_delete_ptr, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_and_delete_ptr_swigregister", unordered_equal_and_delete_ptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_to_ptr_c2_set", _wrap_unordered_equal_to_ptr_c2_set, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_to_ptr_c2_get", _wrap_unordered_equal_to_ptr_c2_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_to_ptr", _wrap_new_unordered_equal_to_ptr, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_to_ptr___call__", _wrap_unordered_equal_to_ptr___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_to_ptr", _wrap_delete_unordered_equal_to_ptr, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_to_ptr_swigregister", unordered_equal_to_ptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_fn", _wrap_unordered_compare_part_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part__ordered_set", _wrap_unordered_compare_part__ordered_set, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part__ordered_get", _wrap_unordered_compare_part__ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_compare_part", _wrap_new_unordered_compare_part, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part___call__", _wrap_unordered_compare_part___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_compare_part", _wrap_delete_unordered_compare_part, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_swigregister", unordered_compare_part_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_prop_fn", _wrap_unordered_compare_part_prop_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_prop__ordered_set", _wrap_unordered_compare_part_prop__ordered_set, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_prop__ordered_get", _wrap_unordered_compare_part_prop__ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_compare_part_prop", _wrap_new_unordered_compare_part_prop, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_prop___call__", _wrap_unordered_compare_part_prop___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_compare_part_prop", _wrap_delete_unordered_compare_part_prop, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_part_prop_swigregister", unordered_compare_part_prop_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_current_fn", _wrap_unordered_compare_current_fn, METH_VARARGS, NULL},
	 { (char *)"new_unordered_compare_current", _wrap_new_unordered_compare_current, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_current___call__", _wrap_unordered_compare_current___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_compare_current", _wrap_delete_unordered_compare_current, METH_VARARGS, NULL},
	 { (char *)"unordered_compare_current_swigregister", unordered_compare_current_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_fn", _wrap_unordered_equal_part_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part__ordered_set", _wrap_unordered_equal_part__ordered_set, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part__ordered_get", _wrap_unordered_equal_part__ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_part", _wrap_new_unordered_equal_part, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part___call__", _wrap_unordered_equal_part___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_part", _wrap_delete_unordered_equal_part, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_swigregister", unordered_equal_part_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_prop_fn", _wrap_unordered_equal_part_prop_fn, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_prop__ordered_set", _wrap_unordered_equal_part_prop__ordered_set, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_prop__ordered_get", _wrap_unordered_equal_part_prop__ordered_get, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_part_prop", _wrap_new_unordered_equal_part_prop, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_prop___call__", _wrap_unordered_equal_part_prop___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_part_prop", _wrap_delete_unordered_equal_part_prop, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_part_prop_swigregister", unordered_equal_part_prop_swigregister, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_current_fn", _wrap_unordered_equal_current_fn, METH_VARARGS, NULL},
	 { (char *)"new_unordered_equal_current", _wrap_new_unordered_equal_current, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_current___call__", _wrap_unordered_equal_current___call__, METH_VARARGS, NULL},
	 { (char *)"delete_unordered_equal_current", _wrap_delete_unordered_equal_current, METH_VARARGS, NULL},
	 { (char *)"unordered_equal_current_swigregister", unordered_equal_current_swigregister, METH_VARARGS, NULL},
	 { (char *)"match_cutD_independent_of_cut_legs_fn", _wrap_match_cutD_independent_of_cut_legs_fn, METH_VARARGS, NULL},
	 { (char *)"new_match_cutD_independent_of_cut_legs", _wrap_new_match_cutD_independent_of_cut_legs, METH_VARARGS, NULL},
	 { (char *)"match_cutD_independent_of_cut_legs___call__", _wrap_match_cutD_independent_of_cut_legs___call__, METH_VARARGS, NULL},
	 { (char *)"delete_match_cutD_independent_of_cut_legs", _wrap_delete_match_cutD_independent_of_cut_legs, METH_VARARGS, NULL},
	 { (char *)"match_cutD_independent_of_cut_legs_swigregister", match_cutD_independent_of_cut_legs_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_standardCutPartDarren", _wrap_new_standardCutPartDarren, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_box", _wrap_standardCutPartDarren_box, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_triangle", _wrap_standardCutPartDarren_triangle, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_bubble", _wrap_standardCutPartDarren_bubble, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_nbr_boxes", _wrap_standardCutPartDarren_nbr_boxes, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_nbr_triangles", _wrap_standardCutPartDarren_nbr_triangles, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_nbr_bubbles", _wrap_standardCutPartDarren_nbr_bubbles, METH_VARARGS, NULL},
	 { (char *)"delete_standardCutPartDarren", _wrap_delete_standardCutPartDarren, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_get_accuracy", _wrap_standardCutPartDarren_get_accuracy, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_get_conjugate_cut_part", _wrap_standardCutPartDarren_get_conjugate_cut_part, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_get_conjugate_cut_part_HP", _wrap_standardCutPartDarren_get_conjugate_cut_part_HP, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_get_conjugate_cut_part_VHP", _wrap_standardCutPartDarren_get_conjugate_cut_part_VHP, METH_VARARGS, NULL},
	 { (char *)"standardCutPartDarren_swigregister", standardCutPartDarren_swigregister, METH_VARARGS, NULL},
	 { (char *)"Darren_CutD_Factory_new_box", _wrap_Darren_CutD_Factory_new_box, METH_VARARGS, NULL},
	 { (char *)"Darren_CutD_Factory_new_triangle", _wrap_Darren_CutD_Factory_new_triangle, METH_VARARGS, NULL},
	 { (char *)"Darren_CutD_Factory_new_bubble", _wrap_Darren_CutD_Factory_new_bubble, METH_VARARGS, NULL},
	 { (char *)"delete_Darren_CutD_Factory", _wrap_delete_Darren_CutD_Factory, METH_VARARGS, NULL},
	 { (char *)"new_Darren_CutD_Factory", _wrap_new_Darren_CutD_Factory, METH_VARARGS, NULL},
	 { (char *)"Darren_CutD_Factory_swigregister", Darren_CutD_Factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"higgs_CutD_Factory_new_box", _wrap_higgs_CutD_Factory_new_box, METH_VARARGS, NULL},
	 { (char *)"higgs_CutD_Factory_new_triangle", _wrap_higgs_CutD_Factory_new_triangle, METH_VARARGS, NULL},
	 { (char *)"higgs_CutD_Factory_new_bubble", _wrap_higgs_CutD_Factory_new_bubble, METH_VARARGS, NULL},
	 { (char *)"delete_higgs_CutD_Factory", _wrap_delete_higgs_CutD_Factory, METH_VARARGS, NULL},
	 { (char *)"new_higgs_CutD_Factory", _wrap_new_higgs_CutD_Factory, METH_VARARGS, NULL},
	 { (char *)"higgs_CutD_Factory_swigregister", higgs_CutD_Factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_normalCutPartDarren", _wrap_new_normalCutPartDarren, METH_VARARGS, NULL},
	 { (char *)"normalCutPartDarren_eval", _wrap_normalCutPartDarren_eval, METH_VARARGS, NULL},
	 { (char *)"delete_normalCutPartDarren", _wrap_delete_normalCutPartDarren, METH_VARARGS, NULL},
	 { (char *)"normalCutPartDarren_swigregister", normalCutPartDarren_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_D_Dims_eval", _wrap_Cut_Part_D_Dims_eval, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_D_Dims_pentagon", _wrap_Cut_Part_D_Dims_pentagon, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_D_Dims_nbr_pentagons", _wrap_Cut_Part_D_Dims_nbr_pentagons, METH_VARARGS, NULL},
	 { (char *)"new_Cut_Part_D_Dims", _wrap_new_Cut_Part_D_Dims, METH_VARARGS, NULL},
	 { (char *)"delete_Cut_Part_D_Dims", _wrap_delete_Cut_Part_D_Dims, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_D_Dims_dry_run", _wrap_Cut_Part_D_Dims_dry_run, METH_VARARGS, NULL},
	 { (char *)"Cut_Part_D_Dims_swigregister", Cut_Part_D_Dims_swigregister, METH_VARARGS, NULL},
	 { (char *)"normal_ratext_factory_new_rational", _wrap_normal_ratext_factory_new_rational, METH_VARARGS, NULL},
	 { (char *)"normal_ratext_factory_s_default_NRF_get", _wrap_normal_ratext_factory_s_default_NRF_get, METH_VARARGS, NULL},
	 { (char *)"normal_ratext_factory_s_default_NRF_set", _wrap_normal_ratext_factory_s_default_NRF_set, METH_VARARGS, NULL},
	 { (char *)"new_normal_ratext_factory", _wrap_new_normal_ratext_factory, METH_VARARGS, NULL},
	 { (char *)"delete_normal_ratext_factory", _wrap_delete_normal_ratext_factory, METH_VARARGS, NULL},
	 { (char *)"normal_ratext_factory_swigregister", normal_ratext_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"write", _wrap_write, METH_VARARGS, NULL},
	 { (char *)"delete_worker_tree", _wrap_delete_worker_tree, METH_VARARGS, NULL},
	 { (char *)"new_worker_tree", _wrap_new_worker_tree, METH_VARARGS, NULL},
	 { (char *)"worker_tree_swigregister", worker_tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_worker_tree_known", _wrap_new_worker_tree_known, METH_VARARGS, NULL},
	 { (char *)"worker_tree_known_eval", _wrap_worker_tree_known_eval, METH_VARARGS, NULL},
	 { (char *)"delete_worker_tree_known", _wrap_delete_worker_tree_known, METH_VARARGS, NULL},
	 { (char *)"worker_tree_known_swigregister", worker_tree_known_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_worker_tree_known_offset", _wrap_new_worker_tree_known_offset, METH_VARARGS, NULL},
	 { (char *)"worker_tree_known_offset_eval", _wrap_worker_tree_known_offset_eval, METH_VARARGS, NULL},
	 { (char *)"delete_worker_tree_known_offset", _wrap_delete_worker_tree_known_offset, METH_VARARGS, NULL},
	 { (char *)"worker_tree_known_offset_swigregister", worker_tree_known_offset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_worker_tree_unknown", _wrap_new_worker_tree_unknown, METH_VARARGS, NULL},
	 { (char *)"worker_tree_unknown_eval", _wrap_worker_tree_unknown_eval, METH_VARARGS, NULL},
	 { (char *)"delete_worker_tree_unknown", _wrap_delete_worker_tree_unknown, METH_VARARGS, NULL},
	 { (char *)"worker_tree_unknown_swigregister", worker_tree_unknown_swigregister, METH_VARARGS, NULL},
	 { (char *)"indices_struct_size_set", _wrap_indices_struct_size_set, METH_VARARGS, NULL},
	 { (char *)"indices_struct_size_get", _wrap_indices_struct_size_get, METH_VARARGS, NULL},
	 { (char *)"indices_struct_indices_set", _wrap_indices_struct_indices_set, METH_VARARGS, NULL},
	 { (char *)"indices_struct_indices_get", _wrap_indices_struct_indices_get, METH_VARARGS, NULL},
	 { (char *)"new_indices_struct", _wrap_new_indices_struct, METH_VARARGS, NULL},
	 { (char *)"delete_indices_struct", _wrap_delete_indices_struct, METH_VARARGS, NULL},
	 { (char *)"indices_struct_swigregister", indices_struct_swigregister, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_indshiftl_set", _wrap_Tree_Pair_base_indshiftl_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_indshiftl_get", _wrap_Tree_Pair_base_indshiftl_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_indshiftr_set", _wrap_Tree_Pair_base_indshiftr_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_indshiftr_get", _wrap_Tree_Pair_base_indshiftr_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_maxl_set", _wrap_Tree_Pair_base_maxl_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_maxl_get", _wrap_Tree_Pair_base_maxl_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_maxr_set", _wrap_Tree_Pair_base_maxr_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_maxr_get", _wrap_Tree_Pair_base_maxr_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_max_set", _wrap_Tree_Pair_base_max_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_max_get", _wrap_Tree_Pair_base_max_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_shifted_ind_j_set", _wrap_Tree_Pair_base_shifted_ind_j_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_shifted_ind_j_get", _wrap_Tree_Pair_base_shifted_ind_j_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_shifted_ind_i_set", _wrap_Tree_Pair_base_shifted_ind_i_set, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_shifted_ind_i_get", _wrap_Tree_Pair_base_shifted_ind_i_get, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_left_size", _wrap_Tree_Pair_base_left_size, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_right_size", _wrap_Tree_Pair_base_right_size, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_left_ind", _wrap_Tree_Pair_base_left_ind, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_right_ind", _wrap_Tree_Pair_base_right_ind, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_eval", _wrap_Tree_Pair_base_eval, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_eval_right", _wrap_Tree_Pair_base_eval_right, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_eval_left", _wrap_Tree_Pair_base_eval_left, METH_VARARGS, NULL},
	 { (char *)"delete_Tree_Pair_base", _wrap_delete_Tree_Pair_base, METH_VARARGS, NULL},
	 { (char *)"Tree_Pair_base_swigregister", Tree_Pair_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_shift_base", _wrap_new_shift_base, METH_VARARGS, NULL},
	 { (char *)"delete_shift_base", _wrap_delete_shift_base, METH_VARARGS, NULL},
	 { (char *)"shift_base_swigregister", shift_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"create_worker_tree", _wrap_create_worker_tree, METH_VARARGS, NULL},
	 { (char *)"worker_tree_factory_new_tree", _wrap_worker_tree_factory_new_tree, METH_VARARGS, NULL},
	 { (char *)"new_worker_tree_factory", _wrap_new_worker_tree_factory, METH_VARARGS, NULL},
	 { (char *)"delete_worker_tree_factory", _wrap_delete_worker_tree_factory, METH_VARARGS, NULL},
	 { (char *)"worker_tree_factory_swigregister", worker_tree_factory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_C", _wrap_new_C, METH_VARARGS, NULL},
	 { (char *)"C_real", _wrap_C_real, METH_VARARGS, NULL},
	 { (char *)"C_imag", _wrap_C_imag, METH_VARARGS, NULL},
	 { (char *)"C___iadd__", _wrap_C___iadd__, METH_VARARGS, NULL},
	 { (char *)"C___isub__", _wrap_C___isub__, METH_VARARGS, NULL},
	 { (char *)"C___imul__", _wrap_C___imul__, METH_VARARGS, NULL},
	 { (char *)"C___idiv__", _wrap_C___idiv__, METH_VARARGS, NULL},
	 { (char *)"C___rep", _wrap_C___rep, METH_VARARGS, NULL},
	 { (char *)"delete_C", _wrap_delete_C, METH_VARARGS, NULL},
	 { (char *)"C_swigregister", C_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CHP", _wrap_new_CHP, METH_VARARGS, NULL},
	 { (char *)"CHP_real", _wrap_CHP_real, METH_VARARGS, NULL},
	 { (char *)"CHP_imag", _wrap_CHP_imag, METH_VARARGS, NULL},
	 { (char *)"CHP___iadd__", _wrap_CHP___iadd__, METH_VARARGS, NULL},
	 { (char *)"CHP___isub__", _wrap_CHP___isub__, METH_VARARGS, NULL},
	 { (char *)"CHP___imul__", _wrap_CHP___imul__, METH_VARARGS, NULL},
	 { (char *)"CHP___idiv__", _wrap_CHP___idiv__, METH_VARARGS, NULL},
	 { (char *)"CHP___rep", _wrap_CHP___rep, METH_VARARGS, NULL},
	 { (char *)"delete_CHP", _wrap_delete_CHP, METH_VARARGS, NULL},
	 { (char *)"CHP_swigregister", CHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CVHP", _wrap_new_CVHP, METH_VARARGS, NULL},
	 { (char *)"CVHP_real", _wrap_CVHP_real, METH_VARARGS, NULL},
	 { (char *)"CVHP_imag", _wrap_CVHP_imag, METH_VARARGS, NULL},
	 { (char *)"CVHP___iadd__", _wrap_CVHP___iadd__, METH_VARARGS, NULL},
	 { (char *)"CVHP___isub__", _wrap_CVHP___isub__, METH_VARARGS, NULL},
	 { (char *)"CVHP___imul__", _wrap_CVHP___imul__, METH_VARARGS, NULL},
	 { (char *)"CVHP___idiv__", _wrap_CVHP___idiv__, METH_VARARGS, NULL},
	 { (char *)"CVHP___rep", _wrap_CVHP___rep, METH_VARARGS, NULL},
	 { (char *)"delete_CVHP", _wrap_delete_CVHP, METH_VARARGS, NULL},
	 { (char *)"CVHP_swigregister", CVHP_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorpID_iterator", _wrap_vectorpID_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorpID___nonzero__", _wrap_vectorpID___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___bool__", _wrap_vectorpID___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___len__", _wrap_vectorpID___len__, METH_VARARGS, NULL},
	 { (char *)"vectorpID_pop", _wrap_vectorpID_pop, METH_VARARGS, NULL},
	 { (char *)"vectorpID___getslice__", _wrap_vectorpID___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___setslice__", _wrap_vectorpID___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___delslice__", _wrap_vectorpID___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___delitem__", _wrap_vectorpID___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___getitem__", _wrap_vectorpID___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpID___setitem__", _wrap_vectorpID___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorpID_append", _wrap_vectorpID_append, METH_VARARGS, NULL},
	 { (char *)"vectorpID_empty", _wrap_vectorpID_empty, METH_VARARGS, NULL},
	 { (char *)"vectorpID_size", _wrap_vectorpID_size, METH_VARARGS, NULL},
	 { (char *)"vectorpID_clear", _wrap_vectorpID_clear, METH_VARARGS, NULL},
	 { (char *)"vectorpID_swap", _wrap_vectorpID_swap, METH_VARARGS, NULL},
	 { (char *)"vectorpID_get_allocator", _wrap_vectorpID_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorpID_begin", _wrap_vectorpID_begin, METH_VARARGS, NULL},
	 { (char *)"vectorpID_end", _wrap_vectorpID_end, METH_VARARGS, NULL},
	 { (char *)"vectorpID_rbegin", _wrap_vectorpID_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorpID_rend", _wrap_vectorpID_rend, METH_VARARGS, NULL},
	 { (char *)"vectorpID_pop_back", _wrap_vectorpID_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorpID_erase", _wrap_vectorpID_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorpID", _wrap_new_vectorpID, METH_VARARGS, NULL},
	 { (char *)"vectorpID_push_back", _wrap_vectorpID_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorpID_front", _wrap_vectorpID_front, METH_VARARGS, NULL},
	 { (char *)"vectorpID_back", _wrap_vectorpID_back, METH_VARARGS, NULL},
	 { (char *)"vectorpID_assign", _wrap_vectorpID_assign, METH_VARARGS, NULL},
	 { (char *)"vectorpID_resize", _wrap_vectorpID_resize, METH_VARARGS, NULL},
	 { (char *)"vectorpID_insert", _wrap_vectorpID_insert, METH_VARARGS, NULL},
	 { (char *)"vectorpID_reserve", _wrap_vectorpID_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorpID_capacity", _wrap_vectorpID_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorpID", _wrap_delete_vectorpID, METH_VARARGS, NULL},
	 { (char *)"vectorpID_swigregister", vectorpID_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cmomd_P", _wrap_Cmomd_P, METH_VARARGS, NULL},
	 { (char *)"Cmomd_E", _wrap_Cmomd_E, METH_VARARGS, NULL},
	 { (char *)"Cmomd_X", _wrap_Cmomd_X, METH_VARARGS, NULL},
	 { (char *)"Cmomd_Y", _wrap_Cmomd_Y, METH_VARARGS, NULL},
	 { (char *)"Cmomd_Z", _wrap_Cmomd_Z, METH_VARARGS, NULL},
	 { (char *)"Cmomd_L", _wrap_Cmomd_L, METH_VARARGS, NULL},
	 { (char *)"Cmomd_Lt", _wrap_Cmomd_Lt, METH_VARARGS, NULL},
	 { (char *)"Cmomd_type", _wrap_Cmomd_type, METH_VARARGS, NULL},
	 { (char *)"Cmomd_Sm", _wrap_Cmomd_Sm, METH_VARARGS, NULL},
	 { (char *)"new_Cmomd", _wrap_new_Cmomd, METH_VARARGS, NULL},
	 { (char *)"Cmomd___iadd__", _wrap_Cmomd___iadd__, METH_VARARGS, NULL},
	 { (char *)"Cmomd___isub__", _wrap_Cmomd___isub__, METH_VARARGS, NULL},
	 { (char *)"Cmomd___imul__", _wrap_Cmomd___imul__, METH_VARARGS, NULL},
	 { (char *)"Cmomd___idiv__", _wrap_Cmomd___idiv__, METH_VARARGS, NULL},
	 { (char *)"Cmomd_add_to_M", _wrap_Cmomd_add_to_M, METH_VARARGS, NULL},
	 { (char *)"Cmomd_add_to_U", _wrap_Cmomd_add_to_U, METH_VARARGS, NULL},
	 { (char *)"Cmomd_set_to_M", _wrap_Cmomd_set_to_M, METH_VARARGS, NULL},
	 { (char *)"Cmomd_set_to_U", _wrap_Cmomd_set_to_U, METH_VARARGS, NULL},
	 { (char *)"Cmomd_set_to", _wrap_Cmomd_set_to, METH_VARARGS, NULL},
	 { (char *)"Cmomd_mult_by_M", _wrap_Cmomd_mult_by_M, METH_VARARGS, NULL},
	 { (char *)"Cmomd_mult_by_U", _wrap_Cmomd_mult_by_U, METH_VARARGS, NULL},
	 { (char *)"Cmomd___str__", _wrap_Cmomd___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Cmomd", _wrap_delete_Cmomd, METH_VARARGS, NULL},
	 { (char *)"Cmomd_swigregister", Cmomd_swigregister, METH_VARARGS, NULL},
	 { (char *)"mcd_n", _wrap_mcd_n, METH_VARARGS, NULL},
	 { (char *)"mcd_p", _wrap_mcd_p, METH_VARARGS, NULL},
	 { (char *)"mcd_mom", _wrap_mcd_mom, METH_VARARGS, NULL},
	 { (char *)"mcd___call__", _wrap_mcd___call__, METH_VARARGS, NULL},
	 { (char *)"new_mcd", _wrap_new_mcd, METH_VARARGS, NULL},
	 { (char *)"mcd_insert", _wrap_mcd_insert, METH_VARARGS, NULL},
	 { (char *)"mcd_lance_print", _wrap_mcd_lance_print, METH_VARARGS, NULL},
	 { (char *)"mcd_spa", _wrap_mcd_spa, METH_VARARGS, NULL},
	 { (char *)"mcd_spb", _wrap_mcd_spb, METH_VARARGS, NULL},
	 { (char *)"mcd_spab", _wrap_mcd_spab, METH_VARARGS, NULL},
	 { (char *)"mcd_spba", _wrap_mcd_spba, METH_VARARGS, NULL},
	 { (char *)"mcd_spaa", _wrap_mcd_spaa, METH_VARARGS, NULL},
	 { (char *)"mcd_spbb", _wrap_mcd_spbb, METH_VARARGS, NULL},
	 { (char *)"mcd_s", _wrap_mcd_s, METH_VARARGS, NULL},
	 { (char *)"mcd_sp", _wrap_mcd_sp, METH_VARARGS, NULL},
	 { (char *)"mcd_m2", _wrap_mcd_m2, METH_VARARGS, NULL},
	 { (char *)"mcd_L", _wrap_mcd_L, METH_VARARGS, NULL},
	 { (char *)"mcd_Lt", _wrap_mcd_Lt, METH_VARARGS, NULL},
	 { (char *)"mcd_Sm", _wrap_mcd_Sm, METH_VARARGS, NULL},
	 { (char *)"mcd_Sum", _wrap_mcd_Sum, METH_VARARGS, NULL},
	 { (char *)"mcd_clear", _wrap_mcd_clear, METH_VARARGS, NULL},
	 { (char *)"mcd_put_value", _wrap_mcd_put_value, METH_VARARGS, NULL},
	 { (char *)"mcd_get_value", _wrap_mcd_get_value, METH_VARARGS, NULL},
	 { (char *)"mcd_put_label", _wrap_mcd_put_label, METH_VARARGS, NULL},
	 { (char *)"mcd_get_label", _wrap_mcd_get_label, METH_VARARGS, NULL},
	 { (char *)"mcd_shiftBA", _wrap_mcd_shiftBA, METH_VARARGS, NULL},
	 { (char *)"delete_mcd", _wrap_delete_mcd, METH_VARARGS, NULL},
	 { (char *)"mcd_swigregister", mcd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mcrd", _wrap_new_mcrd, METH_VARARGS, NULL},
	 { (char *)"mcrd_next", _wrap_mcrd_next, METH_VARARGS, NULL},
	 { (char *)"mcrd_go_to", _wrap_mcrd_go_to, METH_VARARGS, NULL},
	 { (char *)"mcrd_go_to_pos", _wrap_mcrd_go_to_pos, METH_VARARGS, NULL},
	 { (char *)"delete_mcrd", _wrap_delete_mcrd, METH_VARARGS, NULL},
	 { (char *)"mcrd_swigregister", mcrd_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_BH__Known_Rec_Tree_offsetTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *) (BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_offset *) x));
}
static void *_p_BH__Known_Rec_Tree_baseTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *)  ((BH::Known_Rec_Tree_base *) x));
}
static void *_p_BH__Known_Rec_TreeTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *) (BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_Tree_permutationTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *) (BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_permutation *) x));
}
static void *_p_BH__Unknown_Rec_TreeTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *)  ((BH::Unknown_Rec_Tree *) x));
}
static void *_p_BH__Rec_Tree_WCTo_p_BH__Rec_Tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_Tree *)  ((BH::Rec_Tree_WC *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::boxD *) ((BH::cut::Darren::Darren_wrapper< BH::boxD > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::triangleD *) ((BH::cut::Darren::Darren_wrapper< BH::triangleD > *) x));
}
static void *_p_BH__triangleDTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *)  ((BH::triangleD *) x));
}
static void *_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::bubbleD *)(BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) ((BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) x));
}
static void *_p_BH__pentagonDTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *)  ((BH::pentagonD *) x));
}
static void *_p_BH__bubbleDTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *)  ((BH::bubbleD *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::bubbleD *) ((BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) x));
}
static void *_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::boxD *)(BH::cut::Darren::Darren_wrapper< BH::boxD > *) ((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) x));
}
static void *_p_BH__boxDTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *)  ((BH::boxD *) x));
}
static void *_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__cutD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD *) (BH::triangleD *)(BH::cut::Darren::Darren_wrapper< BH::triangleD > *) ((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__triangleD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::triangleD *)  ((BH::cut::Darren::Darren_wrapper< BH::triangleD > *) x));
}
static void *_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__triangleD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::triangleD *) (BH::cut::Darren::Darren_wrapper< BH::triangleD > *) ((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::boxD *) ((BH::cut::Darren::Darren_wrapper< BH::boxD > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::triangleD *) ((BH::cut::Darren::Darren_wrapper< BH::triangleD > *) x));
}
static void *_p_BH__triangleDTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *) ((BH::triangleD *) x));
}
static void *_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::bubbleD *)(BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) ((BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) x));
}
static void *_p_BH__cutDTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *)  ((BH::cutD *) x));
}
static void *_p_BH__pentagonDTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *) ((BH::pentagonD *) x));
}
static void *_p_BH__bubbleDTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *) ((BH::bubbleD *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::bubbleD *) ((BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) x));
}
static void *_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::boxD *)(BH::cut::Darren::Darren_wrapper< BH::boxD > *) ((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) x));
}
static void *_p_BH__boxDTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *) ((BH::boxD *) x));
}
static void *_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::part *) (BH::cutD *)(BH::triangleD *)(BH::cut::Darren::Darren_wrapper< BH::triangleD > *) ((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) x));
}
static void *_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cut::Darren::Darren_wrapper< BH::triangleD > *)  ((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) x));
}
static void *_p_BH__plabelTo_p_BH__particle_ID(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::particle_ID *)  ((BH::plabel *) x));
}
static void *_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::bubbleD *)(BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) ((BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) x));
}
static void *_p_BH__Rec_BBTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::Rec_BB *) x));
}
static void *_p_BH__Unknown_Rec_TreeTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *) ((BH::Unknown_Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_TreeTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree *) x));
}
static void *_p_BH__Rec_TreeTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *) ((BH::Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_Tree_baseTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *) ((BH::Known_Rec_Tree_base *) x));
}
static void *_p_BH__pentagonDTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::pentagonD *) x));
}
static void *_p_BH__Known_Rec_Tree_permutationTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_permutation *) x));
}
static void *_p_BH__worker_tree_unknownTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::worker_tree *) ((BH::worker_tree_unknown *) x));
}
static void *_p_BH__boxDTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::boxD *) x));
}
static void *_p_BH__worker_tree_knownTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::worker_tree *) ((BH::worker_tree_known *) x));
}
static void *_p_BH__Rec_Tree_WCTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *) ((BH::Rec_Tree_WC *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::triangleD *) ((BH::cut::Darren::Darren_wrapper< BH::triangleD > *) x));
}
static void *_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::boxD *)(BH::cut::Darren::Darren_wrapper< BH::boxD > *) ((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) x));
}
static void *_p_BH__triangleDTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::triangleD *) x));
}
static void *_p_BH__Known_Rec_Tree_offsetTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *)(BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_offset *) x));
}
static void *_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::triangleD *)(BH::cut::Darren::Darren_wrapper< BH::triangleD > *) ((BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *) x));
}
static void *_p_BH__worker_tree_known_offsetTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::worker_tree *)(BH::worker_tree_known *) ((BH::worker_tree_known_offset *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::boxD *) ((BH::cut::Darren::Darren_wrapper< BH::boxD > *) x));
}
static void *_p_BH__worker_treeTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::worker_tree *) x));
}
static void *_p_BH__bubbleDTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *)  ((BH::bubbleD *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::bubbleD *) ((BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) x));
}
static void *_p_BH__Rational_baseTo_p_BH__computableT_std__complex_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< std::complex > *) (BH::Rec_BB *) ((BH::Rational_base *) x));
}
static void *_p_BH__Cut_Part_D_DimsTo_p_BH__Cut_Part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Cut_Part *)  ((BH::Cut_Part_D_Dims *) x));
}
static void *_p_BH__Cut_Part_D_DimsTo_p_Cut_Part_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Cut_Part_base *) (BH::Cut_Part *) ((BH::Cut_Part_D_Dims *) x));
}
static void *_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_tTo_p_Cut_Part_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Cut_Part_base *)  ((BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) x));
}
static void *_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_tTo_p_Cut_Part_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Cut_Part_base *) (BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *) ((BH::cut::normal_cut_part< BH::cut::Darren_CutD_Factory > *) x));
}
static void *_p_BH__Cut_PartTo_p_Cut_Part_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Cut_Part_base *)  ((BH::Cut_Part *) x));
}
static void *_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cut::Darren::Darren_wrapper< BH::boxD > *)  ((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) x));
}
static void *_p_BH__TreeHelAmplTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *)  ((BH::TreeHelAmpl *) x));
}
static void *_p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::OneLoopAmplitude_base *) ((BH::One_Loop_Helicity_Amplitude *) x));
}
static void *_p_BH__Known_Rec_Tree_offsetTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_offset *) x));
}
static void *_p_BH__Known_Rec_Tree_baseTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *) ((BH::Known_Rec_Tree_base *) x));
}
static void *_p_BH__OneLoopAmplitude_baseTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *)  ((BH::OneLoopAmplitude_base *) x));
}
static void *_p_BH__Rec_TreeTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *)  ((BH::Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_TreeTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_Tree_permutationTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_permutation *) x));
}
static void *_p_BH__Unknown_Rec_TreeTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *) ((BH::Unknown_Rec_Tree *) x));
}
static void *_p_BH__Rec_Tree_WCTo_p_BH__HelAmpl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::HelAmpl *) (BH::Rec_Tree *) ((BH::Rec_Tree_WC *) x));
}
static void *_p_BH__SeriesCT_qd_real_tTo_p_BH__SeriesT_std__complexT_qd_real_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Series< std::complex< qd_real > > *)  ((BH::SeriesC< qd_real > *) x));
}
static void *_p_BH__SeriesCT_dd_real_tTo_p_BH__SeriesT_std__complexT_dd_real_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Series< std::complex< dd_real > > *)  ((BH::SeriesC< dd_real > *) x));
}
static void *_p_BH__mom_conf_readerT_double_tTo_p_BH__mom_conf_reader_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::mom_conf_reader_base *)  ((BH::mom_conf_reader< double > *) x));
}
static void *_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__bubbleD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::bubbleD *) (BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) ((BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__bubbleD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::bubbleD *)  ((BH::cut::Darren::Darren_wrapper< BH::bubbleD > *) x));
}
static void *_p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__computableT_BH__SeriesC_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< BH::SeriesC > *) (BH::OneLoopAmplitude_base *) ((BH::One_Loop_Helicity_Amplitude *) x));
}
static void *_p_BH__OneLoopAmplitude_baseTo_p_BH__computableT_BH__SeriesC_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::computable< BH::SeriesC > *)  ((BH::OneLoopAmplitude_base *) x));
}
static void *_p_BH__lambdaT_qd_real_tTo_p_BH__spinorT_qd_real_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< qd_real > *)  ((BH::lambda< qd_real > *) x));
}
static void *_p_BH__lambdatT_qd_real_tTo_p_BH__spinorT_qd_real_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< qd_real > *)  ((BH::lambdat< qd_real > *) x));
}
static void *_p_BH__lambdaT_dd_real_tTo_p_BH__spinorT_dd_real_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< dd_real > *)  ((BH::lambda< dd_real > *) x));
}
static void *_p_BH__lambdatT_dd_real_tTo_p_BH__spinorT_dd_real_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< dd_real > *)  ((BH::lambdat< dd_real > *) x));
}
static void *_p_BH__worker_tree_knownTo_p_BH__worker_tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::worker_tree *)  ((BH::worker_tree_known *) x));
}
static void *_p_BH__worker_tree_known_offsetTo_p_BH__worker_tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::worker_tree *) (BH::worker_tree_known *) ((BH::worker_tree_known_offset *) x));
}
static void *_p_BH__worker_tree_unknownTo_p_BH__worker_tree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::worker_tree *)  ((BH::worker_tree_unknown *) x));
}
static void *_p_BH__Known_Rec_Tree_offsetTo_p_BH__Known_Rec_Tree_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Known_Rec_Tree_base *)  ((BH::Known_Rec_Tree_offset *) x));
}
static void *_p_BH__Known_Rec_TreeTo_p_BH__Known_Rec_Tree_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Known_Rec_Tree_base *)  ((BH::Known_Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_Tree_permutationTo_p_BH__Known_Rec_Tree_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Known_Rec_Tree_base *)  ((BH::Known_Rec_Tree_permutation *) x));
}
static void *_p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__OneLoopAmplitude_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::OneLoopAmplitude_base *)  ((BH::One_Loop_Helicity_Amplitude *) x));
}
static void *_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cut::Darren::Darren_wrapper< BH::bubbleD > *)  ((BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *) x));
}
static void *_p_BH__worker_tree_known_offsetTo_p_BH__worker_tree_known(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::worker_tree_known *)  ((BH::worker_tree_known_offset *) x));
}
static void *_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_tTo_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *)  ((BH::cut::normal_cut_part< BH::cut::Darren_CutD_Factory > *) x));
}
static void *_p_BH__Known_cut_part_factoryTo_p_BH__cut_part_factoryT_BH__Cut_Part_base_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cut_part_factory< BH::Cut_Part_base > *)  ((BH::Known_cut_part_factory *) x));
}
static void *_p_BH__Known_Rational_factoryTo_p_BH__Rational_factoryT_BH__Rational_base_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rational_factory< BH::Rational_base > *)  ((BH::Known_Rational_factory *) x));
}
static void *_p_BH__ratext__normal_ratext_factoryTo_p_BH__Rational_factoryT_BH__Rational_base_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rational_factory< BH::Rational_base > *)  ((BH::ratext::normal_ratext_factory *) x));
}
static void *_p_BH__momentum_configurationT_double_tTo_p_BH__momentum_configuration_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::momentum_configuration_base *)  ((BH::momentum_configuration< double > *) x));
}
static void *_p_BH__mom_conf_readerT_double_tTo_p_BH__momentum_configuration_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::momentum_configuration_base *) (BH::momentum_configuration< double > *) ((BH::mom_conf_reader< double > *) x));
}
static void *_p_BH__Known_Rec_Tree_offsetTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_offset *) x));
}
static void *_p_BH__Known_Rec_Tree_baseTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *) ((BH::Known_Rec_Tree_base *) x));
}
static void *_p_BH__Rational_baseTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *)  ((BH::Rational_base *) x));
}
static void *_p_BH__Rec_TreeTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *)  ((BH::Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_TreeTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree *) x));
}
static void *_p_BH__Known_Rec_Tree_permutationTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *)(BH::Known_Rec_Tree_base *) ((BH::Known_Rec_Tree_permutation *) x));
}
static void *_p_BH__Unknown_Rec_TreeTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *) ((BH::Unknown_Rec_Tree *) x));
}
static void *_p_BH__Rec_Tree_WCTo_p_BH__Rec_BB(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Rec_BB *) (BH::Rec_Tree *) ((BH::Rec_Tree_WC *) x));
}
static void *_p_BH__cut__Darren_CutD_FactoryTo_p_BH__cutD_factory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD_factory *)  ((BH::cut::Darren_CutD_Factory *) x));
}
static void *_p_BH__cut__higgs_CutD_FactoryTo_p_BH__cutD_factory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::cutD_factory *)  ((BH::cut::higgs_CutD_Factory *) x));
}
static void *_p_BH__raw_triangleTo_p_BH__raw_part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::raw_part *)  ((BH::raw_triangle *) x));
}
static void *_p_BH__raw_boxTo_p_BH__raw_part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::raw_part *)  ((BH::raw_box *) x));
}
static void *_p_BH__raw_bubbleTo_p_BH__raw_part(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::raw_part *)  ((BH::raw_bubble *) x));
}
static void *_p_BH__lambdaT_double_tTo_p_BH__spinorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< double > *)  ((BH::lambda< double > *) x));
}
static void *_p_BH__lambdatT_double_tTo_p_BH__spinorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::spinor< double > *)  ((BH::lambdat< double > *) x));
}
static void *_p_BH__mom_conf_readerT_double_tTo_p_BH__momentum_configurationT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::momentum_configuration< double > *)  ((BH::mom_conf_reader< double > *) x));
}
static void *_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__boxD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::boxD *)  ((BH::cut::Darren::Darren_wrapper< BH::boxD > *) x));
}
static void *_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__boxD(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::boxD *) (BH::cut::Darren::Darren_wrapper< BH::boxD > *) ((BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *) x));
}
static void *_p_BH__SeriesCT_double_tTo_p_BH__SeriesT_std__complexT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::Series< std::complex< double > > *)  ((BH::SeriesC< double > *) x));
}
static void *_p_BH__BH_interfaceTo_p_BH__setable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BH::setable *)  ((BH::BH_interface *) x));
}
static swig_type_info _swigt__p_BH__BH_Ampl = {"_p_BH__BH_Ampl", "BH::BH_Ampl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__BH_interface = {"_p_BH__BH_interface", "BH::BH_interface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__BHerror = {"_p_BH__BHerror", "BH::BHerror *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__BHinput = {"_p_BH__BHinput", "BH::BHinput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__CmomT_dd_real_t = {"_p_BH__CmomT_dd_real_t", "BH::Cmom< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__CmomT_double_t = {"_p_BH__CmomT_double_t", "BH::momC *|BH::Cmom< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__CmomT_qd_real_t = {"_p_BH__CmomT_qd_real_t", "BH::Cmom< qd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Cut_Part = {"_p_BH__Cut_Part", "BH::Cut_Part *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Cut_Part_D_Dims = {"_p_BH__Cut_Part_D_Dims", "BH::Cut_Part_D_Dims *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Cut_Part_base = {"_p_BH__Cut_Part_base", "BH::Cut_Part_base *|BH::cut_part_factory< Cut_Part_base >::Cut_Part_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__HelAmpl = {"_p_BH__HelAmpl", "BH::HelAmpl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_Rational_factory = {"_p_BH__Known_Rational_factory", "BH::Known_Rational_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_Rec_Tree = {"_p_BH__Known_Rec_Tree", "BH::Known_Rec_Tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_Rec_Tree_base = {"_p_BH__Known_Rec_Tree_base", "BH::Known_Rec_Tree_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_Rec_Tree_offset = {"_p_BH__Known_Rec_Tree_offset", "BH::Known_Rec_Tree_offset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_Rec_Tree_permutation = {"_p_BH__Known_Rec_Tree_permutation", "BH::Known_Rec_Tree_permutation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Known_cut_part_factory = {"_p_BH__Known_cut_part_factory", "BH::Known_cut_part_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__OneLoopAmplitude_base = {"_p_BH__OneLoopAmplitude_base", "BH::OneLoopAmplitude_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__OneLoopRawAmplitude = {"_p_BH__OneLoopRawAmplitude", "BH::OneLoopRawAmplitude *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__One_Loop_Helicity_Amplitude = {"_p_BH__One_Loop_Helicity_Amplitude", "BH::One_Loop_Helicity_Amplitude *|BH::OneLoopHelAmpl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rational_base = {"_p_BH__Rational_base", "BH::Rational_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rational_factoryT_BH__Rational_base_t = {"_p_BH__Rational_factoryT_BH__Rational_base_t", "BH::Rational_factory< BH::Rational_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rec_BB = {"_p_BH__Rec_BB", "BH::Rec_BB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rec_Tree = {"_p_BH__Rec_Tree", "BH::TREE_TYPE *|BH::Rec_Tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rec_Tree_WC = {"_p_BH__Rec_Tree_WC", "BH::Rec_Tree_WC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Rec_Tree_WC_factory = {"_p_BH__Rec_Tree_WC_factory", "BH::Rec_Tree_WC_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesCT_dd_real_t = {"_p_BH__SeriesCT_dd_real_t", "BH::SeriesC< dd_real > *|BH::SeriesC< BH::RHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesCT_double_t = {"_p_BH__SeriesCT_double_t", "BH::SeriesC< BH::R > *|BH::SeriesC< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesCT_qd_real_t = {"_p_BH__SeriesCT_qd_real_t", "BH::SeriesC< qd_real > *|BH::SeriesC< BH::RVHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesT_std__complexT_dd_real_t_t = {"_p_BH__SeriesT_std__complexT_dd_real_t_t", "BH::Series< std::complex< dd_real > > *|BH::CHPSeries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesT_std__complexT_double_t_t = {"_p_BH__SeriesT_std__complexT_double_t_t", "BH::Series< std::complex< double > > *|BH::CSeries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__SeriesT_std__complexT_qd_real_t_t = {"_p_BH__SeriesT_std__complexT_qd_real_t_t", "BH::Series< std::complex< qd_real > > *|BH::CVHPSeries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Spurious_Pole = {"_p_BH__Spurious_Pole", "BH::Spurious_Pole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Spurious_Rational = {"_p_BH__Spurious_Rational", "BH::Spurious_Rational *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__TreeHelAmpl = {"_p_BH__TreeHelAmpl", "BH::TreeHelAmpl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_PairT_BH__massive_prop_massless_shift_t = {"_p_BH__Tree_PairT_BH__massive_prop_massless_shift_t", "BH::Tree_Pair< BH::massive_prop_massless_shift > *|BH::massive_prop_massless_pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_PairT_BH__massive_prop_shift_t = {"_p_BH__Tree_PairT_BH__massive_prop_shift_t", "BH::Tree_Pair< BH::massive_prop_shift > *|BH::massive_prop_pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_PairT_BH__massive_shift_t = {"_p_BH__Tree_PairT_BH__massive_shift_t", "BH::Tree_Pair< BH::massive_shift > *|BH::massive_pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_PairT_BH__massive_unshifted_shift_t = {"_p_BH__Tree_PairT_BH__massive_unshifted_shift_t", "BH::Tree_Pair< BH::massive_unshifted_shift > *|BH::massive_unshifted_pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_PairT_BH__massless_shift_t = {"_p_BH__Tree_PairT_BH__massless_shift_t", "BH::Tree_Pair< BH::massless_shift > *|BH::massless_pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_Pair_base = {"_p_BH__Tree_Pair_base", "BH::Tree_Pair_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_factory = {"_p_BH__Tree_factory", "BH::TREE_FACTORY_TYPE *|BH::Tree_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t = {"_p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t", "BH::REC_TREE_FACTORY_WC *|BH::Tree_factory_WC< BH::Tree_factory,BH::Rec_Tree > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__Unknown_Rec_Tree = {"_p_BH__Unknown_Rec_Tree", "BH::Unknown_Rec_Tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__boxD = {"_p_BH__boxD", "BH::boxD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__bubbleD = {"_p_BH__bubbleD", "BH::bubbleD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__computableT_BH__SeriesC_t = {"_p_BH__computableT_BH__SeriesC_t", "BH::computable< BH::SeriesC > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__computableT_std__complex_t = {"_p_BH__computableT_std__complex_t", "CClx *|BH::computable< std::complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__copy_into_set = {"_p_BH__copy_into_set", "BH::copy_into_set *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cutD = {"_p_BH__cutD", "BH::cutD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cutD_factory = {"_p_BH__cutD_factory", "BH::cutD_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren_CutD_Factory = {"_p_BH__cut__Darren_CutD_Factory", "BH::cut::Darren_CutD_Factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t = {"_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t", "BH::cut::Darren::Darren_wrapper< BH::boxD > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t = {"_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t", "BH::cut::Darren::Darren_wrapper< BH::bubbleD > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t = {"_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t", "BH::cut::Darren::Darren_wrapper< BH::triangleD > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t = {"_p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t", "BH::cut::StandardCornerTreeStrategy *|BH::cut::Darren::Normal_Corner_Tree_Strategy< BH::cut::Darren::bubble_Darren_eval_points< 4,2 >,BH::cut::Darren::Darren_wrapper< BH::bubbleD >,8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t = {"_p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t", "BH::cut::HiggsCornerTreeStrategy *|BH::cut::Darren::Normal_Corner_Tree_Strategy< BH::cut::Darren::bubble_Darren_eval_points< 4,4 >,BH::cut::Darren::Darren_wrapper< BH::bubbleD >,9 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t = {"_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t", "BH::cut::Darren_CutD_Factory::BoxType *|BH::cut::normal_boxDarren *|BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,7,8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t = {"_p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t", "BH::cut::higgs_boxDarren *|BH::cut::Darren::box_Darren< BH::cut::Darren::Darren_wrapper< BH::boxD >,9,9 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t = {"_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t", "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,BH::cut::StandardBubbleSpecs > *|BH::cut::Darren_CutD_Factory::BubbleType *|BH::cut::normal_bubbleDarren *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t = {"_p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t", "BH::cut::Darren::bubble_Darren< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,General_Bubble_Specification< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,9,4,9,4 > > *|BH::cut::higgs_bubbleDarren *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t = {"_p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t", "BH::cut::Darren::bubble_Darren_eval_points< 4,2 > *|BH::cut::StandardMomentaEvaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t = {"_p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t", "BH::cut::HiggsMomentaEvaluator *|BH::cut::Darren::bubble_Darren_eval_points< 4,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t = {"_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t", "BH::cut::Darren_CutD_Factory::TriangleType *|BH::cut::normal_triangleDarren *|BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,BH::cut::StandardTriangleSpecs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t = {"_p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t", "BH::cut::higgs_triangleDarren *|BH::cut::Darren::triangle_Darren< BH::cut::Darren::Darren_wrapper< BH::triangleD >,General_Triangle_Specification< BH::cut::Darren::Darren_wrapper< BH::triangleD >,9,4,9,4 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t = {"_p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t", "BH::cut::higgs_triangle_factory *|BH::cut::Darren::triangle_Darren_factory< BH::cut::Darren::Darren_wrapper< BH::triangleD >,General_Triangle_Specification< BH::cut::Darren::Darren_wrapper< BH::triangleD >,9,4,9,4 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t = {"_p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t", "BH::cut::standard_triangle_factory *|BH::cut::Darren::triangle_Darren_factory< BH::cut::Darren::Darren_wrapper< BH::triangleD >,Normal_Triangle_Specification< BH::cut::Darren::Darren_wrapper< BH::triangleD > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__higgs_CutD_Factory = {"_p_BH__cut__higgs_CutD_Factory", "BH::cut::higgs_CutD_Factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t = {"_p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t", "BH::CutType *|BH::cut_part_Darren *|BH::cut::normal_cut_part< BH::cut::Darren_CutD_Factory > *|BH::cut::normal_cut_part< cut::Darren_CutD_Factory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t = {"_p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t", "BH::cut::normal_cut_part< BH::cut::higgs_CutD_Factory > *|BH::cut_part_higgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_partT_FHZ_factory_t = {"_p_BH__cut__normal_cut_partT_FHZ_factory_t", "BH::cut_part_FHZ *|BH::cut::normal_cut_part< FHZ_factory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t = {"_p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t", "BH::cut::normal_cut_part_factory< BH::cut::Darren_CutD_Factory > *|BH::cut_part_factory_Darren *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t = {"_p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t", "BH::cut::normal_cut_part_factory< BH::cut::higgs_CutD_Factory > *|BH::cut_part_factory_higgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t = {"_p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t", "BH::cut_part_factory_FHZ *|BH::cut::normal_cut_part_factory< FHZ_factory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t = {"_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t", "BH::cut::standard_cut_part< BH::cut::Darren_CutD_Factory::BoxType,BH::cut::Darren_CutD_Factory::TriangleType,BH::cut::Darren_CutD_Factory::BubbleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__cut_part_factoryT_BH__Cut_Part_base_t = {"_p_BH__cut_part_factoryT_BH__Cut_Part_base_t", "BH::cut_part_factory< Cut_Part_base > *|BH::cut_part_factory< BH::Cut_Part_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__eval_paramT_dd_real_t = {"_p_BH__eval_paramT_dd_real_t", "BH::eval_param< dd_real > *|BH::eval_param< BH::RHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__eval_paramT_double_t = {"_p_BH__eval_paramT_double_t", "BH::eval_param< BH::R > *|BH::eval_param< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__eval_paramT_qd_real_t = {"_p_BH__eval_paramT_qd_real_t", "BH::eval_param< qd_real > *|BH::eval_param< BH::RVHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__eval_param_state = {"_p_BH__eval_param_state", "BH::eval_param_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__indices_struct = {"_p_BH__indices_struct", "BH::indices_struct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdaT_dd_real_t = {"_p_BH__lambdaT_dd_real_t", "BH::lambda< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdaT_double_t = {"_p_BH__lambdaT_double_t", "BH::lambda< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdaT_qd_real_t = {"_p_BH__lambdaT_qd_real_t", "BH::lambda< qd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdatT_dd_real_t = {"_p_BH__lambdatT_dd_real_t", "BH::lambdat< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdatT_double_t = {"_p_BH__lambdatT_double_t", "BH::lambdat< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__lambdatT_qd_real_t = {"_p_BH__lambdatT_qd_real_t", "BH::lambdat< qd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__mass_param = {"_p_BH__mass_param", "BH::mass_param *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__mass_param_coll = {"_p_BH__mass_param_coll", "BH::mass_param_coll *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__mass_param_library = {"_p_BH__mass_param_library", "BH::mass_param_library *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__match_cutD_independent_of_cut_legs = {"_p_BH__match_cutD_independent_of_cut_legs", "BH::match_cutD_independent_of_cut_legs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__mom_conf_readerT_double_t = {"_p_BH__mom_conf_readerT_double_t", "BH::mom_conf_reader< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__mom_conf_reader_base = {"_p_BH__mom_conf_reader_base", "BH::mom_conf_reader_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_dd_real_t = {"_p_BH__momentumT_dd_real_t", "BH::momHP *|BH::momCHP *|BH::momentum< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_double_t = {"_p_BH__momentumT_double_t", "BH::mom *|BH::momentum< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_qd_real_t = {"_p_BH__momentumT_qd_real_t", "BH::momentum< qd_real > *|BH::momCVHP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_std__complexT_dd_real_t_t = {"_p_BH__momentumT_std__complexT_dd_real_t_t", "BH::momentum< std::complex< dd_real > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_std__complexT_double_t_t = {"_p_BH__momentumT_std__complexT_double_t_t", "BH::momentum< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentumT_std__complexT_qd_real_t_t = {"_p_BH__momentumT_std__complexT_qd_real_t_t", "BH::momentum< std::complex< qd_real > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_BH__RHP_t = {"_p_BH__momentum_configurationT_BH__RHP_t", "BH::momentum_configuration< RHP > *|BH::mom_conf_HP *|BH::momentum_configuration< BH::RHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_BH__RVHP_t = {"_p_BH__momentum_configurationT_BH__RVHP_t", "BH::mom_conf_VHP *|BH::momentum_configuration< RVHP > *|BH::momentum_configuration< BH::RVHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_BH__R_t = {"_p_BH__momentum_configurationT_BH__R_t", "BH::momentum_configuration< BH::R > *|BH::mom_conf *|BH::momentum_configuration< R > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_dd_real_t = {"_p_BH__momentum_configurationT_dd_real_t", "BH::momentum_configuration< dd_real > *|BH::momentum_configuration< BH::RHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_double_t = {"_p_BH__momentum_configurationT_double_t", "BH::momentum_configuration< BH::R > *|BH::momentum_configuration< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configurationT_qd_real_t = {"_p_BH__momentum_configurationT_qd_real_t", "BH::momentum_configuration< qd_real > *|BH::momentum_configuration< BH::RVHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__momentum_configuration_base = {"_p_BH__momentum_configuration_base", "BH::momentum_configuration_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__option = {"_p_BH__option", "BH::option *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__ordering_constraint = {"_p_BH__ordering_constraint", "BH::ordering_constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__part = {"_p_BH__part", "BH::part *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__particle = {"_p_BH__particle", "BH::particle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__particle_ID = {"_p_BH__particle_ID", "BH::particle_ID *|BH::ph_type *|std::vector< BH::particle_ID >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__pentagonD = {"_p_BH__pentagonD", "BH::pentagonD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__plabel = {"_p_BH__plabel", "BH::plabel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__process = {"_p_BH__process", "BH::process *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t = {"_p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t", "BH::ratext::higgs_ratext *|BH::ratext::general_ratext< Higgs_RatBub_Specification< basebubbleRat >,Higgs_RatTri_Specification< basetriangleRat >,Higgs_RatBox_Specification< baseboxRat >,Higgs_RatPent_Specification< basepentagonRat > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t = {"_p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t", "BH::ratext::normal_ratext *|BH::ratext::general_ratext< Normal_RatBub_Specification< basebubbleRat >,Normal_RatTri_Specification< basetriangleRat >,Normal_RatBox_Specification< baseboxRat >,Normal_RatPent_Specification< basepentagonRat > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__ratext__normal_ratext_factory = {"_p_BH__ratext__normal_ratext_factory", "BH::ratext::normal_ratext_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__raw_box = {"_p_BH__raw_box", "BH::raw_box *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__raw_bubble = {"_p_BH__raw_bubble", "BH::raw_bubble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__raw_part = {"_p_BH__raw_part", "BH::raw_part *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__raw_triangle = {"_p_BH__raw_triangle", "BH::raw_triangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__setable = {"_p_BH__setable", "BH::setable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__shift_base = {"_p_BH__shift_base", "BH::shift_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__smatrixT_double_t = {"_p_BH__smatrixT_double_t", "BH::smatrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__spinorT_dd_real_t = {"_p_BH__spinorT_dd_real_t", "BH::spinor< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__spinorT_double_t = {"_p_BH__spinorT_double_t", "BH::spinor< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__spinorT_qd_real_t = {"_p_BH__spinorT_qd_real_t", "BH::spinor< qd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__symmetry_factor = {"_p_BH__symmetry_factor", "BH::symmetry_factor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__triangleD = {"_p_BH__triangleD", "BH::triangleD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_compare_2 = {"_p_BH__unordered_compare_2", "BH::unordered_compare_2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_compare_3 = {"_p_BH__unordered_compare_3", "BH::unordered_compare_3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_compare_current = {"_p_BH__unordered_compare_current", "BH::unordered_compare_current *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_compare_part = {"_p_BH__unordered_compare_part", "BH::unordered_compare_part *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_compare_part_prop = {"_p_BH__unordered_compare_part_prop", "BH::unordered_compare_part_prop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal = {"_p_BH__unordered_equal", "BH::unordered_equal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_and_delete_ptr = {"_p_BH__unordered_equal_and_delete_ptr", "BH::unordered_equal_and_delete_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_current = {"_p_BH__unordered_equal_current", "BH::unordered_equal_current *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_part = {"_p_BH__unordered_equal_part", "BH::unordered_equal_part *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_part_prop = {"_p_BH__unordered_equal_part_prop", "BH::unordered_equal_part_prop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_ptr = {"_p_BH__unordered_equal_ptr", "BH::unordered_equal_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__unordered_equal_to_ptr = {"_p_BH__unordered_equal_to_ptr", "BH::unordered_equal_to_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__worker_tree = {"_p_BH__worker_tree", "BH::worker_tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__worker_tree_factory = {"_p_BH__worker_tree_factory", "BH::worker_tree_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__worker_tree_known = {"_p_BH__worker_tree_known", "BH::worker_tree_known *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__worker_tree_known_offset = {"_p_BH__worker_tree_known_offset", "BH::worker_tree_known_offset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BH__worker_tree_unknown = {"_p_BH__worker_tree_unknown", "BH::worker_tree_unknown *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoxType = {"_p_BoxType", "BoxType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BubType = {"_p_BubType", "BubType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BubbleType = {"_p_BubbleType", "BubbleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_C = {"_p_C", "C *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CHP = {"_p_CHP", "CHP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CVHP = {"_p_CVHP", "CVHP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cut_Part_Type = {"_p_Cut_Part_Type", "Cut_Part_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cut_Part_base = {"_p_Cut_Part_base", "Cut_Part_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t = {"_p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t", "General_Bubble_Specification< BH::cut::Darren::Darren_wrapper< BH::bubbleD >,9,4,9,4 > *|BH::cut::HiggsBubbleSpecs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t = {"_p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t", "General_Triangle_Specification< BH::cut::Darren::Darren_wrapper< BH::triangleD >,9,4,9,4 > *|BH::cut::HiggsTriangleSpecs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MomentaEvaluatorType = {"_p_MomentaEvaluatorType", "MomentaEvaluatorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t = {"_p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t", "Normal_Bubble_Specification< BH::cut::Darren::Darren_wrapper< BH::bubbleD > > *|BH::cut::StandardBubbleSpecs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t = {"_p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t", "Normal_Triangle_Specification< BH::cut::Darren::Darren_wrapper< BH::triangleD > > *|BH::cut::StandardTriangleSpecs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Rational_Type = {"_p_Rational_Type", "Rational_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SCP = {"_p_SCP", "SCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TriType = {"_p_TriType", "TriType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TriangleType = {"_p_TriangleType", "TriangleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__Rep_type__const_iterator = {"_p__Rep_type__const_iterator", "_Rep_type::const_iterator *|std::set< int >::iterator *|std::set< int >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__Rep_type__const_reverse_iterator = {"_p__Rep_type__const_reverse_iterator", "_Rep_type::const_reverse_iterator *|std::set< int >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__Rep_type__size_type = {"_p__Rep_type__size_type", "_Rep_type::size_type *|std::set< int >::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boxD = {"_p_boxD", "boxD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bubbleD = {"_p_bubbleD", "bubbleD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t = {"_p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t", "coeffparam< dd_real,BH::cut::StandardTriangleSpecs::CPOINTS > *|coeffparam< BH::RHP,BH::cut::StandardTriangleSpecs::CPOINTS > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t = {"_p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t", "coeffparam< double,BH::cut::StandardTriangleSpecs::CPOINTS > *|coeffparam< BH::R,BH::cut::StandardTriangleSpecs::CPOINTS > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t = {"_p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t", "coeffparam< qd_real,BH::cut::StandardTriangleSpecs::CPOINTS > *|coeffparam< BH::RVHP,BH::cut::StandardTriangleSpecs::CPOINTS > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_pointer = {"_p_const_pointer", "const_pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_containerTypeT_dd_real_t = {"_p_containerTypeT_dd_real_t", "containerType< dd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_containerTypeT_double_t = {"_p_containerTypeT_double_t", "containerType< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_containerTypeT_qd_real_t = {"_p_containerTypeT_qd_real_t", "containerType< qd_real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_corner_type = {"_p_corner_type", "corner_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cutD_D_Dims_factory = {"_p_cutD_D_Dims_factory", "cutD_D_Dims_factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_daughter_type = {"_p_daughter_type", "daughter_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dd_real = {"_p_dd_real", "dd_real *|BH::RHP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "BH::R *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_compare = {"_p_key_compare", "key_compare *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_multi_precision_constant = {"_p_multi_precision_constant", "multi_precision_constant *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_option = {"_p_option", "option *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ordering_constraint = {"_p_ordering_constraint", "ordering_constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_BH__CmomT_dd_real_t = {"_p_p_BH__CmomT_dd_real_t", "BH::Cmom< dd_real > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_BH__CmomT_double_t = {"_p_p_BH__CmomT_double_t", "BH::Cmom< double > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_BH__CmomT_qd_real_t = {"_p_p_BH__CmomT_qd_real_t", "BH::Cmom< qd_real > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pointer = {"_p_pointer", "pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qd_real = {"_p_qd_real", "BH::RVHP *|qd_real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_raw_bubble = {"_p_raw_bubble", "raw_bubble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_raw_triangle = {"_p_raw_triangle", "raw_triangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scheme = {"_p_scheme", "scheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_BH__particle_ID_t = {"_p_std__allocatorT_BH__particle_ID_t", "std::vector< BH::particle_ID >::allocator_type *|std::allocator< BH::particle_ID > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::set< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t = {"_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_dd_real_t = {"_p_std__complexT_dd_real_t", "BH::CHP *|std::complex< dd_real > *|std::complex< BH::RHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "BH::C *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_qd_real_t = {"_p_std__complexT_qd_real_t", "BH::CVHP *|std::complex< qd_real > *|std::complex< BH::RVHP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios__pos_type = {"_p_std__ios__pos_type", "std::ios::pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_int_t = {"_p_std__lessT_int_t", "std::set< int >::key_compare *|std::set< int >::value_compare *|std::less< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t = {"_p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t", "std::pair< std::set< int >::iterator,std::set< int >::iterator > *|std::pair< _Rep_type::const_iterator,_Rep_type::const_iterator > *|std::pair< std::set< int >::const_iterator,std::set< int >::const_iterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT__Rep_type__const_iterator_bool_t = {"_p_std__pairT__Rep_type__const_iterator_bool_t", "std::pair< _Rep_type::const_iterator,bool > *|std::pair< std::set< int >::iterator,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t = {"_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t", "std::set< int,std::less< int >,std::allocator< int > > *|std::set< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t = {"_p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t", "std::vector< BH::Cmom< dd_real > > *|std::vector< BH::Cmom< dd_real >,std::allocator< BH::Cmom< dd_real > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t = {"_p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t", "std::vector< BH::Cmom< double > > *|std::vector< BH::Cmom< double >,std::allocator< BH::Cmom< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t = {"_p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t", "std::vector< BH::Cmom< qd_real > > *|std::vector< BH::Cmom< qd_real >,std::allocator< BH::Cmom< qd_real > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t = {"_p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t", "std::vector< BH::part,std::allocator< BH::part > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t = {"_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t", "std::vector< BH::particle_ID > *|std::vector< BH::particle_ID,std::allocator< BH::particle_ID > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator = {"_p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator", "std::vector< BH::particle_ID,std::allocator< BH::particle_ID > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t = {"_p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t", "std::vector< BH::particle *,std::allocator< BH::particle * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t = {"_p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t", "std::vector< BH::plabel,std::allocator< BH::plabel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t = {"_p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t", "std::vector< BH::process,std::allocator< BH::process > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t = {"_p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t", "std::vector< BH::raw_bubble,std::allocator< BH::raw_bubble > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_p_std__allocatorT_double_p_t_t = {"_p_std__vectorT_double_p_std__allocatorT_double_p_t_t", "std::vector< double *,std::allocator< double * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_p_std__allocatorT_int_p_t_t = {"_p_std__vectorT_int_p_std__allocatorT_int_p_t_t", "std::vector< int *,std::allocator< int * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_std__allocatorT_short_t_t = {"_p_std__vectorT_short_std__allocatorT_short_t_t", "std::vector< short,std::allocator< short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t = {"_p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t", "std::vector< std::complex< dd_real >,std::allocator< std::complex< dd_real > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t = {"_p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t", "std::vector< std::complex< qd_real >,std::allocator< std::complex< qd_real > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t = {"_p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t", "std::vector< std::vector< BH::particle *,std::allocator< BH::particle * > >,std::allocator< std::vector< BH::particle *,std::allocator< BH::particle * > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator = {"_p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator", "std::vector< std::vector< BH::plabel,std::allocator< BH::plabel > >,std::allocator< std::vector< BH::plabel,std::allocator< BH::plabel > > > >::const_iterator *|BH::part::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t", "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_triangleD = {"_p_triangleD", "triangleD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_compare = {"_p_value_compare", "value_compare *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BH__BH_Ampl,
  &_swigt__p_BH__BH_interface,
  &_swigt__p_BH__BHerror,
  &_swigt__p_BH__BHinput,
  &_swigt__p_BH__CmomT_dd_real_t,
  &_swigt__p_BH__CmomT_double_t,
  &_swigt__p_BH__CmomT_qd_real_t,
  &_swigt__p_BH__Cut_Part,
  &_swigt__p_BH__Cut_Part_D_Dims,
  &_swigt__p_BH__Cut_Part_base,
  &_swigt__p_BH__HelAmpl,
  &_swigt__p_BH__Known_Rational_factory,
  &_swigt__p_BH__Known_Rec_Tree,
  &_swigt__p_BH__Known_Rec_Tree_base,
  &_swigt__p_BH__Known_Rec_Tree_offset,
  &_swigt__p_BH__Known_Rec_Tree_permutation,
  &_swigt__p_BH__Known_cut_part_factory,
  &_swigt__p_BH__OneLoopAmplitude_base,
  &_swigt__p_BH__OneLoopRawAmplitude,
  &_swigt__p_BH__One_Loop_Helicity_Amplitude,
  &_swigt__p_BH__Rational_base,
  &_swigt__p_BH__Rational_factoryT_BH__Rational_base_t,
  &_swigt__p_BH__Rec_BB,
  &_swigt__p_BH__Rec_Tree,
  &_swigt__p_BH__Rec_Tree_WC,
  &_swigt__p_BH__Rec_Tree_WC_factory,
  &_swigt__p_BH__SeriesCT_dd_real_t,
  &_swigt__p_BH__SeriesCT_double_t,
  &_swigt__p_BH__SeriesCT_qd_real_t,
  &_swigt__p_BH__SeriesT_std__complexT_dd_real_t_t,
  &_swigt__p_BH__SeriesT_std__complexT_double_t_t,
  &_swigt__p_BH__SeriesT_std__complexT_qd_real_t_t,
  &_swigt__p_BH__Spurious_Pole,
  &_swigt__p_BH__Spurious_Rational,
  &_swigt__p_BH__TreeHelAmpl,
  &_swigt__p_BH__Tree_PairT_BH__massive_prop_massless_shift_t,
  &_swigt__p_BH__Tree_PairT_BH__massive_prop_shift_t,
  &_swigt__p_BH__Tree_PairT_BH__massive_shift_t,
  &_swigt__p_BH__Tree_PairT_BH__massive_unshifted_shift_t,
  &_swigt__p_BH__Tree_PairT_BH__massless_shift_t,
  &_swigt__p_BH__Tree_Pair_base,
  &_swigt__p_BH__Tree_factory,
  &_swigt__p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t,
  &_swigt__p_BH__Unknown_Rec_Tree,
  &_swigt__p_BH__boxD,
  &_swigt__p_BH__bubbleD,
  &_swigt__p_BH__computableT_BH__SeriesC_t,
  &_swigt__p_BH__computableT_std__complex_t,
  &_swigt__p_BH__copy_into_set,
  &_swigt__p_BH__cutD,
  &_swigt__p_BH__cutD_factory,
  &_swigt__p_BH__cut__Darren_CutD_Factory,
  &_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t,
  &_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t,
  &_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t,
  &_swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t,
  &_swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t,
  &_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t,
  &_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t,
  &_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t,
  &_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t,
  &_swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t,
  &_swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t,
  &_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t,
  &_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t,
  &_swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t,
  &_swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t,
  &_swigt__p_BH__cut__higgs_CutD_Factory,
  &_swigt__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t,
  &_swigt__p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t,
  &_swigt__p_BH__cut__normal_cut_partT_FHZ_factory_t,
  &_swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t,
  &_swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t,
  &_swigt__p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t,
  &_swigt__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t,
  &_swigt__p_BH__cut_part_factoryT_BH__Cut_Part_base_t,
  &_swigt__p_BH__eval_paramT_dd_real_t,
  &_swigt__p_BH__eval_paramT_double_t,
  &_swigt__p_BH__eval_paramT_qd_real_t,
  &_swigt__p_BH__eval_param_state,
  &_swigt__p_BH__indices_struct,
  &_swigt__p_BH__lambdaT_dd_real_t,
  &_swigt__p_BH__lambdaT_double_t,
  &_swigt__p_BH__lambdaT_qd_real_t,
  &_swigt__p_BH__lambdatT_dd_real_t,
  &_swigt__p_BH__lambdatT_double_t,
  &_swigt__p_BH__lambdatT_qd_real_t,
  &_swigt__p_BH__mass_param,
  &_swigt__p_BH__mass_param_coll,
  &_swigt__p_BH__mass_param_library,
  &_swigt__p_BH__match_cutD_independent_of_cut_legs,
  &_swigt__p_BH__mom_conf_readerT_double_t,
  &_swigt__p_BH__mom_conf_reader_base,
  &_swigt__p_BH__momentumT_dd_real_t,
  &_swigt__p_BH__momentumT_double_t,
  &_swigt__p_BH__momentumT_qd_real_t,
  &_swigt__p_BH__momentumT_std__complexT_dd_real_t_t,
  &_swigt__p_BH__momentumT_std__complexT_double_t_t,
  &_swigt__p_BH__momentumT_std__complexT_qd_real_t_t,
  &_swigt__p_BH__momentum_configurationT_BH__RHP_t,
  &_swigt__p_BH__momentum_configurationT_BH__RVHP_t,
  &_swigt__p_BH__momentum_configurationT_BH__R_t,
  &_swigt__p_BH__momentum_configurationT_dd_real_t,
  &_swigt__p_BH__momentum_configurationT_double_t,
  &_swigt__p_BH__momentum_configurationT_qd_real_t,
  &_swigt__p_BH__momentum_configuration_base,
  &_swigt__p_BH__option,
  &_swigt__p_BH__ordering_constraint,
  &_swigt__p_BH__part,
  &_swigt__p_BH__particle,
  &_swigt__p_BH__particle_ID,
  &_swigt__p_BH__pentagonD,
  &_swigt__p_BH__plabel,
  &_swigt__p_BH__process,
  &_swigt__p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t,
  &_swigt__p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t,
  &_swigt__p_BH__ratext__normal_ratext_factory,
  &_swigt__p_BH__raw_box,
  &_swigt__p_BH__raw_bubble,
  &_swigt__p_BH__raw_part,
  &_swigt__p_BH__raw_triangle,
  &_swigt__p_BH__setable,
  &_swigt__p_BH__shift_base,
  &_swigt__p_BH__smatrixT_double_t,
  &_swigt__p_BH__spinorT_dd_real_t,
  &_swigt__p_BH__spinorT_double_t,
  &_swigt__p_BH__spinorT_qd_real_t,
  &_swigt__p_BH__symmetry_factor,
  &_swigt__p_BH__triangleD,
  &_swigt__p_BH__unordered_compare_2,
  &_swigt__p_BH__unordered_compare_3,
  &_swigt__p_BH__unordered_compare_current,
  &_swigt__p_BH__unordered_compare_part,
  &_swigt__p_BH__unordered_compare_part_prop,
  &_swigt__p_BH__unordered_equal,
  &_swigt__p_BH__unordered_equal_and_delete_ptr,
  &_swigt__p_BH__unordered_equal_current,
  &_swigt__p_BH__unordered_equal_part,
  &_swigt__p_BH__unordered_equal_part_prop,
  &_swigt__p_BH__unordered_equal_ptr,
  &_swigt__p_BH__unordered_equal_to_ptr,
  &_swigt__p_BH__worker_tree,
  &_swigt__p_BH__worker_tree_factory,
  &_swigt__p_BH__worker_tree_known,
  &_swigt__p_BH__worker_tree_known_offset,
  &_swigt__p_BH__worker_tree_unknown,
  &_swigt__p_BoxType,
  &_swigt__p_BubType,
  &_swigt__p_BubbleType,
  &_swigt__p_C,
  &_swigt__p_CHP,
  &_swigt__p_CVHP,
  &_swigt__p_Cut_Part_Type,
  &_swigt__p_Cut_Part_base,
  &_swigt__p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t,
  &_swigt__p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t,
  &_swigt__p_MomentaEvaluatorType,
  &_swigt__p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t,
  &_swigt__p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t,
  &_swigt__p_Rational_Type,
  &_swigt__p_SCP,
  &_swigt__p_TriType,
  &_swigt__p_TriangleType,
  &_swigt__p__Rep_type__const_iterator,
  &_swigt__p__Rep_type__const_reverse_iterator,
  &_swigt__p__Rep_type__size_type,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_boxD,
  &_swigt__p_bubbleD,
  &_swigt__p_char,
  &_swigt__p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  &_swigt__p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  &_swigt__p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  &_swigt__p_const_iterator,
  &_swigt__p_const_pointer,
  &_swigt__p_const_reference,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_containerTypeT_dd_real_t,
  &_swigt__p_containerTypeT_double_t,
  &_swigt__p_containerTypeT_qd_real_t,
  &_swigt__p_corner_type,
  &_swigt__p_cutD_D_Dims_factory,
  &_swigt__p_daughter_type,
  &_swigt__p_dd_real,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_iterator,
  &_swigt__p_key_compare,
  &_swigt__p_key_type,
  &_swigt__p_multi_precision_constant,
  &_swigt__p_option,
  &_swigt__p_ordering_constraint,
  &_swigt__p_p_BH__CmomT_dd_real_t,
  &_swigt__p_p_BH__CmomT_double_t,
  &_swigt__p_p_BH__CmomT_qd_real_t,
  &_swigt__p_p_PyObject,
  &_swigt__p_pointer,
  &_swigt__p_qd_real,
  &_swigt__p_raw_bubble,
  &_swigt__p_raw_triangle,
  &_swigt__p_reference,
  &_swigt__p_reverse_iterator,
  &_swigt__p_scheme,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_BH__particle_ID_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__complexT_dd_real_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_qd_real_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios__pos_type,
  &_swigt__p_std__istream,
  &_swigt__p_std__lessT_int_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t,
  &_swigt__p_std__pairT__Rep_type__const_iterator_bool_t,
  &_swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t,
  &_swigt__p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t,
  &_swigt__p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t,
  &_swigt__p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t,
  &_swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,
  &_swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator,
  &_swigt__p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t,
  &_swigt__p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,
  &_swigt__p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t,
  &_swigt__p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT_double_p_std__allocatorT_double_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_p_std__allocatorT_int_p_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_short_std__allocatorT_short_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_triangleD,
  &_swigt__p_value_compare,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_BH__BH_Ampl[] = {  {&_swigt__p_BH__BH_Ampl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__BH_interface[] = {  {&_swigt__p_BH__BH_interface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__BHerror[] = {  {&_swigt__p_BH__BHerror, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__BHinput[] = {  {&_swigt__p_BH__BHinput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__CmomT_dd_real_t[] = {  {&_swigt__p_BH__CmomT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__CmomT_double_t[] = {  {&_swigt__p_BH__CmomT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__CmomT_qd_real_t[] = {  {&_swigt__p_BH__CmomT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Cut_Part[] = {  {&_swigt__p_BH__Cut_Part_D_Dims, _p_BH__Cut_Part_D_DimsTo_p_BH__Cut_Part, 0, 0},  {&_swigt__p_BH__Cut_Part, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Cut_Part_D_Dims[] = {  {&_swigt__p_BH__Cut_Part_D_Dims, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Cut_Part_base[] = {  {&_swigt__p_BH__Cut_Part_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__HelAmpl[] = {  {&_swigt__p_BH__HelAmpl, 0, 0, 0},  {&_swigt__p_BH__TreeHelAmpl, _p_BH__TreeHelAmplTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__One_Loop_Helicity_Amplitude, _p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_offset, _p_BH__Known_Rec_Tree_offsetTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_base, _p_BH__Known_Rec_Tree_baseTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__OneLoopAmplitude_base, _p_BH__OneLoopAmplitude_baseTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree, _p_BH__Known_Rec_TreeTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_permutation, _p_BH__Known_Rec_Tree_permutationTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Rec_Tree, _p_BH__Rec_TreeTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Unknown_Rec_Tree, _p_BH__Unknown_Rec_TreeTo_p_BH__HelAmpl, 0, 0},  {&_swigt__p_BH__Rec_Tree_WC, _p_BH__Rec_Tree_WCTo_p_BH__HelAmpl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_Rational_factory[] = {  {&_swigt__p_BH__Known_Rational_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_Rec_Tree[] = {  {&_swigt__p_BH__Known_Rec_Tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_Rec_Tree_base[] = {  {&_swigt__p_BH__Known_Rec_Tree_offset, _p_BH__Known_Rec_Tree_offsetTo_p_BH__Known_Rec_Tree_base, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_base, 0, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree, _p_BH__Known_Rec_TreeTo_p_BH__Known_Rec_Tree_base, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_permutation, _p_BH__Known_Rec_Tree_permutationTo_p_BH__Known_Rec_Tree_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_Rec_Tree_offset[] = {  {&_swigt__p_BH__Known_Rec_Tree_offset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_Rec_Tree_permutation[] = {  {&_swigt__p_BH__Known_Rec_Tree_permutation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Known_cut_part_factory[] = {  {&_swigt__p_BH__Known_cut_part_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__OneLoopAmplitude_base[] = {  {&_swigt__p_BH__One_Loop_Helicity_Amplitude, _p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__OneLoopAmplitude_base, 0, 0},  {&_swigt__p_BH__OneLoopAmplitude_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__OneLoopRawAmplitude[] = {  {&_swigt__p_BH__OneLoopRawAmplitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__One_Loop_Helicity_Amplitude[] = {  {&_swigt__p_BH__One_Loop_Helicity_Amplitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rational_base[] = {  {&_swigt__p_BH__Rational_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rational_factoryT_BH__Rational_base_t[] = {  {&_swigt__p_BH__Rational_factoryT_BH__Rational_base_t, 0, 0, 0},  {&_swigt__p_BH__Known_Rational_factory, _p_BH__Known_Rational_factoryTo_p_BH__Rational_factoryT_BH__Rational_base_t, 0, 0},  {&_swigt__p_BH__ratext__normal_ratext_factory, _p_BH__ratext__normal_ratext_factoryTo_p_BH__Rational_factoryT_BH__Rational_base_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rec_BB[] = {  {&_swigt__p_BH__Known_Rec_Tree_offset, _p_BH__Known_Rec_Tree_offsetTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Rec_BB, 0, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_base, _p_BH__Known_Rec_Tree_baseTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Rational_base, _p_BH__Rational_baseTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree, _p_BH__Known_Rec_TreeTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_permutation, _p_BH__Known_Rec_Tree_permutationTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Rec_Tree, _p_BH__Rec_TreeTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Unknown_Rec_Tree, _p_BH__Unknown_Rec_TreeTo_p_BH__Rec_BB, 0, 0},  {&_swigt__p_BH__Rec_Tree_WC, _p_BH__Rec_Tree_WCTo_p_BH__Rec_BB, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rec_Tree[] = {  {&_swigt__p_BH__Known_Rec_Tree_offset, _p_BH__Known_Rec_Tree_offsetTo_p_BH__Rec_Tree, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_base, _p_BH__Known_Rec_Tree_baseTo_p_BH__Rec_Tree, 0, 0},  {&_swigt__p_BH__Rec_Tree, 0, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree, _p_BH__Known_Rec_TreeTo_p_BH__Rec_Tree, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_permutation, _p_BH__Known_Rec_Tree_permutationTo_p_BH__Rec_Tree, 0, 0},  {&_swigt__p_BH__Unknown_Rec_Tree, _p_BH__Unknown_Rec_TreeTo_p_BH__Rec_Tree, 0, 0},  {&_swigt__p_BH__Rec_Tree_WC, _p_BH__Rec_Tree_WCTo_p_BH__Rec_Tree, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rec_Tree_WC[] = {  {&_swigt__p_BH__Rec_Tree_WC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Rec_Tree_WC_factory[] = {  {&_swigt__p_BH__Rec_Tree_WC_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesCT_dd_real_t[] = {  {&_swigt__p_BH__SeriesCT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesCT_double_t[] = {  {&_swigt__p_BH__SeriesCT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesCT_qd_real_t[] = {  {&_swigt__p_BH__SeriesCT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesT_std__complexT_dd_real_t_t[] = {  {&_swigt__p_BH__SeriesCT_dd_real_t, _p_BH__SeriesCT_dd_real_tTo_p_BH__SeriesT_std__complexT_dd_real_t_t, 0, 0},  {&_swigt__p_BH__SeriesT_std__complexT_dd_real_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesT_std__complexT_double_t_t[] = {  {&_swigt__p_BH__SeriesCT_double_t, _p_BH__SeriesCT_double_tTo_p_BH__SeriesT_std__complexT_double_t_t, 0, 0},  {&_swigt__p_BH__SeriesT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__SeriesT_std__complexT_qd_real_t_t[] = {  {&_swigt__p_BH__SeriesCT_qd_real_t, _p_BH__SeriesCT_qd_real_tTo_p_BH__SeriesT_std__complexT_qd_real_t_t, 0, 0},  {&_swigt__p_BH__SeriesT_std__complexT_qd_real_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Spurious_Pole[] = {  {&_swigt__p_BH__Spurious_Pole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Spurious_Rational[] = {  {&_swigt__p_BH__Spurious_Rational, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__TreeHelAmpl[] = {  {&_swigt__p_BH__TreeHelAmpl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_PairT_BH__massive_prop_massless_shift_t[] = {  {&_swigt__p_BH__Tree_PairT_BH__massive_prop_massless_shift_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_PairT_BH__massive_prop_shift_t[] = {  {&_swigt__p_BH__Tree_PairT_BH__massive_prop_shift_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_PairT_BH__massive_shift_t[] = {  {&_swigt__p_BH__Tree_PairT_BH__massive_shift_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_PairT_BH__massive_unshifted_shift_t[] = {  {&_swigt__p_BH__Tree_PairT_BH__massive_unshifted_shift_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_PairT_BH__massless_shift_t[] = {  {&_swigt__p_BH__Tree_PairT_BH__massless_shift_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_Pair_base[] = {  {&_swigt__p_BH__Tree_Pair_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_factory[] = {  {&_swigt__p_BH__Tree_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t[] = {  {&_swigt__p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__Unknown_Rec_Tree[] = {  {&_swigt__p_BH__Unknown_Rec_Tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__boxD[] = {  {&_swigt__p_BH__boxD, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__boxD, 0, 0},  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, _p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__boxD, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__bubbleD[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, _p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__bubbleD, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__bubbleD, 0, 0},  {&_swigt__p_BH__bubbleD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__computableT_BH__SeriesC_t[] = {  {&_swigt__p_BH__One_Loop_Helicity_Amplitude, _p_BH__One_Loop_Helicity_AmplitudeTo_p_BH__computableT_BH__SeriesC_t, 0, 0},  {&_swigt__p_BH__OneLoopAmplitude_base, _p_BH__OneLoopAmplitude_baseTo_p_BH__computableT_BH__SeriesC_t, 0, 0},  {&_swigt__p_BH__computableT_BH__SeriesC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__computableT_std__complex_t[] = {  {&_swigt__p_BH__Unknown_Rec_Tree, _p_BH__Unknown_Rec_TreeTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree, _p_BH__Known_Rec_TreeTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Rec_Tree, _p_BH__Rec_TreeTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_base, _p_BH__Known_Rec_Tree_baseTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__pentagonD, _p_BH__pentagonDTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_permutation, _p_BH__Known_Rec_Tree_permutationTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__worker_tree_unknown, _p_BH__worker_tree_unknownTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, _p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, _p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, _p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__worker_tree_known, _p_BH__worker_tree_knownTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Rec_Tree_WC, _p_BH__Rec_Tree_WCTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__triangleD, _p_BH__triangleDTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Known_Rec_Tree_offset, _p_BH__Known_Rec_Tree_offsetTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__worker_tree_known_offset, _p_BH__worker_tree_known_offsetTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Rec_BB, _p_BH__Rec_BBTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__worker_tree, _p_BH__worker_treeTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__computableT_std__complex_t, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__bubbleD, _p_BH__bubbleDTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__Rational_base, _p_BH__Rational_baseTo_p_BH__computableT_std__complex_t, 0, 0},  {&_swigt__p_BH__boxD, _p_BH__boxDTo_p_BH__computableT_std__complex_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__copy_into_set[] = {  {&_swigt__p_BH__copy_into_set, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cutD[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, _p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, _p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__triangleD, _p_BH__triangleDTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__boxD, _p_BH__boxDTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__pentagonD, _p_BH__pentagonDTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__bubbleD, _p_BH__bubbleDTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__cutD, 0, 0},  {&_swigt__p_BH__cutD, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, _p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__cutD, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cutD_factory[] = {  {&_swigt__p_BH__cutD_factory, 0, 0, 0},  {&_swigt__p_BH__cut__Darren_CutD_Factory, _p_BH__cut__Darren_CutD_FactoryTo_p_BH__cutD_factory, 0, 0},  {&_swigt__p_BH__cut__higgs_CutD_Factory, _p_BH__cut__higgs_CutD_FactoryTo_p_BH__cutD_factory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren_CutD_Factory[] = {  {&_swigt__p_BH__cut__Darren_CutD_Factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t[] = {  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, _p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, _p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t[] = {  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, _p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t[] = {  {&_swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t[] = {  {&_swigt__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t[] = {  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t[] = {  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t[] = {  {&_swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t[] = {  {&_swigt__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t[] = {  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t[] = {  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t[] = {  {&_swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t[] = {  {&_swigt__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__higgs_CutD_Factory[] = {  {&_swigt__p_BH__cut__higgs_CutD_Factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_partT_FHZ_factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_partT_FHZ_factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t[] = {  {&_swigt__p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t[] = {  {&_swigt__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, _p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_tTo_p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0, 0},  {&_swigt__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__cut_part_factoryT_BH__Cut_Part_base_t[] = {  {&_swigt__p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0, 0, 0},  {&_swigt__p_BH__Known_cut_part_factory, _p_BH__Known_cut_part_factoryTo_p_BH__cut_part_factoryT_BH__Cut_Part_base_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__eval_paramT_dd_real_t[] = {  {&_swigt__p_BH__eval_paramT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__eval_paramT_double_t[] = {  {&_swigt__p_BH__eval_paramT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__eval_paramT_qd_real_t[] = {  {&_swigt__p_BH__eval_paramT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__eval_param_state[] = {  {&_swigt__p_BH__eval_param_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__indices_struct[] = {  {&_swigt__p_BH__indices_struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdaT_dd_real_t[] = {  {&_swigt__p_BH__lambdaT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdaT_double_t[] = {  {&_swigt__p_BH__lambdaT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdaT_qd_real_t[] = {  {&_swigt__p_BH__lambdaT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdatT_dd_real_t[] = {  {&_swigt__p_BH__lambdatT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdatT_double_t[] = {  {&_swigt__p_BH__lambdatT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__lambdatT_qd_real_t[] = {  {&_swigt__p_BH__lambdatT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__mass_param[] = {  {&_swigt__p_BH__mass_param, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__mass_param_coll[] = {  {&_swigt__p_BH__mass_param_coll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__mass_param_library[] = {  {&_swigt__p_BH__mass_param_library, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__match_cutD_independent_of_cut_legs[] = {  {&_swigt__p_BH__match_cutD_independent_of_cut_legs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__mom_conf_readerT_double_t[] = {  {&_swigt__p_BH__mom_conf_readerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__mom_conf_reader_base[] = {  {&_swigt__p_BH__mom_conf_readerT_double_t, _p_BH__mom_conf_readerT_double_tTo_p_BH__mom_conf_reader_base, 0, 0},  {&_swigt__p_BH__mom_conf_reader_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_dd_real_t[] = {  {&_swigt__p_BH__momentumT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_double_t[] = {  {&_swigt__p_BH__momentumT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_qd_real_t[] = {  {&_swigt__p_BH__momentumT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_std__complexT_dd_real_t_t[] = {  {&_swigt__p_BH__momentumT_std__complexT_dd_real_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_std__complexT_double_t_t[] = {  {&_swigt__p_BH__momentumT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentumT_std__complexT_qd_real_t_t[] = {  {&_swigt__p_BH__momentumT_std__complexT_qd_real_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_BH__RHP_t[] = {  {&_swigt__p_BH__momentum_configurationT_BH__RHP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_BH__RVHP_t[] = {  {&_swigt__p_BH__momentum_configurationT_BH__RVHP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_BH__R_t[] = {  {&_swigt__p_BH__momentum_configurationT_BH__R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_dd_real_t[] = {  {&_swigt__p_BH__momentum_configurationT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_double_t[] = {  {&_swigt__p_BH__momentum_configurationT_double_t, 0, 0, 0},  {&_swigt__p_BH__mom_conf_readerT_double_t, _p_BH__mom_conf_readerT_double_tTo_p_BH__momentum_configurationT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configurationT_qd_real_t[] = {  {&_swigt__p_BH__momentum_configurationT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__momentum_configuration_base[] = {  {&_swigt__p_BH__momentum_configuration_base, 0, 0, 0},  {&_swigt__p_BH__momentum_configurationT_double_t, _p_BH__momentum_configurationT_double_tTo_p_BH__momentum_configuration_base, 0, 0},  {&_swigt__p_BH__mom_conf_readerT_double_t, _p_BH__mom_conf_readerT_double_tTo_p_BH__momentum_configuration_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__option[] = {  {&_swigt__p_BH__option, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__ordering_constraint[] = {  {&_swigt__p_BH__ordering_constraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__part[] = {  {&_swigt__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t, _p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_tTo_p_BH__part, 0, 0},  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, _p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__part, 0, 0},  {&_swigt__p_BH__triangleD, _p_BH__triangleDTo_p_BH__part, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_tTo_p_BH__part, 0, 0},  {&_swigt__p_BH__boxD, _p_BH__boxDTo_p_BH__part, 0, 0},  {&_swigt__p_BH__pentagonD, _p_BH__pentagonDTo_p_BH__part, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__boxD_tTo_p_BH__part, 0, 0},  {&_swigt__p_BH__bubbleD, _p_BH__bubbleDTo_p_BH__part, 0, 0},  {&_swigt__p_BH__part, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__part, 0, 0},  {&_swigt__p_BH__cutD, _p_BH__cutDTo_p_BH__part, 0, 0},  {&_swigt__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t, _p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_tTo_p_BH__part, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__particle[] = {  {&_swigt__p_BH__particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__particle_ID[] = {  {&_swigt__p_BH__plabel, _p_BH__plabelTo_p_BH__particle_ID, 0, 0},  {&_swigt__p_BH__particle_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__pentagonD[] = {  {&_swigt__p_BH__pentagonD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__plabel[] = {  {&_swigt__p_BH__plabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__process[] = {  {&_swigt__p_BH__process, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t[] = {  {&_swigt__p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t[] = {  {&_swigt__p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__ratext__normal_ratext_factory[] = {  {&_swigt__p_BH__ratext__normal_ratext_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__raw_box[] = {  {&_swigt__p_BH__raw_box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__raw_bubble[] = {  {&_swigt__p_BH__raw_bubble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__raw_part[] = {  {&_swigt__p_BH__raw_part, 0, 0, 0},  {&_swigt__p_BH__raw_triangle, _p_BH__raw_triangleTo_p_BH__raw_part, 0, 0},  {&_swigt__p_BH__raw_box, _p_BH__raw_boxTo_p_BH__raw_part, 0, 0},  {&_swigt__p_BH__raw_bubble, _p_BH__raw_bubbleTo_p_BH__raw_part, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__raw_triangle[] = {  {&_swigt__p_BH__raw_triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__setable[] = {  {&_swigt__p_BH__BH_interface, _p_BH__BH_interfaceTo_p_BH__setable, 0, 0},  {&_swigt__p_BH__setable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__shift_base[] = {  {&_swigt__p_BH__shift_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__smatrixT_double_t[] = {  {&_swigt__p_BH__smatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__spinorT_dd_real_t[] = {  {&_swigt__p_BH__spinorT_dd_real_t, 0, 0, 0},  {&_swigt__p_BH__lambdaT_dd_real_t, _p_BH__lambdaT_dd_real_tTo_p_BH__spinorT_dd_real_t, 0, 0},  {&_swigt__p_BH__lambdatT_dd_real_t, _p_BH__lambdatT_dd_real_tTo_p_BH__spinorT_dd_real_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__spinorT_double_t[] = {  {&_swigt__p_BH__spinorT_double_t, 0, 0, 0},  {&_swigt__p_BH__lambdaT_double_t, _p_BH__lambdaT_double_tTo_p_BH__spinorT_double_t, 0, 0},  {&_swigt__p_BH__lambdatT_double_t, _p_BH__lambdatT_double_tTo_p_BH__spinorT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__spinorT_qd_real_t[] = {  {&_swigt__p_BH__spinorT_qd_real_t, 0, 0, 0},  {&_swigt__p_BH__lambdaT_qd_real_t, _p_BH__lambdaT_qd_real_tTo_p_BH__spinorT_qd_real_t, 0, 0},  {&_swigt__p_BH__lambdatT_qd_real_t, _p_BH__lambdatT_qd_real_tTo_p_BH__spinorT_qd_real_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__symmetry_factor[] = {  {&_swigt__p_BH__symmetry_factor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__triangleD[] = {  {&_swigt__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t, _p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_tTo_p_BH__triangleD, 0, 0},  {&_swigt__p_BH__triangleD, 0, 0, 0},  {&_swigt__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t, _p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_tTo_p_BH__triangleD, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_compare_2[] = {  {&_swigt__p_BH__unordered_compare_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_compare_3[] = {  {&_swigt__p_BH__unordered_compare_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_compare_current[] = {  {&_swigt__p_BH__unordered_compare_current, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_compare_part[] = {  {&_swigt__p_BH__unordered_compare_part, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_compare_part_prop[] = {  {&_swigt__p_BH__unordered_compare_part_prop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal[] = {  {&_swigt__p_BH__unordered_equal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_and_delete_ptr[] = {  {&_swigt__p_BH__unordered_equal_and_delete_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_current[] = {  {&_swigt__p_BH__unordered_equal_current, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_part[] = {  {&_swigt__p_BH__unordered_equal_part, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_part_prop[] = {  {&_swigt__p_BH__unordered_equal_part_prop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_ptr[] = {  {&_swigt__p_BH__unordered_equal_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__unordered_equal_to_ptr[] = {  {&_swigt__p_BH__unordered_equal_to_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__worker_tree[] = {  {&_swigt__p_BH__worker_tree_known, _p_BH__worker_tree_knownTo_p_BH__worker_tree, 0, 0},  {&_swigt__p_BH__worker_tree_known_offset, _p_BH__worker_tree_known_offsetTo_p_BH__worker_tree, 0, 0},  {&_swigt__p_BH__worker_tree_unknown, _p_BH__worker_tree_unknownTo_p_BH__worker_tree, 0, 0},  {&_swigt__p_BH__worker_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__worker_tree_factory[] = {  {&_swigt__p_BH__worker_tree_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__worker_tree_known[] = {  {&_swigt__p_BH__worker_tree_known, 0, 0, 0},  {&_swigt__p_BH__worker_tree_known_offset, _p_BH__worker_tree_known_offsetTo_p_BH__worker_tree_known, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__worker_tree_known_offset[] = {  {&_swigt__p_BH__worker_tree_known_offset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BH__worker_tree_unknown[] = {  {&_swigt__p_BH__worker_tree_unknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoxType[] = {  {&_swigt__p_BoxType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BubType[] = {  {&_swigt__p_BubType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BubbleType[] = {  {&_swigt__p_BubbleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_C[] = {  {&_swigt__p_C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHP[] = {  {&_swigt__p_CHP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CVHP[] = {  {&_swigt__p_CVHP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cut_Part_Type[] = {  {&_swigt__p_Cut_Part_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cut_Part_base[] = {  {&_swigt__p_Cut_Part_base, 0, 0, 0},  {&_swigt__p_BH__Cut_Part_D_Dims, _p_BH__Cut_Part_D_DimsTo_p_Cut_Part_base, 0, 0},  {&_swigt__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t, _p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_tTo_p_Cut_Part_base, 0, 0},  {&_swigt__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t, _p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_tTo_p_Cut_Part_base, 0, 0},  {&_swigt__p_BH__Cut_Part, _p_BH__Cut_PartTo_p_Cut_Part_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t[] = {  {&_swigt__p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t[] = {  {&_swigt__p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MomentaEvaluatorType[] = {  {&_swigt__p_MomentaEvaluatorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t[] = {  {&_swigt__p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t[] = {  {&_swigt__p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Rational_Type[] = {  {&_swigt__p_Rational_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCP[] = {  {&_swigt__p_SCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriType[] = {  {&_swigt__p_TriType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriangleType[] = {  {&_swigt__p_TriangleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__Rep_type__const_iterator[] = {  {&_swigt__p__Rep_type__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__Rep_type__const_reverse_iterator[] = {  {&_swigt__p__Rep_type__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__Rep_type__size_type[] = {  {&_swigt__p__Rep_type__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boxD[] = {  {&_swigt__p_boxD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bubbleD[] = {  {&_swigt__p_bubbleD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t[] = {  {&_swigt__p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t[] = {  {&_swigt__p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t[] = {  {&_swigt__p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_pointer[] = {  {&_swigt__p_const_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_containerTypeT_dd_real_t[] = {  {&_swigt__p_containerTypeT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_containerTypeT_double_t[] = {  {&_swigt__p_containerTypeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_containerTypeT_qd_real_t[] = {  {&_swigt__p_containerTypeT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_corner_type[] = {  {&_swigt__p_corner_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cutD_D_Dims_factory[] = {  {&_swigt__p_cutD_D_Dims_factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daughter_type[] = {  {&_swigt__p_daughter_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dd_real[] = {  {&_swigt__p_dd_real, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_compare[] = {  {&_swigt__p_key_compare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_multi_precision_constant[] = {  {&_swigt__p_multi_precision_constant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_option[] = {  {&_swigt__p_option, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ordering_constraint[] = {  {&_swigt__p_ordering_constraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_BH__CmomT_dd_real_t[] = {  {&_swigt__p_p_BH__CmomT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_BH__CmomT_double_t[] = {  {&_swigt__p_p_BH__CmomT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_BH__CmomT_qd_real_t[] = {  {&_swigt__p_p_BH__CmomT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pointer[] = {  {&_swigt__p_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qd_real[] = {  {&_swigt__p_qd_real, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_raw_bubble[] = {  {&_swigt__p_raw_bubble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_raw_triangle[] = {  {&_swigt__p_raw_triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scheme[] = {  {&_swigt__p_scheme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_BH__particle_ID_t[] = {  {&_swigt__p_std__allocatorT_BH__particle_ID_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_dd_real_t[] = {  {&_swigt__p_std__complexT_dd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_qd_real_t[] = {  {&_swigt__p_std__complexT_qd_real_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios__pos_type[] = {  {&_swigt__p_std__ios__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_int_t[] = {  {&_swigt__p_std__lessT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t[] = {  {&_swigt__p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT__Rep_type__const_iterator_bool_t[] = {  {&_swigt__p_std__pairT__Rep_type__const_iterator_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t[] = {  {&_swigt__p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t[] = {  {&_swigt__p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t[] = {  {&_swigt__p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t[] = {  {&_swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t[] = {  {&_swigt__p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t[] = {  {&_swigt__p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t[] = {  {&_swigt__p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t[] = {  {&_swigt__p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_p_std__allocatorT_double_p_t_t[] = {  {&_swigt__p_std__vectorT_double_p_std__allocatorT_double_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_p_std__allocatorT_int_p_t_t[] = {  {&_swigt__p_std__vectorT_int_p_std__allocatorT_int_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_std__allocatorT_short_t_t[] = {  {&_swigt__p_std__vectorT_short_std__allocatorT_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_triangleD[] = {  {&_swigt__p_triangleD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_compare[] = {  {&_swigt__p_value_compare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BH__BH_Ampl,
  _swigc__p_BH__BH_interface,
  _swigc__p_BH__BHerror,
  _swigc__p_BH__BHinput,
  _swigc__p_BH__CmomT_dd_real_t,
  _swigc__p_BH__CmomT_double_t,
  _swigc__p_BH__CmomT_qd_real_t,
  _swigc__p_BH__Cut_Part,
  _swigc__p_BH__Cut_Part_D_Dims,
  _swigc__p_BH__Cut_Part_base,
  _swigc__p_BH__HelAmpl,
  _swigc__p_BH__Known_Rational_factory,
  _swigc__p_BH__Known_Rec_Tree,
  _swigc__p_BH__Known_Rec_Tree_base,
  _swigc__p_BH__Known_Rec_Tree_offset,
  _swigc__p_BH__Known_Rec_Tree_permutation,
  _swigc__p_BH__Known_cut_part_factory,
  _swigc__p_BH__OneLoopAmplitude_base,
  _swigc__p_BH__OneLoopRawAmplitude,
  _swigc__p_BH__One_Loop_Helicity_Amplitude,
  _swigc__p_BH__Rational_base,
  _swigc__p_BH__Rational_factoryT_BH__Rational_base_t,
  _swigc__p_BH__Rec_BB,
  _swigc__p_BH__Rec_Tree,
  _swigc__p_BH__Rec_Tree_WC,
  _swigc__p_BH__Rec_Tree_WC_factory,
  _swigc__p_BH__SeriesCT_dd_real_t,
  _swigc__p_BH__SeriesCT_double_t,
  _swigc__p_BH__SeriesCT_qd_real_t,
  _swigc__p_BH__SeriesT_std__complexT_dd_real_t_t,
  _swigc__p_BH__SeriesT_std__complexT_double_t_t,
  _swigc__p_BH__SeriesT_std__complexT_qd_real_t_t,
  _swigc__p_BH__Spurious_Pole,
  _swigc__p_BH__Spurious_Rational,
  _swigc__p_BH__TreeHelAmpl,
  _swigc__p_BH__Tree_PairT_BH__massive_prop_massless_shift_t,
  _swigc__p_BH__Tree_PairT_BH__massive_prop_shift_t,
  _swigc__p_BH__Tree_PairT_BH__massive_shift_t,
  _swigc__p_BH__Tree_PairT_BH__massive_unshifted_shift_t,
  _swigc__p_BH__Tree_PairT_BH__massless_shift_t,
  _swigc__p_BH__Tree_Pair_base,
  _swigc__p_BH__Tree_factory,
  _swigc__p_BH__Tree_factory_WCT_BH__Tree_factory_BH__Rec_Tree_t,
  _swigc__p_BH__Unknown_Rec_Tree,
  _swigc__p_BH__boxD,
  _swigc__p_BH__bubbleD,
  _swigc__p_BH__computableT_BH__SeriesC_t,
  _swigc__p_BH__computableT_std__complex_t,
  _swigc__p_BH__copy_into_set,
  _swigc__p_BH__cutD,
  _swigc__p_BH__cutD_factory,
  _swigc__p_BH__cut__Darren_CutD_Factory,
  _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__boxD_t,
  _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t,
  _swigc__p_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t,
  _swigc__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_8_t,
  _swigc__p_BH__cut__Darren__Normal_Corner_Tree_StrategyT_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_t,
  _swigc__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_7_8_t,
  _swigc__p_BH__cut__Darren__box_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__boxD_t_9_9_t,
  _swigc__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_BH__cut__StandardBubbleSpecs_t,
  _swigc__p_BH__cut__Darren__bubble_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t_t,
  _swigc__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_2_t,
  _swigc__p_BH__cut__Darren__bubble_Darren_eval_pointsT_4_4_t,
  _swigc__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_BH__cut__StandardTriangleSpecs_t,
  _swigc__p_BH__cut__Darren__triangle_DarrenT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t,
  _swigc__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t_t,
  _swigc__p_BH__cut__Darren__triangle_Darren_factoryT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t_t,
  _swigc__p_BH__cut__higgs_CutD_Factory,
  _swigc__p_BH__cut__normal_cut_partT_BH__cut__Darren_CutD_Factory_t,
  _swigc__p_BH__cut__normal_cut_partT_BH__cut__higgs_CutD_Factory_t,
  _swigc__p_BH__cut__normal_cut_partT_FHZ_factory_t,
  _swigc__p_BH__cut__normal_cut_part_factoryT_BH__cut__Darren_CutD_Factory_t,
  _swigc__p_BH__cut__normal_cut_part_factoryT_BH__cut__higgs_CutD_Factory_t,
  _swigc__p_BH__cut__normal_cut_part_factoryT_FHZ_factory_t,
  _swigc__p_BH__cut__standard_cut_partT_BH__cut__Darren_CutD_Factory__BoxType_BH__cut__Darren_CutD_Factory__TriangleType_BH__cut__Darren_CutD_Factory__BubbleType_t,
  _swigc__p_BH__cut_part_factoryT_BH__Cut_Part_base_t,
  _swigc__p_BH__eval_paramT_dd_real_t,
  _swigc__p_BH__eval_paramT_double_t,
  _swigc__p_BH__eval_paramT_qd_real_t,
  _swigc__p_BH__eval_param_state,
  _swigc__p_BH__indices_struct,
  _swigc__p_BH__lambdaT_dd_real_t,
  _swigc__p_BH__lambdaT_double_t,
  _swigc__p_BH__lambdaT_qd_real_t,
  _swigc__p_BH__lambdatT_dd_real_t,
  _swigc__p_BH__lambdatT_double_t,
  _swigc__p_BH__lambdatT_qd_real_t,
  _swigc__p_BH__mass_param,
  _swigc__p_BH__mass_param_coll,
  _swigc__p_BH__mass_param_library,
  _swigc__p_BH__match_cutD_independent_of_cut_legs,
  _swigc__p_BH__mom_conf_readerT_double_t,
  _swigc__p_BH__mom_conf_reader_base,
  _swigc__p_BH__momentumT_dd_real_t,
  _swigc__p_BH__momentumT_double_t,
  _swigc__p_BH__momentumT_qd_real_t,
  _swigc__p_BH__momentumT_std__complexT_dd_real_t_t,
  _swigc__p_BH__momentumT_std__complexT_double_t_t,
  _swigc__p_BH__momentumT_std__complexT_qd_real_t_t,
  _swigc__p_BH__momentum_configurationT_BH__RHP_t,
  _swigc__p_BH__momentum_configurationT_BH__RVHP_t,
  _swigc__p_BH__momentum_configurationT_BH__R_t,
  _swigc__p_BH__momentum_configurationT_dd_real_t,
  _swigc__p_BH__momentum_configurationT_double_t,
  _swigc__p_BH__momentum_configurationT_qd_real_t,
  _swigc__p_BH__momentum_configuration_base,
  _swigc__p_BH__option,
  _swigc__p_BH__ordering_constraint,
  _swigc__p_BH__part,
  _swigc__p_BH__particle,
  _swigc__p_BH__particle_ID,
  _swigc__p_BH__pentagonD,
  _swigc__p_BH__plabel,
  _swigc__p_BH__process,
  _swigc__p_BH__ratext__general_ratextT_Higgs_RatBub_SpecificationT_basebubbleRat_t_Higgs_RatTri_SpecificationT_basetriangleRat_t_Higgs_RatBox_SpecificationT_baseboxRat_t_Higgs_RatPent_SpecificationT_basepentagonRat_t_t,
  _swigc__p_BH__ratext__general_ratextT_Normal_RatBub_SpecificationT_basebubbleRat_t_Normal_RatTri_SpecificationT_basetriangleRat_t_Normal_RatBox_SpecificationT_baseboxRat_t_Normal_RatPent_SpecificationT_basepentagonRat_t_t,
  _swigc__p_BH__ratext__normal_ratext_factory,
  _swigc__p_BH__raw_box,
  _swigc__p_BH__raw_bubble,
  _swigc__p_BH__raw_part,
  _swigc__p_BH__raw_triangle,
  _swigc__p_BH__setable,
  _swigc__p_BH__shift_base,
  _swigc__p_BH__smatrixT_double_t,
  _swigc__p_BH__spinorT_dd_real_t,
  _swigc__p_BH__spinorT_double_t,
  _swigc__p_BH__spinorT_qd_real_t,
  _swigc__p_BH__symmetry_factor,
  _swigc__p_BH__triangleD,
  _swigc__p_BH__unordered_compare_2,
  _swigc__p_BH__unordered_compare_3,
  _swigc__p_BH__unordered_compare_current,
  _swigc__p_BH__unordered_compare_part,
  _swigc__p_BH__unordered_compare_part_prop,
  _swigc__p_BH__unordered_equal,
  _swigc__p_BH__unordered_equal_and_delete_ptr,
  _swigc__p_BH__unordered_equal_current,
  _swigc__p_BH__unordered_equal_part,
  _swigc__p_BH__unordered_equal_part_prop,
  _swigc__p_BH__unordered_equal_ptr,
  _swigc__p_BH__unordered_equal_to_ptr,
  _swigc__p_BH__worker_tree,
  _swigc__p_BH__worker_tree_factory,
  _swigc__p_BH__worker_tree_known,
  _swigc__p_BH__worker_tree_known_offset,
  _swigc__p_BH__worker_tree_unknown,
  _swigc__p_BoxType,
  _swigc__p_BubType,
  _swigc__p_BubbleType,
  _swigc__p_C,
  _swigc__p_CHP,
  _swigc__p_CVHP,
  _swigc__p_Cut_Part_Type,
  _swigc__p_Cut_Part_base,
  _swigc__p_General_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_9_4_9_4_t,
  _swigc__p_General_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_9_4_9_4_t,
  _swigc__p_MomentaEvaluatorType,
  _swigc__p_Normal_Bubble_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__bubbleD_t_t,
  _swigc__p_Normal_Triangle_SpecificationT_BH__cut__Darren__Darren_wrapperT_BH__triangleD_t_t,
  _swigc__p_Rational_Type,
  _swigc__p_SCP,
  _swigc__p_TriType,
  _swigc__p_TriangleType,
  _swigc__p__Rep_type__const_iterator,
  _swigc__p__Rep_type__const_reverse_iterator,
  _swigc__p__Rep_type__size_type,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_boxD,
  _swigc__p_bubbleD,
  _swigc__p_char,
  _swigc__p_coeffparamT_dd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  _swigc__p_coeffparamT_double_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  _swigc__p_coeffparamT_qd_real_BH__cut__StandardTriangleSpecs__CPOINTS_t,
  _swigc__p_const_iterator,
  _swigc__p_const_pointer,
  _swigc__p_const_reference,
  _swigc__p_const_reverse_iterator,
  _swigc__p_containerTypeT_dd_real_t,
  _swigc__p_containerTypeT_double_t,
  _swigc__p_containerTypeT_qd_real_t,
  _swigc__p_corner_type,
  _swigc__p_cutD_D_Dims_factory,
  _swigc__p_daughter_type,
  _swigc__p_dd_real,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_iterator,
  _swigc__p_key_compare,
  _swigc__p_key_type,
  _swigc__p_multi_precision_constant,
  _swigc__p_option,
  _swigc__p_ordering_constraint,
  _swigc__p_p_BH__CmomT_dd_real_t,
  _swigc__p_p_BH__CmomT_double_t,
  _swigc__p_p_BH__CmomT_qd_real_t,
  _swigc__p_p_PyObject,
  _swigc__p_pointer,
  _swigc__p_qd_real,
  _swigc__p_raw_bubble,
  _swigc__p_raw_triangle,
  _swigc__p_reference,
  _swigc__p_reverse_iterator,
  _swigc__p_scheme,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_BH__particle_ID_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__complexT_dd_real_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_qd_real_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios__pos_type,
  _swigc__p_std__istream,
  _swigc__p_std__lessT_int_t,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT__Rep_type__const_iterator__Rep_type__const_iterator_t,
  _swigc__p_std__pairT__Rep_type__const_iterator_bool_t,
  _swigc__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_BH__CmomT_dd_real_t_std__allocatorT_BH__CmomT_dd_real_t_t_t,
  _swigc__p_std__vectorT_BH__CmomT_double_t_std__allocatorT_BH__CmomT_double_t_t_t,
  _swigc__p_std__vectorT_BH__CmomT_qd_real_t_std__allocatorT_BH__CmomT_qd_real_t_t_t,
  _swigc__p_std__vectorT_BH__part_std__allocatorT_BH__part_t_t,
  _swigc__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t,
  _swigc__p_std__vectorT_BH__particle_ID_std__allocatorT_BH__particle_ID_t_t__const_iterator,
  _swigc__p_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t,
  _swigc__p_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t,
  _swigc__p_std__vectorT_BH__process_std__allocatorT_BH__process_t_t,
  _swigc__p_std__vectorT_BH__raw_bubble_std__allocatorT_BH__raw_bubble_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT_double_p_std__allocatorT_double_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_p_std__allocatorT_int_p_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_short_std__allocatorT_short_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__complexT_dd_real_t_std__allocatorT_std__complexT_dd_real_t_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_std__vectorT_std__complexT_qd_real_t_std__allocatorT_std__complexT_qd_real_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_std__allocatorT_std__vectorT_BH__particle_p_std__allocatorT_BH__particle_p_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_std__allocatorT_std__vectorT_BH__plabel_std__allocatorT_BH__plabel_t_t_t_t__const_iterator,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_triangleD,
  _swigc__p_value_compare,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "_GLIBCXX_COMPLEX",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "_STL_SET_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "particle_fermion",SWIG_From_int(static_cast< int >(BH::particle::fermion)));
  SWIG_Python_SetConstant(d, "particle_boson",SWIG_From_int(static_cast< int >(BH::particle::boson)));
  SWIG_Python_SetConstant(d, "particle_ord_type",SWIG_From_int(static_cast< int >(BH::particle::ord_type)));
  SWIG_Python_SetConstant(d, "particle_qc_type",SWIG_From_int(static_cast< int >(BH::particle::qc_type)));
  SWIG_Python_SetConstant(d, "particle_gc_type",SWIG_From_int(static_cast< int >(BH::particle::gc_type)));
  SWIG_Python_SetConstant(d, "particle_qgc_type",SWIG_From_int(static_cast< int >(BH::particle::qgc_type)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"gluon",Swig_var_gluon_get, Swig_var_gluon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"quark",Swig_var_quark_get, Swig_var_quark_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lepton",Swig_var_lepton_get, Swig_var_lepton_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"scalar",Swig_var_scalar_get, Swig_var_scalar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"photon",Swig_var_photon_get, Swig_var_photon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"gluino",Swig_var_gluino_get, Swig_var_gluino_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"higgs",Swig_var_higgs_get, Swig_var_higgs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"gluon_massive",Swig_var_gluon_massive_get, Swig_var_gluon_massive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"quark_massive",Swig_var_quark_massive_get, Swig_var_quark_massive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"gluino_massive",Swig_var_gluino_massive_get, Swig_var_gluino_massive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"scalar_massive",Swig_var_scalar_massive_get, Swig_var_scalar_massive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"m",Swig_var_m_get, Swig_var_m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"p",Swig_var_p_get, Swig_var_p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qp",Swig_var_qp_get, Swig_var_qp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qm",Swig_var_qm_get, Swig_var_qm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q2p",Swig_var_q2p_get, Swig_var_q2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q2m",Swig_var_q2m_get, Swig_var_q2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q3p",Swig_var_q3p_get, Swig_var_q3p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q3m",Swig_var_q3m_get, Swig_var_q3m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q4p",Swig_var_q4p_get, Swig_var_q4p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"q4m",Swig_var_q4m_get, Swig_var_q4m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qbp",Swig_var_qbp_get, Swig_var_qbp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qbm",Swig_var_qbm_get, Swig_var_qbm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb2p",Swig_var_qb2p_get, Swig_var_qb2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb2m",Swig_var_qb2m_get, Swig_var_qb2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb3p",Swig_var_qb3p_get, Swig_var_qb3p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb3m",Swig_var_qb3m_get, Swig_var_qb3m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb4p",Swig_var_qb4p_get, Swig_var_qb4p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"qb4m",Swig_var_qb4m_get, Swig_var_qb4m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lp",Swig_var_lp_get, Swig_var_lp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lm",Swig_var_lm_get, Swig_var_lm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lbp",Swig_var_lbp_get, Swig_var_lbp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lbm",Swig_var_lbm_get, Swig_var_lbm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"l2p",Swig_var_l2p_get, Swig_var_l2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"l2m",Swig_var_l2m_get, Swig_var_l2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lb2p",Swig_var_lb2p_get, Swig_var_lb2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"lb2m",Swig_var_lb2m_get, Swig_var_lb2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"s0",Swig_var_s0_get, Swig_var_s0_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"yp",Swig_var_yp_get, Swig_var_yp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ym",Swig_var_ym_get, Swig_var_ym_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gp",Swig_var_Gp_get, Swig_var_Gp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gm",Swig_var_Gm_get, Swig_var_Gm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gbp",Swig_var_Gbp_get, Swig_var_Gbp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gbm",Swig_var_Gbm_get, Swig_var_Gbm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"G2p",Swig_var_G2p_get, Swig_var_G2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"G2m",Swig_var_G2m_get, Swig_var_G2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gb2p",Swig_var_Gb2p_get, Swig_var_Gb2p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gb2m",Swig_var_Gb2m_get, Swig_var_Gb2m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"G3p",Swig_var_G3p_get, Swig_var_G3p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"G3m",Swig_var_G3m_get, Swig_var_G3m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gb3p",Swig_var_Gb3p_get, Swig_var_Gb3p_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Gb3m",Swig_var_Gb3m_get, Swig_var_Gb3m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"gsc",Swig_var_gsc_get, Swig_var_gsc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"scM",Swig_var_scM_get, Swig_var_scM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Qp",Swig_var_Qp_get, Swig_var_Qp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Qm",Swig_var_Qm_get, Swig_var_Qm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Qbp",Swig_var_Qbp_get, Swig_var_Qbp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Qbm",Swig_var_Qbm_get, Swig_var_Qbm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Lp",Swig_var_Lp_get, Swig_var_Lp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Lm",Swig_var_Lm_get, Swig_var_Lm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Lbp",Swig_var_Lbp_get, Swig_var_Lbp_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Lbm",Swig_var_Lbm_get, Swig_var_Lbm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ph",Swig_var_ph_get, Swig_var_ph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"phd",Swig_var_phd_get, Swig_var_phd_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"rat_ext_mass",Swig_var_rat_ext_mass_get, Swig_var_rat_ext_mass_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"top_ext_mass",Swig_var_top_ext_mass_get, Swig_var_top_ext_mass_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"top_mass",Swig_var_top_mass_get, Swig_var_top_mass_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"higgs_mass",Swig_var_higgs_mass_get, Swig_var_higgs_mass_set);
  SWIG_Python_SetConstant(d, "_OLD_PHASE_CONVENTION",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "_DO_INLINE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "_mt_massive",SWIG_From_int(static_cast< int >(BH::_mt_massive)));
  SWIG_Python_SetConstant(d, "_mt_massless",SWIG_From_int(static_cast< int >(BH::_mt_massless)));
  SWIG_Python_SetConstant(d, "_mt_unknown",SWIG_From_int(static_cast< int >(BH::_mt_unknown)));
  SWIG_Python_SetConstant(d, "_WITH_CACHING",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "_CACHE_STATISTICS",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "nf",SWIG_From_int(static_cast< int >(BH::nf)));
  SWIG_Python_SetConstant(d, "LT",SWIG_From_int(static_cast< int >(BH::LT)));
  SWIG_Python_SetConstant(d, "RT",SWIG_From_int(static_cast< int >(BH::RT)));
  SWIG_Python_SetConstant(d, "leading_color",SWIG_From_int(static_cast< int >(BH::leading_color)));
  SWIG_Python_SetConstant(d, "sub_leading_color",SWIG_From_int(static_cast< int >(BH::sub_leading_color)));
  SWIG_Python_SetConstant(d, "slc_q",SWIG_From_int(static_cast< int >(BH::slc_q)));
  SWIG_Python_SetConstant(d, "slc_G",SWIG_From_int(static_cast< int >(BH::slc_G)));
  SWIG_Python_SetConstant(d, "glue",SWIG_From_int(static_cast< int >(BH::glue)));
  SWIG_Python_SetConstant(d, "nS",SWIG_From_int(static_cast< int >(BH::nS)));
  SWIG_Python_SetConstant(d, "VECT",SWIG_From_int(static_cast< int >(BH::VECT)));
  SWIG_Python_SetConstant(d, "AX",SWIG_From_int(static_cast< int >(BH::AX)));
  SWIG_Python_SetConstant(d, "AXSL",SWIG_From_int(static_cast< int >(BH::AXSL)));
  SWIG_Python_SetConstant(d, "nf_top",SWIG_From_int(static_cast< int >(BH::nf_top)));
  SWIG_Python_SetConstant(d, "LLT",SWIG_From_int(static_cast< int >(BH::LLT)));
  SWIG_Python_SetConstant(d, "RLT",SWIG_From_int(static_cast< int >(BH::RLT)));
  SWIG_Python_SetConstant(d, "LRT",SWIG_From_int(static_cast< int >(BH::LRT)));
  SWIG_Python_SetConstant(d, "RRT",SWIG_From_int(static_cast< int >(BH::RRT)));
  SWIG_Python_SetConstant(d, "nfLT",SWIG_From_int(static_cast< int >(BH::nfLT)));
  SWIG_Python_SetConstant(d, "nfRT",SWIG_From_int(static_cast< int >(BH::nfRT)));
  SWIG_Python_SetConstant(d, "nfLLT",SWIG_From_int(static_cast< int >(BH::nfLLT)));
  SWIG_Python_SetConstant(d, "nfRLT",SWIG_From_int(static_cast< int >(BH::nfRLT)));
  SWIG_Python_SetConstant(d, "nfLRT",SWIG_From_int(static_cast< int >(BH::nfLRT)));
  SWIG_Python_SetConstant(d, "nfRRT",SWIG_From_int(static_cast< int >(BH::nfRRT)));
  SWIG_Python_SetConstant(d, "LLLT",SWIG_From_int(static_cast< int >(BH::LLLT)));
  SWIG_Python_SetConstant(d, "RRRT",SWIG_From_int(static_cast< int >(BH::RRRT)));
  SWIG_Python_SetConstant(d, "RLLT",SWIG_From_int(static_cast< int >(BH::RLLT)));
  SWIG_Python_SetConstant(d, "LRLT",SWIG_From_int(static_cast< int >(BH::LRLT)));
  SWIG_Python_SetConstant(d, "LLRT",SWIG_From_int(static_cast< int >(BH::LLRT)));
  SWIG_Python_SetConstant(d, "RRLT",SWIG_From_int(static_cast< int >(BH::RRLT)));
  SWIG_Python_SetConstant(d, "RLRT",SWIG_From_int(static_cast< int >(BH::RLRT)));
  SWIG_Python_SetConstant(d, "LRRT",SWIG_From_int(static_cast< int >(BH::LRRT)));
  SWIG_Python_SetConstant(d, "nfLLLT",SWIG_From_int(static_cast< int >(BH::nfLLLT)));
  SWIG_Python_SetConstant(d, "nfRRRT",SWIG_From_int(static_cast< int >(BH::nfRRRT)));
  SWIG_Python_SetConstant(d, "nfRLLT",SWIG_From_int(static_cast< int >(BH::nfRLLT)));
  SWIG_Python_SetConstant(d, "nfLRLT",SWIG_From_int(static_cast< int >(BH::nfLRLT)));
  SWIG_Python_SetConstant(d, "nfLLRT",SWIG_From_int(static_cast< int >(BH::nfLLRT)));
  SWIG_Python_SetConstant(d, "nfRRLT",SWIG_From_int(static_cast< int >(BH::nfRRLT)));
  SWIG_Python_SetConstant(d, "nfRLRT",SWIG_From_int(static_cast< int >(BH::nfRLRT)));
  SWIG_Python_SetConstant(d, "nfLRRT",SWIG_From_int(static_cast< int >(BH::nfLRRT)));
  SWIG_Python_SetConstant(d, "unspecified",SWIG_From_int(static_cast< int >(BH::unspecified)));
  SWIG_Python_SetConstant(d, "lo",SWIG_From_int(static_cast< int >(BH::lo)));
  SWIG_Python_SetConstant(d, "nlo",SWIG_From_int(static_cast< int >(BH::nlo)));
  SWIG_Python_SetConstant(d, "SeriesDefined",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cutD_factory_default_CF",Swig_var_cutD_factory_default_CF_get, Swig_var_cutD_factory_default_CF_set);
  SWIG_Python_SetConstant(d, "BUBYPOINTS_STD",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "BUBPOINTS_STD",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TRIPOINTS_STD",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "CTRIPOINTS_STD",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "BUBYPOINTS_HIGGS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "BUBPOINTS_HIGGS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "TRIPOINTS_HIGGS",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "CTRIPOINTS_HIGGS",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "TRICOEFFS",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "TRICOEFFSEP",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "BUBCOEFFS",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "BUBCOEFFSEP",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "ugly_specialization_tri",SWIG_From_int(static_cast< int >(0)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Known_cut_part_factory_s_default_KCPF",Swig_var_Known_cut_part_factory_s_default_KCPF_get, Swig_var_Known_cut_part_factory_s_default_KCPF_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Known_Rational_factory_s_default_KRF",Swig_var_Known_Rational_factory_s_default_KRF_get, Swig_var_Known_Rational_factory_s_default_KRF_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"normal_ratext_factory_s_default_NRF",Swig_var_normal_ratext_factory_s_default_NRF_get, Swig_var_normal_ratext_factory_s_default_NRF_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

